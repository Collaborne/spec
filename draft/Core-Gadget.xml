<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="opensocial-core-gadget-specification-draft"
     xmlns:x="http://purl.org/net/xml2rfc/ext">
 <front>
  <title abbrev="Core-Gadget">OpenSocial Core Gadget Specification (draft)</title>
  <author fullname='OpenSocial and Gadgets Specification Group'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="December"
        year="2009" />
  <area>General</area>
  <keyword>OpenSocial</keyword>
  <keyword>social networking</keyword>
  <keyword>REST</keyword>
  <keyword>XML</keyword>
  <keyword>Extensible Markup Language</keyword>
  <keyword>JSON</keyword>
  <keyword>JavaScript Object Notation</keyword>
  <keyword>Atom</keyword>
 </front>
 <middle>
  <section title="Notation and Conventions">
   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in 
   <xref target="RFC2119">RFC2119</xref>. Domain name examples use 
   <xref target="RFC2606">RFC2606</xref>.</t>
  </section>
  <section title="Overview">
   <t>Gadgets are web-based software components based on HTML, CSS, and
   JavaScript. They allow developers to easily write useful web applications
   that work anywhere on the web without modification. They are defined using a
   declarative XML syntax that is processed by a gadget server into a format
   that allows them to be embedded into various contexts: standalone web pages,
   web applications, even other gadgets. A context into which a gadget is
   embedded is called a gadget container. The container is responsible for
   managing the gadgets' layout and controls, as well as for supporting various
   functionality on behalf of the gadget. A gadget may be a simple widget, a
   reusable component, or a full-blown application, possibly utilizing or
   communicating with other gadgets.</t>
   <t>This document describes the gadget XML syntax and how it is processed by
   a compliant gadget server. In addition, the document describes the core 
   JavaScript APIs that must be made available to every gadget as it is 
   rendered. In addition to the core JavaScript APIs, gadget servers SHOULD
   support the recommended features listed at the end of this document.</t>
  </section>
  <section title="Concepts and Terminology">
    <list style="hanging">
     <t hangText="Container">The OpenSocial Container. It is typically
     represented as a web page, but alternative forms that are capable of
     displaying a gadget, such as a personal computer desktop or a mobile
     device, are also accepted.</t>
     <t hangText="Developer">The entity that has authored the gadget.</t>
     <t hangText="User">This may refer to any OpenSocial Person, though in most
     contexts it is referring to the Viewer of the gadget at runtime.</t>
     <t hangText="Content">The primary entity in a gadget that will be
     displayed to an end user. Currently only two types of Content are
     supported by OpenSocial: 
      <list style="hanging">
       <t hangText="Type HTML">Type HTML gadgets are the most prevalent, and are 
    imbued with the most rich feature set. Code is provided directly in the 
    gadget XML content section for rendering and control flow. This code simply 
    assumes that functionality is available that has been requested from 
    whatever gadget features were declared. In the case of optional-declared 
    features, a simple feature-existence API can and should be consulted to 
    ensure the capability is enabled. The code is processed by a gadget server 
    and rendered in an IFRAME.</t>
       <t hangText="Type URL">Type URL gadgets only specify a base URL. A standard 
    set of parameters are added to this URL by the gadget server, which renders 
    the gadget in an IFRAME. The application to which the URL points must 
    include a referenced JavaScript library using a &lt;script&gt; tag as it 
    renders, to enable gadget APIs to be made available. Type URL gadgets can't 
    take advantage of all features, notably features that manipulate HTML and 
    JavaScript code directly. However, this gadget type has proven highly useful
    for turning existing web sites or applications into gadgets.</t>
      </list>
      Multiple Content sections may be specified in gadget XML. Each is
   labeled with one or more optional view identifiers, which allow the gadget
   to behave or appear differently depending on the context in which it's
   rendered. This context is provided by the gadget container.</t>
     <t hangText="Metadata">Any piece of information attached to a gadget, such
     as a title, author name, or description, that provides processing
     instructions to the Container, or otherwise does not directly impact
     gadget rendering.</t>
     <t hangText="Feature">A library or behavior that is provided by the
     Container and triggered by use of the 
     <xref target="RequireAndOptional">/ModulePrefs/Require or
     /ModulePrefs/Optional tags</xref>. Gadget features are the primary extensibility mechanism employed by gadgets.
   They often direct a gadget server to make new JavaScript APIs available to
   rendering code, but may also manipulate the gadget's contents, for example
   to add extended syntax. Examples of gadget features include OpenSocial
   (provides gadgets with a rich set of social APIs), dynamic-height (enables
   gadgets to resize themselves to an appropriate height), and tabs (a UI
   library facilitating tabular navigation).</t>
     <t hangText="Message Bundles">Message bundles are XML documents containing localization
     information.  They allow developers to internationalize
   their gadgets simply by adding name/message mappings corresponding to
   whatever languages the developer chooses to support. These messages may be
   accessed programmatically through the core JavaScript APIs provided to all
   gadgets, or may be statically substituted into code using simple syntax. For more detail, see 
     <xref target="Localization">Localization</xref>.</t>
   <t>Message Bundles. .</t>
     <t hangText="User Preferences">Referred to as "user prefs" or "prefs",
     these represent configuration values for a User of the gadget. These are key/value pairs that form the basis of gadget
   configuration and persistence. They are most often manipulable by users of
   the gadget, and are persisted on behalf of a user so that the gadget has
   access to them across multiple rendering requests. The gadget container is
   typically responsible for providing their persistence for this data and an
   interface to edit it.  For more
     detail, see 
     <xref target="UserPref">User Preferences</xref>.</t>
     <t hangText="Gadget Specification XML">Generally referred to as "gadget
     spec", or simply a "gadget", this is the XML document that contains all
     the Metadata, Features, Message Bundles, User Preferences, and Content
     necessary to display a gadget to an end user. A gadget spec is authored by
     a Developer and made available through a public web server at a
     well-defined URL so that Containers may use this URL as a canonical
     reference for retrieving updates to the gadget.</t>
     <t hangText="Formal Schema Directory">Any system used to hold a repository
     of gadgets that may be installed by Users.</t>
     <t hangText="View">A presentation mode for a gadget.</t>
    </list>
  </section>
  <section title="Compliance">
   <t>To be a compliant Core Gadget Container, a server MUST be able to satisfy
   the requests defined in this section.</t>
   <section title="Retrieve Content Request" anchor="Retrieval">
    <t>Gadget Containers MUST be able to fetch remote files, such as 
    gadget specs, message bundles, CSS files, or images.</t>
     <t>Files SHOULD be retrieved from the source URL that the Developer
     has provided to the Container. Containers MAY fetch equivalent documents
     from alternate sources (such as caches or rewriting services) as long as
     those services are responsible for retrieving the document themselves.</t>
     <t>Containers SHOULD cache the file after fetching it. If the Container caches
     a document, it MUST implement the caching policy as defined by RFC2616. 
     Additionally, containers that cache documents SHOULD provide a mechanism to
     bypass the caching policy entirely to facilitate development, such as a 
     "nocache" query string parameter passed to the page that the gadget is 
     rendered on.  Containers MAY use expired cache entries for files to
     ensure that temporary network problems do not affect end users.</t> 
   </section>   
   <section title="Parse XML Request" anchor="Parsing">
    <t>XML documents MUST be well-formed, and Containers MUST display an error
    to Users if they are asked to process a malformed document. Containers
    SHOULD provide meaningful error messages to Developers when the
    specification is malformed.</t>
    <t>The XML MUST conform to the 
    <xref target="GadgetXmlSchema">Gadget XML Schema</xref> or the <xref target="MessageBundleSchema">Message Bundle Schema</xref>. These XSD schemas 
    represent all standard elements and attributes and
    allow for containers to support additional elements and attributes.
    </t>
    <t>Containers MAY support non-standard tags and attributes, but they MUST
    be enclosed in a separate XML namespace. This namespace SHOULD reflect the
    name of the organization responsible for the Container to avoid conflicts
    with other Containers. Containers are encouraged to try to find a way to
    work within the base schema whenever possible. Whenever an equivalent
    syntax is introduced into the standard, the Container MUST deprecate the
    proprietary extension and encourage their users to migrate to the
    standardized solution.</t>
    <t>Containers MUST ignore any attributes or tags that they can not
    interpret. This requirement is included to facilitate extensions to the
    schema for Container-specific uses. Containers MAY reject XML documents
    that do not provide all tags and attribute values required by the
    Container, but if they do so they MUST provide feedback to the Developer
    explaining the requirement.</t>
    <t>Containers MUST perform variable substitution according to the rules
    defined in 
    <xref target="VariableSubstitution">Variable Substitution</xref>.</t>
    <t>Containers MUST interpret any relative URLs found in XML attributes or
    values as relative to the gadget spec's URL. Containers MAY refuse to use
    or display the content referenced by these URLs at their discretion.</t>
   </section>
   <section title="Gadget Rendering Request" anchor="Rendering">
    <t>A Gadget Container's main function is to translate a Gadget XML file into content to deliver to the end user. A Gadget Rendering Request uses the following inputs:
      <list style="symbols">
       <t>Gadget XML, typically specified as a URL pointing to a file on the web.</t>
       <t>Any User Preferences stored for a User, used in <xref target="VariableSubstitution">Variable Substitution</xref>.</t>
       <t>The View to render, for identifying the correct &lt;Content&gt; element(s) to display.</t>
       <t>The Locale of the User, for <xref target="Localization">Localization</xref>.</t>
       <t>The Module ID of the gadget instance, used in <xref target="VariableSubstitution">Variable Substitution</xref> (Optional).</t>
      </list>
     </t>
     <t>For type="url" gadgets, these inputs are used to generate a URL of content to display to the user as described in <xref target="Type">/Content/@type</xref>.</t>
     <t>For type="html" gadgets, these inputs are used to generate HTML, CSS, and JavaScript as follows:
      <list style="numbers">
       <t>Fetch the gadget XML using a <xref target="Retrieval">Retrieve Content Request</xref>.</t>
       <t>Parse the gadget XML using a <xref target="Parsing">Parse XML Request</xref>, following the behavior defined in <xref target="ElementsAndAttributes">Elements and Attributes</xref>.</t>
       <t>Output gadget content as HTML:</t>
        <list style="numbers">
         <t>Standard HTML header, opening &lt;html&gt; tag and &lt;body&gt;
         tag. &lt;head&gt; information is optional. Gadgets run in browser
         quirks mode.</t>
         <t><xref target="CoreFeatures">Core gadgets JavaScript libraries</xref> and any additional libraries specified in the gadget. The server SHOULD consolidate all librariess into a single request to minimize the number of HTTP requests made by the client browser. This MAY be followed by JavaScripte required to initialize the included libraries.</t>
         <t>Results from parsing the Gadget XML file and processing the &lt;Content&gt; sections that match the specified View name.</t>
         <t>A single call to gadgets.util.runOnLoadHandlers().</t>
         <t>Standard HTML closing tags.</t>
        </list>
      </list>
     </t>
     <t>Containers must also be able to process <xref target="DataPipelining">Data Pipelining</xref> and <xref target="OpenSocial-Templating">Templating</xref> elements in the gadget XML spec.</t>
   </section>
   <section title="JavaScript Request">
    <t>In order for type="url" gadgets to access JavaScript libraries, the server MUST provide an HTTP service for retrieving core and feature-linked JavaScript. This HTTP service MUST handle requests to URLs provided in the 'libs' parameter described in <xref href="Type">/Content/@type</xref>.  The response to these requests MUST contain JavaScript code corresponding to the API(s) required by the type URL gadget.</t>
   </section>
  </section>
   <section title="Elements and Attributes"
            anchor="ElementsAndAttributes">
    <t>The following XML elements and attributes MUST be supported by the
    Container as mandated by the 
    <xref target="GadgetXmlSchema">Gadget XML Schema</xref>.
    Additional elements and attributes MAY be supported, but these elements are
    beyond the scope of this document.</t>
   <section title="Module"
            anchor="Module">
    <t>The root node of a gadget XML specification is the Module element. It
    does not support any attributes and containers SHOULD NOT interpret child
    text nodes.</t>
    <section title="/ModulePrefs"
             anchor="ModulePrefs">
     <t>Serves as a container element for all Metadata, Features, and
     processing rules. For nested element descriptions, see their individual
     sections of this document.</t>
     <list style="hanging">
      <t hangText="@title">The gadget's title. Containers SHOULD use this value
      in any situation where a title bar or other identifying name for the
      gadget is required.</t>
      <t hangText="@title_url">Containers SHOULD use this value to provide a
      link target wherever @title is displayed.</t>
      <t hangText="@description">A verbose description of the gadget.
      Containers SHOULD use this value to provide a description of the gadget
      in any Directory.</t>
      <t hangText="@author">The name of the author of this gadget. Containers
      SHOULD display this value in any Directory.</t>
      <t hangText="@author_email">An email address to use as a point of contact
      for the author of the gadget. Containers MAY display this value on any
      Directory.</t>
      <t hangText="@screenshot">Optional. A string that gives the URL of a gadget screenshot. This must be an image on a public web site that is not blocked by robots.txt. PNG is the preferred format, though GIF and JPG are also acceptable. Gadget screenshots should be 280 pixels wide. The height of the screenshot should be the "natural" height of the gadget when it's in use. Containers SHOULD display this image on Directory pages to provide a preview of the gadget to Users.</t>
      <t hangText="@thumbnail">Optional. A string that gives the URL of a gadget thumbnail. This must be an image on a public web site that is not blocked by robots.txt. PNG is the preferred format, though GIF and JPG are also acceptable. Gadget thumbnails should be 120x60 pixels. This
      SHOULD be smaller than @screenshot and larger than any 
      <xref target="Icons">/ModulePrefs/Link/@rel="icon"</xref>elements.</t>
      <t hangText="@height">The preferred default height of the gadget, in
      pixels. Containers SHOULD use this value to set an appropriate height for
      the gadget when it is first rendered.</t>
      <t hangText="@width">The preferred default width of he gadget, in pixels.
      Containers SHOULD use this value to set an appropriate width for the
      gadget when it is first rendered.</t>
      <t hangText="text()">This tag has child elements. Containers SHOULD NOT
      interpret child text nodes.</t>
     </list>
     <section title="/ModulePrefs/Require and /ModulePrefs/Optional"
              anchor="RequireAndOptional">
      <t>Declares Feature dependencies of the gadget.</t>
      <list style="hanging">
       <t hangText="@feature">The name of the Feature.</t>
       <t hangText="text()">This tag has child elements. Containers SHOULD NOT
       interpret child text nodes.</t>
      </list>
   <t>A Feature is a set of processing instructions and JavaScript libraries
   that provides some specific functionality for a Gadget.</t>
   <t>Containers MUST honor the feature-specific rules for any Feature that
   they claim to support. Any Feature not specified in this document SHOULD
   provide an external specification for processing so that implementations
   will be correct.</t>
   <t>Containers MUST display an error message for any feature that is
   requested by the Gadget as "required" but is not supported by the container.</t>
   <t>Containers MUST only return true for 
   <xref target="gadgets.util.hasFeature">gadgets.util.hasFeature</xref>if they
   actually support the given feature name. Containers MAY only return true for
   this function if the feature was also requested in the Gadget spec.</t>
   <list style="hanging">
     <t hangText="Core Features" anchor="CoreFeatures">
      <t>In addition to explicitly requested features, there is one implicit
      feature (referred to as "core") that is always present in every Gadget.
      This "core" feature MUST make the following JavaScript libraries available
      to Gadgets at runtime without any additional requirements:</t>
      <list style="symbols">
       <t>
        <xref target="gadgets.io">gadgets.io</xref>
       </t>
       <t>
        <xref target="gadgets.util">gadgets.util</xref>
       </t>
       <t>
        <xref target="gadgets.Prefs">gadgets.Prefs</xref>
       </t>
       <t>
        <xref target="gadgets.json">gadgets.json</xref>
       </t>
      </list>
     </t>
     <t hangText="Optional Features" anchor="OptionalFeatures">
      <t>Containers claiming support for the following Features MUST provide the
      Gadget with the JavaScript library from the table below. See the JavaScript
      documentation for each feature for any additional requirements. Containers
      SHOULD support as many of these features as possible.</t>
      <texttable align="left">
       <ttcol>Feature name</ttcol>
       <ttcol>JavaScript library</ttcol>
       <c>rpc</c>
       <c>
        <xref target="gadgets.rpc">gadgets.rpc</xref>
       </c>
       <c>flash</c>
       <c>
        <xref target="gadgets.flash">gadgets.flash</xref>
       </c>
       <c>skins</c>
       <c>
        <xref target="gadgets.skins">gadgets.skins</xref>
       </c>
       <c>dynamic-height</c>
       <c>
       <xref target="gadgets.window.adjustHeight">
       gadgets.window.adjustHeight</xref>and 
       <xref target="gadgets.window.getViewportDimensions">
       gadgets.window.getViewportDimensions</xref></c>
       <c>settitle</c>
       <c>
        <xref target="gadgets.window.setTitle">gadgets.window.setTitle</xref>
       </c>
       <c>minimessage</c>
       <c>
        <xref target="gadgets.MiniMessage">gadgets.MiniMessage</xref>
       </c>
       <c>tabs</c>
       <c>
        <xref target="gadgets.Tab">gadgets.Tab</xref>
       </c>
      </texttable>
     </t>
   </list>
      <section title="/ModulePrefs/Require/Param and /ModulePrefs/Optional/Param">
       <t>Provides configuration parameters for a Feature. Containers MUST
       populate these values in 
       <xref target="gadgets.util.getFeatureParameters">
       gadgets.util.getFeatureParameters</xref>, with @name representing the
       key, and the child text node representing the value.</t>
       <list style="hanging">
        <t hangText="@name">The name of the parameter. Containers MUST use this
        as the key for inputs to 
        <xref target="gadgets.util.getFeatureParameters">
        gadgets.util.getFeatureParameters</xref>.</t>
        <t hangText="text()">The value for the parameter. Containers MUST use
        this as the value returned when a matching key is found in 
        <xref target="gadgets.util.getFeatureParameters">
        gadgets.util.getFeatureParameters</xref>.</t>
       </list>
      </section>
     </section>
     <section title="/ModulePrefs/Preload" anchor="Preload">
      <t>An HTTP request to pre-fetch. Containers SHOULD pre-fetch all HTTP resources specified by
   /ModulePrefs/Preload elements.</t>
      <list style="hanging">
       <t hangText="@href">The URL of the request to prefetch.</t>
       <t hangText="@authz">The authentication type to use for making this
       request. Valid values are the same as for 
       <xref target="gadgets.io.AuthorizationType">
       gadgets.io.AuthorizationType</xref>, though the names are converted to
       lower case to appear more natural in XML.</t>
       <t hangText="@sign_owner">Indicates that the Owner should be passed to
       endpoints when using an authentication type that requires it. Containers
       MUST pass the owner id when this value is "true" (default).</t>
       <t hangText="@sign_viewer">Indicates that the Viewer should be passed to
       endpoints when using an authentication type that requires it. Containers
       MUST pass the viewer id when this value is "true" (default).</t>
       <t hangText="@views">A comma-separated list of Views to pre-fetch this
       request for. Containers SHOULD only perform preloading when an appropriate view is
       being rendered.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
   <t>When honoring the preloading mechanism,
   Containers MUST convert the results of the prefetching operation into a
   temporary object that is stored and accessed at runtime via 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>.
   Containers MUST only consider a makeRequest call to map to a Preload when
   all of the following conditions are met: 
   <t>/ModulePrefs/Preload/@href matches the "url" parameter of 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>.</t>
   <t>/ModulePrefs/Preload/@authz matches one of the valid parameters for 
   <xref target="gadgets.io.AuthorizationType">
   gadgets.io.AuthorizationType</xref>, converted to lower case.</t>
   <t>/ModulePrefs/Preload/@sign_owner matches the value passed for 
   <xref target="gadgets.io.RequestParameters.SIGN_OWNER">
   gadgets.io.RequestParameters.SIGN_OWNER</xref></t>
   <t>/ModulePrefs/Preload/@sign_viewer matches the value passed for 
   <xref target="gadgets.io.RequestParameters.SIGN_VIEWER">
   gadgets.io.RequestParameters.SIGN_VIEWER</xref></t>
   <t>/ModulePrefs/Preload/@views matches the current view (the views attribute
   is a comma-separated list of matching views).</t></t>
     </section>
     <section title="/ModulePrefs/Icon"
              anchor="Icon">
      <t>Deprecated. Use 
      <xref target="Icons">/ModulePrefs/Link/@rel="icon"</xref>instead.</t>
      <t>A link or embedded image that serves as an icon for the gadget.</t>
      <list style="hanging">
       <t hangText="@mode">The encoding used for the icon when embedding an
       image in the Icon element's child text node. Currently, only 'base64' is
       the only supported value. Containers SHOULD treat child text nodes as a
       base64 encoded image when this attribute is provided. Otherwise, child
       text nodes should be interpreted as an image URL.</t>
       <t hangText="@type">The MIME type of the embedded icon text. Containers
       SHOULD interpret the encoded child text node using this MIME type.</t>
       <t hangText="text()">Developers MUST provide a value for the child text
       node appropriate to the @mode value. If @mode is "base64", the child
       text node MUST be a base64-encoded image in the format specified by
       @type. If @mode is missing, the child text node MUST be a valid URL
       pointing to an image file.</t>
      </list>
     </section>
     <section title="/ModulePrefs/Locale" anchor="Locale">
      <t>Provides localization information. Containers MUST honor localization
      rules as specified in 
      <xref target="Localization">Localization</xref>. Each Locale tag
      represents localization information for a single locale.</t>
      <list style="hanging">
       <t hangText="@lang">The language for this locale. Containers MUST
       interpret this as an ISO-639-1 language code, or the special (default)
       value "all", which Containers MUST interpret as applying to all
       languages, unless a more specific match is found.</t>
       <t hangText="@country">The language for this locale. Containers MUST
       interpret this as an ISO-3166-1 country code, or the special (default)
       value "all", which Containers MUST interpret as applying to all
       countries unless a more specific match is found.</t>
       <t hangText="@messages">A URL pointing to an XML document that contains
       nested 
       <xref target="msg">/ModulePrefs/Locale/msg</xref>elements. Containers
       MUST honor 
       <xref target="Retrieval">Retrieval</xref>and 
       <xref target="Parsing">Parsing</xref>rules for these files. Containers
       MUST treat all child elements of the root XML element in the document as
       though they are child nodes of /ModulePrefs/Locale</t>
       <t hangText="@language_direction">Specifies the direction to render the
       gadget in. Valid values are "rtl" (right to left) and "ltr" (left to
       right). Containers SHOULD use this value for determining the appropriate
       rendering direction for gadget content in this locale. This value
       controls language direction variables in 
       <xref target="Localization">Localization</xref>.</t>
       <t hangText="text()">This tag has child elements. Containers SHOULD NOT
       interpret child text nodes.</t>
      </list>
      <section title="/ModulePrefs/Locale/msg"
               anchor="msg">
       <t>A single localized value, keyed by @name, with the value coming from
       text().</t>
       <list style="hanging">
        <t hangText="@name">The name of the localized message. The Container
        MUST use this as the key for the JavaScript API method 
        <xref target="gadgets.Prefs.getMsg">gadgets.Prefs.getMsg</xref>and for
        MSG substitutions (see 
        <xref target="Localization">Localization</xref>).</t>
        <t hangText="text()">The value of the message. Containers MUST
        substitute this value for @name according to 
        <xref target="Localization">Localization</xref>rules, and provide this
        value for any key matching @name in 
        <xref target="gadgets.Prefs.getMsg">gadgets.Prefs.getMsg</xref>.</t>
       </list>
      </section>
     </section>
     <section title="/ModulePrefs/Link"
              anchor="Link">
   <t>Gadgets MAY specify any number of 
   <xref target="Link">/ModulePrefs/Link</xref>elements, which the Container
   SHOULD process according to rules specific to the value of
   /ModulePrefs/Link/@rel. Containers MAY support additional links, but they
   should pick an appropriate namespace for the rel attribute so as to not
   conflict with the standard. Containers MUST NOT support non-standard rel
   attributes with any of the following prefixes: "opensocial", "gadgets", or
   "events".</t>
      <list style="hanging">
       <t hangText="@rel">The relationship between this link and the document.
       Valid values are specified in 
       <xref target="LifeCycleEvents">Life Cycle Events</xref> and 
       <xref target="Icons">Icons</xref>. Containers MAY support additional
       values, but they MUST be namespaced to avoid collisions.</t>
       <t hangText="@href">The URL of the link.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
   <section title="Icons"
            anchor="Icons">
    <t>When the value for /ModulePrefs/Link/@rel is "icon", Containers
    SHOULD treat the link as a reference to an image that represents an
    application icon for the Gadget. This is preferred over using 
    <xref target="Icon">/ModulePrefs/Icon</xref>, which is deprecated.</t>
   </section>
   <section title="Life Cycle Events"
            anchor="LifeCycleEvents">
    <t>Whenever an "event" (such as installing or removing an application)
    occurs on a Container, and the Gadget has specified a value for a matching
    event name (either as the catch-all "events", or a specific event, named
    "event.eventtype", the Container MUST make an HTTP request to the specified
    URL.</t>
    <t>The request sent to the specified endpoint MUST be signed according to
    the rules in 
    <xref target="SignedFetch">Signed Fetch</xref>. Additionally, one extra
    parameter named "eventtype" MUST be passed. This value MUST be the same as
    the event name part of the 'rel' attribute.</t>
   </section>              
     </section>
     <section title="/ModulePrefs/OAuth"
              anchor="OAuthElement">
      <t>Supplies the Container with OAuth service configuration for the
      gadget. For details, see 
      <xref target="OAuth">OAuth</xref>. This tag has no attributes and has
      child elements. Containers SHOULD NOT interpret child text nodes.</t>
      <section title="/ModulePrefs/OAuth/Service">
       <t>A single OAuth service configuration.</t>
       <list style="hanging">
        <t hangText="@name">The name of the service, used for referencing OAuth
        services at runtime. This parameter is optional, and if unspecified
        defaults to an empty string. Gadget developers specify which OAuth
        service they wish to use by passing the service name as a parameter to 
        <xref target="gadgets.io.makeRequest">
        gadgets.io.makeRequest</xref>.</t>
        <t hangText="text()">Not used at this time.</t>
       </list>
       <section title="/ModulePrefs/OAuth/Service/Request">
        <t>Represents the OAuth request token URL. See 
        <xref target="OAuth">OAuth</xref>for details.</t>
        <list style="hanging">
         <t hangText="@url">The URL for the endpoint.</t>
         <t hangText="@method">The HTTP verb to use for making the request.
         Containers MUST use this HTTP method when sending the request to the
         service URL. This parameter is optional. If unspecified, it defaults
         to POST.</t>
         <t hangText="@param_location">One of 3 possible locations in the
         request to the service where the OAuth parameters may be passed.
         Developers MAY use this value to specify the location of OAuth-related
         parameters. The possible values are "uri-query", "auth-header", and
         "post-body", corresponding to the options described in 
         <xref target="OAuth-Core">Section 5.2 of the OAuth
         specification</xref>. The default value is "auth-header".</t>
         <t hangText="text()">Not used at this time.</t>
        </list>
       </section>
       <section title="/ModulePrefs/OAuth/Service/Access">
        <t>Represents the OAuth access token URLs. See 
        <xref target="OAuth">OAuth</xref>for details.</t>
        <list style="hanging">
         <t hangText="@url">The URL for the endpoint.</t>
         <t hangText="@method">The HTTP verb to use for making the request.
         Containers MUST use this HTTP method when sending the request to the
         service URL. This parameter is optional. If unspecified, it defaults
         to POST.</t>
         <t hangText="@param_location">One of 3 possible locations in the
         request to the service where the OAuth parameters may be passed.
         Developers MAY use this value to specify the location of OAuth-related
         parameters. The possible values are "uri-query", "auth-header", and
         "post-body", corresponding to the options described in 
         <xref target="OAuth-Core">Section 5.2 of the OAuth
         specification</xref>. The default value is "auth-header".</t>
         <t hangText="text()">Not used at this time.</t>
        </list>
       </section>
       <section title="/ModulePrefs/OAuth/Service/Authorization"
                anchor="Authorization">
        <t>The OAuth authorization URL. For details, see 
        <xref target="OAuth-Core">Section 6.2 of OAuth
        specification</xref>.</t>
       </section>
      </section>
     </section>
    </section>
    <section title="/UserPref"
             anchor="UserPref">
     <t>A User Preference specification.</t>
     <list style="hanging">
      <t hangText="@name">The name of the preference. Containers MUST provide
      the current value of the preference when this key is passed to the getters found in  
      <xref target="gadgets.Prefs">gadgets.Prefs</xref>. This is also the key used when performing UP substitutions (see
      <xref target="Localization">Localization</xref>).</t>
      <t hangText="@datatype">The data type for this preference. Valid values
      are "string", "hidden", "bool", "list", and "number". The default value
      is "string".</t>
      <t hangText="@display_name">The name of the preference for use when
      rendering an editing interface for prefs. Developers SHOULD use this
      value to provide a localized name for the preference as described in 
      <xref target="Localization">Localization</xref>. Containers SHOULD use
      this value to render any editing interfaces for Users.</t>
      <t hangText="@default_value">A default value for this preference.
      Containers MUST provide this value for any calls to the getters in 
      <xref target="gadgets.Prefs">gadgets.Prefs</xref> whenever the key matches @name.</t>
      <t hangText="@required">Whether or not a valid value needs to be set for
      this preference in order for the gadget to function correctly. Valid
      values are "true" and "false" (default). If the value is "true",
      Containers SHOULD display an error message or a prompt if there is no
      valid value stored.</t>
      <t hangText="text()">This tag has child elements. Containers SHOULD NOT
      interpret child text nodes.</t>
     </list>
   <t>Containers MUST interpret /UserPref elements by making each preference
   available to the Gadget through the <xref target="gadgets.Prefs">gadgets.Prefs</xref> library.
   Containers MUST treat /UserPref/@name as the keys for indexing into
   stored preference values when invoking the getters of 
   <xref target="gadgets.Prefs">gadgets.Prefs</xref>.</t>
   <t>Containers MUST perform 
   <xref target="VariableSubstitution">Variable Substitution</xref> for user
   preferences by treating /UserPref/@name as the key in the token and the
   stored value for the preference as the replacement value.</t>
   <t>Containers MUST provide /UserPref/@default_value as the value for the
   preference when the User or Gadget has not set a value explicitly.</t>
   <t>Containers SHOULD support the following datatypes: 
   <list>
    <list style="hanging">
     <t hangText="string">A string accessed by gadgets.Prefs.getString. Default
     data type.</t>
     <t hangText="bool">Evaluates to true or false when accessed by
     gadgets.Prefs.getBool()</t>
     <t hangText="enum">a list of values specified by /UserPref/EnumValue
     elements. Current value is accessed by gadgets.Prefs.getString()</t>
     <t hangText="hidden">a non-visible string that is not user editable but
     can be accessed by gadgets.Prefs.getString()</t>
     <t hangText="list">a pipe-delimited (|) string of values, returned as a
     JavaScript array when accessed by gadgets.Prefs.getArray().</t>
    </list>
   </list></t>
   <t>Containers SHOULD provide a user interface so that all visible User
   Preferences (any type other than "hidden") may be modified by the User of
   the Gadget.</t>
     <section title="/UserPref/EnumValue">
      <t>A single value that serves as a constraint on User Preferences when
      /UserPref/@datatype is "enum". Containers SHOULD use EnumValue elements
      to present Users with a menu when rendering a preferences interface. For
      details on handling enum preferences, see 
      <xref target="UserPref">User Preferences</xref>.</t>
      <list style="hanging">
       <t hangText="@value">The value for this enumeration element.</t>
       <t hangText="@display_value">A textual representation of @value.
       Defaults to the value of @value. Containers SHOULD display this value in
       place of @value when rendering a user interface for editing
       preferences.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
     </section>
    </section>
    <section title="/Content"
             anchor="ContentElement">
     <t>Contains the run time portion of the gadget.</t>
     <list style="hanging">
      <t hangText="@type" anchor="Type">REQUIRED. The type of content included in the body of this
      element. Valid values are "html" and "url". Containers MUST interpret the
      body of this element according to the specific processing rules for each
      type.
      <t>When /Content/@type is "html", Containers MUST perform 
   <xref target="VariableSubstitution">Variable Substitution</xref> on the final
   assembled content section.</t>
      <t>When /Content/@type is "url", Containers MUST display a direct view of
   the value for /Content/@href (for a web context, this SHOULD be an HTML
   iframe). The Container MUST append the following query string parameters to the URL:
    <list style="hanging">
     <t hangText="up_&lt;name&gt;"> A query parameter for each User Preference as a name/value pair.</t>
     <t hangText="lang">The language of the User viewing the gadget (valid
     values are the same as for <xref target="Locale">/ModulePrefs/Locale/@lang</xref>).</t>
     <t hangText="country">The country of the User viewing the gadget. (valid
     values are the same as for <xref target="Locale">/ModulePrefs/Locale/@country</xref>).</t>
     <t hangText="libs">A relative URL that points to any JavaScript files
     necessary to satisfy the features specified in 
     <xref target="RequireAndOptional">/ModulePrefs/Require and /ModulePrefs/Optional</xref> elements in the Gadget.</t>
    </list>
      </t>
      </t>
      <t hangText="@href">A URL pointing to an external file containing the
      body of this element.
      <t>If @type is "url", this value is REQUIRED. If @type
      is "url", this value represents an external document that SHOULD be
      presented directly to Users without filtering, typically by rendering an
      html IFRAME element with @href as the "src" attribute. </t>
      <t>If @type is "html", the Container
   MUST make an HTTP GET request to the URL specified by @href, and interpret
   the response body as though it were /Content/text().</t>
      </t>
      <t hangText="@preferred_height">The suggested default height, in pixels,
      to use when rendering this gadget. Containers SHOULD use this value as
      the default height for a gadget in any environment that allows gadgets to
      have variable heights.</t>
      <t hangText="@preferred_width">The suggested default width, in pixels, to
      use when rendering this gadget. Containers SHOULD use this value as the
      default width for a gadget in any environment that allows gadgets to have
      variable widths.</t>
      <t hangText="@view">A comma delimited list of Views in which to include the content in this section. Example: &lt;Content view="Profile, Home, Home.About"/&gt;
        contains Content for three named views: Profile, Home, and Home.About.
      <t>To assemble a View, all Content sections where @view contains the required view name are concatenated.  Concatenation does not happen when the @href is set on a
        &lt;Content&gt; block. In this case, the set of view names on
        &lt;Content&gt; blocks with @href set to a non-null, non-empty string
        MUST be unique within the Gadget XML. If this is not true, the markup
        is invalid. A container may process gadget markup ahead of acceptance
        into a container's application gallery, checking for the href
        conditions when importing gadget XML. This validity check need not be
        performed at render time.</t>
      </t>
      <t hangText="text()">Contains data in an appropriate format to satisfy
      the requirements for @type. When @type is "html", if no @href is
      specified, this value MUST be a block of html. The text within this element SHOULD be wrapped in CDATA to avoid having to escape HTML tags and to prevent them from being interpreted by the XML parser.</t>
     </list>
    </section>
   </section>
  </section>
   <section title="Content Rewriting">
    <t>Containers MAY support content rewriting. The feature supports rewriting
    the content of a generated gadget and allow developers to control how the
    behavior of the rewriter through an optional gadget feature named
    content-rewrite. The content-rewrite feature defines a set of rewriting
    operations that a container can perform on rendered and proxied content and
    defines rules to allow developers to control which content the rewriter can
    operate on.</t>
    <section title="Definition">
     <t>
     <figure>
      <preamble>The rewriter feature has the general form :</preamble>
      <artwork xml:space="preserve">
&lt;Optional feature="content-rewrite"&gt;
    &lt;Param name="expires"&gt;86400&lt;/Param&gt;
    &lt;Param name="include-url"&gt;&lt;/Param&gt;
    &lt;Param name="exclude-url"&gt;excluded&lt;/Param&gt;
    &lt;Param name="exclude-url"&gt;moreexcluded&lt;/Param&gt;
    &lt;Param name="minify-css"&gt;true&lt;/Param&gt;
    &lt;Param name="minify-js"&gt;true&lt;/Param&gt;
    &lt;Param name="minify-html"&gt;true&lt;/Param&gt;
&lt;/Optional&gt;
</artwork>
     </figure>The parameters are defined as follows: 
     <list type="symbols">
      <t>expires - The duration in seconds to force as minimum HTTP cache time
      for content fetched through the proxy via a rewritten URL. Default
      86400.</t>
      <t>include-url - Any URL which contains this parameters value as a
      case-insensitive substring is considered rewriteable. The literal string
      "*" is a special case and implies all URLs. If not specified an entry
      with the value "*" is assumed. This parameter can be repeated.</t>
      <t>exclude-url - Any URL which contains this parameters value as a
      case-insensitive substring is excluded from rewriting. The literal string
      "*" implies all URLs and effectively disables all rewriting. This
      parameter can be repeated.</t>
      <t>minify-css - Controls whether the container will attempt to minify css
      in style tags and referenced css files. Valid values are "true"|"false".
      Default is "true".</t>
      <t>minify-js - Controls whether the container will attempt to minify JS
      in script tags and referenced JS files. Valid values are true|false.
      Valid values are "true"|"false". Default is "true".</t>
      <t>minify-html - Controls whether the container will attempt to minify
      HTML content. Valid values are true|false. Valid values are
      "true"|"false". Default is "true".</t>
     </list>Matches for "exclude-url" take precedence over matches for
     "include-url"</t>
     <t>Note that the special use of "*" to denote all URLs should not be
     interpreted as support for GLOB or RegEx matching on strings.</t>
     <t>Containers are free to perform additional optimizations when rewriting
     links including but not limited to: 
     <list type="symbols">
      <t>Extract @import directives from style tags and convert them into link
      tags in the head tag of the containing HTML content.</t>
      <t>Merge multiple CSS fetches from successive link tags into one link tag
      that causes the proxy to concatenate the content fetched from the
      individual URLs.</t>
      <t>Merge contiguous &lt;script src=xxx&gt; tags into one concatenating
      proxy fetch.</t>
     </list></t>
    </section>
    <section title="Examples">
     <t>
      <figure>
       <preamble>Rewrite only gif images</preamble>
       <artwork xml:space="preserve">
&lt;Optional feature="content-rewrite"&gt;
    &lt;Param name="include-url"&gt;.gif&lt;/Param&gt;
&lt;/Optional&gt;
</artwork>
      </figure>
      <figure>
       <preamble>Rewrite only gif images that do not contain "animated" or
       "cdn"</preamble>
       <artwork xml:space="preserve">
&lt;Optional feature="content-rewrite"&gt;
    &lt;Param name="include-url"&gt;.gif&lt;/Param&gt;
    &lt;Param name="exclude-url"&gt;animated&lt;/Param&gt;
    &lt;Param name="exclude-url"&gt;cdn&lt;/Param&gt;
&lt;/Optional&gt;
</artwork>
      </figure>
      <figure>
       <preamble>Disable all rewriting</preamble>
       <artwork xml:space="preserve">
&lt;Optional feature="content-rewrite"&gt;
    &lt;Param name="exclude-url"&gt;*&lt;/Param&gt;
&lt;/Optional&gt;
</artwork>
      </figure>
     </t>
    </section>
   </section>
  <section title="Proxied Content"
           anchor="ProxiedContent">
   <t>When rendering an OpenSocial Gadget, the container MUST determine if the
   content for the active view is to be proxied. This is done by checking for
   the presence of a /Content/@href attribute.</t>
   <t>If the attribute is present, the container MUST issue an HTTP request to
   the URI specified by the href attribute following the rules defined in 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>.</t>
   <t>Attributes on the Content element map to makeRequest as follows: 
   <list style="symbols">
    <t>authz: gadgets.io.AuthorizationType (values are canonicalized by
    converting to lower case. Default value is 'none')</t>
    <t>oauth_service_name: gadgets.io.RequestParameters.OAUTH_SERVICE_NAME</t>
    <t>oauth_token_name: gadgets.io.RequestParameters.OAUTH_TOKEN_NAME</t>
    <t>oauth_request_token:
    gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN</t>
    <t>oauth_request_token_secret:
    gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN_SECRET</t>
    <t>sign_owner: gadgets.io.RequestParameters.SIGN_OWNER (default 'true')</t>
    <t>sign_viewer: gadgets.io.RequestParameters.SIGN_VIEWER (default
    'true')</t>
    <t>refresh_interval: gadgets.io.RequestParameters.REFRESH_INTERVAL</t>
   </list></t>
   <t>Note that these attributes also apply to Preload elements.</t>
   <t>The container MUST also add the following parameters to the URI query
   string: 
   <list style="symbols">
    <t>lang: The language of the user viewing the page as specified in Section
    3 i under Process in this document.</t>
    <t>country: The country of the user viewing the page as specified in
    Section 3 i under Process in this document.</t>
    <t>opensocial_proxied_content: MUST be present and set to 1. Servers can
    use this to distinguish proxied content renders from
    gadgets.io.makeRequest() calls. Remote sites that expect proxied content
    requests SHOULD reject requests that do not have opensocial_proxied_content
    set to 1. If a remote site fails to implement this check, any content in
    the POST body may be spoofed by a malicious user or application.</t>
   </list></t>
   <t>By default, the request is sent to the remote site MUST be sent to the
   remote site as an HTTP GET. When the Content section includes Data
   Pipelining elements, the container MUST send the data to the request URI
   using an HTTP POST. The structure of this data will match the 
   <eref target="./Core-API-Server.xml#RPC">JSON-RPC format</eref>.</t>
   <section title="Processing Results">
    <t>If the response to the proxied request returns a successful HTTP status
    code, the container MUST interpret the resulting response body according to
    the rules for content declared inline.</t>
    <t>If the response to the proxied request returns an unsuccessful HTTP
    status code, the container SHOULD present a meaningful error message to the
    end user. Containers SHOULD obtain a suitable error message for display by
    displaying the content specified for a view named as view-name.error, where
    view-name matches the name of the view that the proxied request was being
    processed for. If an exact match can not be found, the special value
    default.error should be used. If default.error is not present, the
    container SHOULD display a generic message indicating that a problem
    occurred.</t>
   </section>
   <section title="Caching">
    <t>Containers SHOULD cache the results of the HTTP request following the
    recommendations of section 13 of 
    <xref target="RFC2616">RFC 2616</xref>. If a container does support caching
    of data, it MUST also support overriding HTTP caching by using the value
    specified for refresh_interval.</t>
    <t>Caches SHOULD be keyed using the following: 
    <list style="symbols">
     <t>The URI of the proxied request.</t>
     <t>The opensocial owner id, if sign_owner is set to true and requests are
     authenticated.</t>
     <t>The opensocial viewer id, if sign_viewer is set to true and requests
     are authenticated.</t>
     <t>The language and country passed in to the proxied URI.</t>
    </list></t>
    <t>Containers MAY cache unsuccessful HTTP responses ("negative caching"),
    but SHOULD NOT cache unsuccessful responses for a period longer than 5
    minutes.</t>
    <section title="Processing Content">
     <t>The container MUST normalize content bodies in a way that preserves
     semantic meaning in the resulting HTML output. Specifically, containers
     MUST preserve the structure of the document for the context the gadget
     will be rendered in as follows: 
     <list style="symbols">
      <t>If the document is a complete HTML document, including opening and
      closing html tags, the container MUST retain the semantic meaning of
      document type definition declarations as well as the relative position of
      elements in the document. 
      <list style="symbols">
       <t>A container MAY choose to move elements from the head of a document
       and into the body (or vice versa), but the end result MUST behave the
       same as the original input .</t>
      </list></t>
      <t>Containers MAY modify the document in other ways for optimization and
      security purposes as long as semantics are preserved</t>
     </list></t>
    </section>
    <section title="Processing XML">
     <t>The container MUST resolve all URI attributes and values relative to
     the location of the gadget spec xml document. This DOES NOT include links
     inside of the body of the Content element at this point in time.</t>
    </section>
   </section>
  </section>
  <section title="Variable Substitution"
           anchor="VariableSubstitution">
   <t>Variables may be substituted into a gadget by replacing special variable
   tokens with an appropriate value defined elsewhere in the spec. Tokens take
   the form __&lt;TYPE&gt;_&lt;key&gt;__. For all substitutions, the full token
   is to be replaced by a value for the following values of &lt;TYPE&gt;:</t>
   <list style="hanging">
    <t hangText="MSG">See 
    <xref target="Localization">Localization</xref></t>
    <t hangText="BIDI">See <xref target="Localization">Localization</xref></t>
    <t hangText="MODULE">Currently, "ID" is the only &lt;key&gt; value supported. Containers SHOULD provide a unique value
    for ID for each instance of a gadget displayed simultaneously.</t>
    <t hangText="UP">See 
    <xref target="UserPref">User Preferences</xref>. Whenever there is no
    value for a token declared in the gadget, Containers SHOULD still replace
    the token with an empty string. Containers MUST NOT replace tokens with an
    unknown TYPE with an empty string. Instead, the token should be left in the
    gadget in it's original form.</t>
   </list>
   <t>Containers MUST perform substitution on all elements and attributes
   defined in 
   <xref target="ElementsAndAttributes">Elements and Attributes</xref>, with
   the exceptions of /ModulePrefs/Locale (and children), or any element with an
   explicit enumeration. Containers MUST NOT perform substitution on the raw
   text of the XML. Containers SHOULD perform substitution on any custom
   elements or fields that they support.</t>
   <t>Containers MUST perform MSG substitutions in the order listed above.
   Containers MUST substitute BIDI, MODULE, and UP tokens after substituting
   MSG values, but they MUST NOT recursively substitute any other tokens.</t>
  </section>
  <section title="Localization"
           anchor="Localization">
   <t>Localization of a gadget is achieved primarily through 
   <xref target="VariableSubstitution">Variable Substitution</xref>, using the
   MSG token.</t>
   <t>To determine appropriate keys and values for substitution, Containers
   MUST select an appropriate /ModulePrefs/Locale based on the following
   rules:</t>
   <list style="numbers">
    <t>An exact match for the language and country of the User viewing the
    gadget.</t>
    <t>An exact match for language, country = "all".</t>
    <t>Language = "all", country = "all'.</t>
   </list>
   <t>Containers MAY provide their own translations or use a third-party
   translation service if there is no appropriate Locale defined in the
   gadget.</t>
   <t>After selecting a Locale, Containers MUST replace all MSG tokens by using
   /ModulePrefs/Locale/msg/@name for keys and /ModulePrefs/Locale/msg/text()
   for values.</t>
   <t>Containers MUST perform BIDI token substitution with the following values
   if /ModulePrefs/Locale/@language_direction is "rtl":</t>
   <artwork type="example"
         xml:space="preserve">START_EDGE: "right"
END_EDGE: "left"
DIR: "rtl"
REVERSE_DIR: "ltr"
</artwork>
   <t>Otherwise:</t>
   <artwork type="example"
         xml:space="preserve">START_EDGE: "left"
END_EDGE: "right"
DIR: "ltr"
REVERSE_DIR: "rtl"
</artwork>
  </section>
  <section title="Signed Fetch"
           anchor="SignedFetch">
   <t>Containers MUST support signing of HTTP requests for 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>, 
   <xref target="LifeCycleEvents">Life Cycle Events</xref>, and 
   <xref target="Preload">Preloading</xref>. The container does this by
   doing the following: 
   <list style="numbers">
    <t>Removing any request parameters with names that begin with oauth,
    xoauth, or opensocial (case insensitive).</t>
    <t>Adding the following parameters to the request query string:</t>
    <list style="hanging">
     <t hangText="opensocial_viewer_id">Optional. The ID of the current viewer,
     which matches the getId() value on the viewer person object.</t>
     <t hangText="opensocial_owner_id">Required. The ID of the current owner,
     which matches the getId() value on the owner person object.</t>
     <t hangText="opensocial_app_url">Required. The URL of the application
     making the request. Containers may alias multiple application URLs to a
     single canonical application URL in the case where an application changes
     URLs.</t>
     <t hangText="opensocial_instance_id">Optional. An opaque identifier used
     to distinguish between multiple instances of the same application in a
     single container. If a container does not allow multiple instances of the
     same application to coexist, this parameter may be omitted. The
     combination of opensocial_app_url and opensocial_instance_id uniquely
     identify an instance of an application in a container.</t>
     <t hangText="opensocial_app_id">Optional. An opaque identifier for the
     application, unique to a particular container. Containers that wish to
     maintain backwards compatibility with the opensocial-0.7 specification may
     include this parameter.</t>
     <t hangText="xoauth_public_key">Optional. An opaque identifier for the
     public key used to sign the request. This parameter may be omitted by
     containers that do not use public keys to sign requests, or if the
     container arranges other means of key distribution with the target of the
     request.</t>
    </list>
    <t>Signing the resulting request according to section 9 of the 
    <eref target="http://oauth.net/core/1.0/#signing_process">OAuth
    specification</eref>.</t>
   </list></t>
   <t>If a container uses public keys to sign requests, the container may
   choose to use either self-signed certificates or certificates signed by a
   well-known certificate authority. If a container does not distribute its
   OAuth signing key over HTTPS, it should use a certificate signed by a
   well-known certificate authority.</t>
   <t>The commonName attribute of the certificate should match the hostname of
   the container server, and should also match the value of the
   oauth_consumer_key parameter specified in the request.</t>
   <t>The container should make its public key available for download at a
   well-known location. The location
   https://[container-hostname]/opensocial/certificates/xoauth_public_keyvalue
   is recommended.</t>
   <t>Recipients of signed requests must verify that the signature on the
   request is correct, and that the timestamp on the request is within a
   reasonable time window. A time window of 5 minutes before and after the
   current time is recommended.</t>
   <t>Recipients of signed requests may use the oauth_consumer_key and
   xoauth_public_key parameters to automatically detect when a container
   deploys new certificates. If the container deploys certificates at a
   well-known location, the recipient may automatically download the new
   certificate. Recipients that automatically download new certificates should
   cache the resulting certificates.</t>
   <t>If a container's certificate is not downloaded from
   https://[container-hostname], the recipient should verify that the
   certificate is signed by a well-known certificate authority before trusting
   the certificate.</t>
  </section>
  <section title="OAuth"
           anchor="OAuth">
   <t>Containers MUST support OAuth requests for 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>. When
   proxying a Gadget's request, Containers SHOULD use an OAuth token specific
   to the gadget making the request, and specific to either the Viewer or the
   Owner of the container page. Furthermore, when proxying a gadget's request,
   Containers MAY use an OAuth Consumer key and secret specific to the gadget
   making the request, or they MAY alternatively use the container's OAuth
   consumer key and secret. For more details, see the 
   <xref target="OAuth-Core">OAuth spec</xref>.</t>
   <section title="Consumer Secrets">
    <t>It is beyond the scope of this document to specify how a Container
    obtains consumer keys and secrets for Gadgets that it may proxy requests
    for. As explained above, a Container MAY instead use its own consumer key
    and secret when making OAuth requests. A Container could even use the
    RSA_SHA1 signature method, effectively using the same consumer key and
    secret for all gadgets, and for all OAuth service providers it is proxying
    requests to.</t>
   </section>
   <section title="OAuth Tokens">
    <t>When proxying a 
    <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>of 
    <xref target="gadgets.io.AuthorizationType">
    gadgets.io.AuthorizationType</xref>'OAUTH', the container SHOULD do the
    following:</t>
    <list style="numbers">
     <t>If the container finds an appropriate OAuth access token and secret for
     the request, the Container signs the outgoing request according to the
     OAuth specification.</t>
     <t>If the container finds no appropriate OAuth access token, but an
     appropriate OAuth request token for the request, the container accesses
     the access token endpoint of the target service provider, and attempts to
     exchange the request token for an access token. If successful, the
     container then immediately uses the access token to sign the request made
     by the gadget.</t>
     <t>If the container finds neither an appropriate OAuth access token or
     request token, it accesses the request token endpoint of the target
     service provider to obtain a request token. It then returns an error
     message to the Gadget that contains, among other things, the user
     authorization URL at the target service provider. The Gadget is expected
     to redirect the User Agent to that authorization URL and re-attempt the 
     <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>once
     the user has approved the OAuth access.</t>
    </list>
   </section>
  </section>
  <section title="JavaScript API Reference" anchor="JavaScript-API-Reference">
    <t>OpenSocial's JavaScript API uses the following patterns:</t>
    <list style="hanging">
    <t hangText="Virtual Typing">
     <t>JavaScript is not strongly typed, but in order to make the developer
     experience consistent, the APIs are defined as if JavaScript supported
     strongly typed data. Cases where a parameter or return value are defined
     as a certain type in the documentation indicate that this is the only type
     that can be provided or accepted for OpenSocial compatibility. Any
     exceptions to this rule will be directly documented in the reference.</t>
     <t>As an example, the getErrorCode method is defined in the JavaScript API
     reference as returning a value of the type opensocial.ResponseItem.Error,
     although in practice this value will be a normal JavaScript string.
     However, developers can be assured that in a compliant container, the
     string returned is one of the opensocial.ResponseItem.Error fields.</t>
     <t>Enumerations figure heavily into the OpenSocial API. Developers are
     permitted to reference an enum or use the enum's value directly. To avoid
     collisions related to extensibility, containers must ensure that the names
     and values for an enum match the ones defined in the spec and that custom
     values are namespaced appropriately. For example, an Orkut custom field
     named MY_PERSON_FIELD could have a name of
     Orkut.PersonField.MY_PERSON_FIELD and a value of "Orkut.myPersonField".</t>
    </t>
    <t hangText="Parameter Maps">
     <t>Many of the OpenSocial methods have a large number of optional
     parameters. JavaScript's lack of strong typing makes overloading difficult
     at best, and having functions with a large amount of parameters can be
     difficult to manage (especially for developers not using a nice IDE).
     OpenSocial uses the "object bag" approach to optional parameters: many
     methods take an additional opt_params parameter that takes the form of a
     map of parameter names to their corresponding values.</t>
     <t>For each method which uses an opt_params map the spec defines all of
     the valid fields that will be read out of the map by the container. These
     fields have defined types as discussed in the Virtual typing section. If a
     developer adds an invalid value for a field in the map the container
     SHOULD return the BAD_REQUEST error code.</t>
    </t>
   </list>
   <section title="gadgets"
            anchor="gadgets">
    <!-- ============================== class summary ========================== -->
    <t>Namespace for top-level gadget functions.</t>
    <section title="Method Details">
     <section title="log"
              anchor="gadgets.log">
      <t>&lt;static&gt; gadgets.log(message)</t>
      <t>Description: Log an informational message.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>Object</c>
       <c>The message to log</c>
      </texttable></t>
     </section>
     <section title="warn"
              anchor="gadgets.warn">
      <t>&lt;static&gt; gadgets.warn(message)</t>
      <t>Description: Log a warning message.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>Object</c>
       <c>The message to log</c>
      </texttable></t>
     </section>
     <section title="error"
              anchor="gadgets.error">
      <t>&lt;static&gt; gadgets.error(message)</t>
      <t>Description: Log an error message.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>Object</c>
       <c>The message to log</c>
      </texttable></t>
     </section>
     <section title="setLogLevel"
              anchor="gadgets.setLogLevel">
      <t>&lt;static&gt; gadgets.setLogLevel(logLevel)</t>
      <t>Description: Sets the log level threshold.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>logLevel</c>
       <c>Number</c>
       <c>New log level threshold.</c>
      </texttable></t>
     </section>
    </section>
    <section title="gadgets.log"
             anchor="gadgets.log">
     <t>Used by 
     <xref target="gadgets.setLogLevel">gadgets.setLogLevel</xref>.</t>
     <list style="hanging">
     <t hangText="INFO"
              anchor="gadgets.log.INFO">
      Log level for informational logging.</t>
     <t hangText="WARN"
              anchor="gadgets.log.WARN">
      Log level for warning logging.</t>
     <t hangText="ERROR"
              anchor="gadgets.log.ERROR">
      Log level for error logging.</t>
     <t hangText="NONE"
              anchor="gadgets.log.NONE">
      Log level for no logging.</t>
    </list>
    </section>
   </section>

   <section title="gadgets.io"
            anchor="gadgets.io">
    <!-- ============================== class summary ========================== -->
    <t>Provides remote content retrieval functions.</t>
    <section title="Method Details">
     <section title="encodeValues"
              anchor="gadgets.io.encodeValues">
      <t>&lt;static&gt; Type: {String} gadgets.io.encodeValues(fields)</t>
      <t>Description: Converts an input object into a URL-encoded data string.
      (key=value&amp;...)</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>fields</c>
       <c>Object</c>
       <c>The post fields you wish to encode</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The processed post data; this includes a trailing ampersand
       (&amp;)</c>
      </texttable></t>
     </section>
     <section title="getProxyUrl"
              anchor="gadgets.io.getProxyUrl">
      <t>&lt;static&gt; Type: {String} gadgets.io.getProxyUrl(url,
      opt_params)</t>
      <t>Description: Gets the proxy version of the passed-in URL.</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>url</c>
       <c>String</c>
       <c>The URL to get the proxy URL for</c>
       <c>opt_params</c>
       <c>Map&lt;String|String&gt;</c>
       <c>Additional optional
       <xref target="gadgets.io.ProxyUrlRequestParameters">parameters</xref> to
       pass to the request</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The proxied version of the URL</c>
      </texttable></t>
     </section>
     <section title="makeRequest"
              anchor="gadgets.io.makeRequest">
      <t>&lt;static&gt; gadgets.io.makeRequest(url, callback, opt_params)</t>
      <t>Description: Fetches content from the provided URL and feeds that
      content into the callback function. 
      <figure>
       <preamble>Example:</preamble>
       <artwork xml:space="preserve">
var params = {};
params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
gadgets.io.makeRequest(url, callback, params);
</artwork>
      </figure></t>
      <section title="Signed authorization">
        <t>If opt_params[gadgets.io.RequestParameters.AUTHORIZATION] is set to
      gadgets.io.AuthorizationType.SIGNED, the container needs to vouch for the
      user's identity to the destination server. The container does this by
      doing the following:</t> 
      <list style="numbers">
       <t>Removing any request parameters with names that begin with oauth,
       xoauth, or opensocial (case insensitive).</t>
       <t>Adding the following parameters to the request query string:</t>
       <list style="hanging">
        <t hangText="opensocial_viewer_id">Optional. The ID of the current
        viewer, which matches the getId() value on the viewer person
        object.</t>
        <t hangText="opensocial_owner_id">Required. The ID of the current
        owner, which matches the getId() value on the owner person object.</t>
        <t hangText="opensocial_app_url">Required. The URL of the application
        making the request. Containers may alias multiple application URLs to a
        single canonical application URL in the case where an application
        changes URLs.</t>
        <t hangText="opensocial_instance_id">Optional. An opaque identifier
        used to distinguish between multiple instances of the same application
        in a single container. If a container does not allow multiple instances
        of the same application to coexist, this parameter may be omitted. The
        combination of opensocial_app_url and opensocial_instance_id uniquely
        identify an instance of an application in a container.</t>
        <t hangText="opensocial_app_id">Optional. An opaque identifier for the
        application, unique to a particular container. Containers that wish to
        maintain backwards compatibility with the opensocial-0.7 specification
        may include this parameter.</t>
        <t hangText="xoauth_public_key">Optional. An opaque identifier for the
        public key used to sign the request. This parameter may be omitted by
        containers that do not use public keys to sign requests, or if the
        container arranges other means of key distribution with the target of
        the request.</t>
       </list>
       <t>Signing the resulting request according to section 9 of the 
       <eref target="http://oauth.net/core/1.0/#signing_process">OAuth
       specification</eref>.</t>
      </list></section>
      <section title="Key management">
       <t>If a container uses public keys to sign requests, the container may
       choose to use either self-signed certificates or certificates signed by
       a well-known certificate authority. If a container does not distribute
       its OAuth signing key over HTTPS, it should use a certificate signed by
       a well-known certificate authority.</t>
       <t>The commonName attribute of the certificate should match the hostname
       of the container server, and should also match the value of the
       oauth_consumer_key parameter specified in the request.</t>
       <t>The container should make its public key available for download at a
       well-known location. The location
       https://[container-hostname]/opensocial/certificates/xoauth_public_keyvalue
       is recommended.</t>
       <t>Recipients of signed requests must verify that the signature on the
       request is correct, and that the timestamp on the request is within a
       reasonable time window. A time window of 5 minutes before and after the
       current time is recommended.</t>
       <t>Recipients of signed requests may use the oauth_consumer_key and
       xoauth_public_key parameters to automatically detect when a container
       deploys new certificates. If the container deploys certificates at a
       well-known location, the recipient may automatically download the new
       certificate. Recipients that automatically download new certificates
       should cache the resulting certificates.</t>
       <t>If a container's certificate is not downloaded from
       https://[container-hostname], the recipient should verify that the
       certificate is signed by a well-known certificate authority before
       trusting the certificate.</t>
      </section>
      <section title="OAuth authorization">
       <t>If opt_params[gadgets.io.RequestParameters.AUTHORIZATION] is set to
       gadgets.io.AuthorizationType.OAUTH, the container needs to use OAuth to
       gain access to the resource specified in the request. This may require
       that the gadget obtain the user's content by directing the user to the
       service provider to gain access.</t>
      </section>
      <section title="Additional parameters">
       <t>The following additional parameters may be specified in opt_params: 
       <list style="hanging">
        <t hangText="gadgets.io.RequestParameters.OAUTH_SERVICE_NAME">The
        nickname the gadget uses to refer to the OAuth &lt;Service&gt; element
        from its XML spec. If unspecified, defaults to "".</t>
        <t hangText="gadgets.io.RequestParameters.OAUTH_TOKEN_NAME">The
        nickname the gadget uses to refer to an OAuth token granting access to
        a particular resources. If unspecified, defaults to "". Gadgets can use
        multiple token names if they have access to multiple resources from the
        same service provider. For example, a gadget with access to a contact
        list and a calendar might use a token name of "contacts" to use the
        contact list token, and a contact list of "calendar" to use the
        calendar token.</t>
        <t hangText="gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN">A
        service provider may be able to automatically provision a gadget with a
        request token that is preapproved for access to a resource. The gadget
        can use that token with the OAUTH_REQUEST_TOKEN parameter. This
        parameter is optional.</t>
        <t hangText="gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN_SECRET">
        The secret corresponding to a preapproved request token. This parameter
        is optional.</t>
       </list></t>
       <t>If OAuth is used, the container should execute the OAuth protocol on
       behalf of the gadget. If the gadget has not registered a consumer key
       for use with this service provider, the container may choose to use a
       default RSA signing key corresponding to a well-known certificate to
       sign requests. If the container uses a default consumer key, it will
       include an additional OAuth parameter xoauth_app_url that identifies the
       gadget making the request.</t>
      </section>
      <section title="The callback parameter">
       <t>The makeRequest() callback parameter is passed a javascript object
       with several OAuth-specific fields in addition to the normal values
       returned by makeRequest(): 
       <list style="hanging">
        <t hangText='"oauthApprovalUrl"'>If this value is specified, the user
        needs to visit an external page to approve the gadget's request to
        access data. Use of a pop-up window to direct the user to the external
        page is recommended. Once the user has approved access, the gadget can
        repeat the makeRequest call to retrieve the data.</t>
        <t hangText='"oauthError"'>If this value is specified, it indicates an
        OAuth-related error occurred. The value will be one of a set of string
        constants that can be used for programmatically detecting errors. The
        constants are undefined for opensocial-0.8, but implementers should
        attempt to agree on a set of useful constant values for standardization
        in opensocial-0.9.</t>
        <t hangText='"oauthErrorText"'>If this value is specified, it indicates
        an OAuth-related error occurred. The value is free-form text that can
        be used to provide debugging information for gadget developers.</t>
       </list></t>
      </section>
      <section title="Parameters">
       <t>
        <texttable align="left">
         <ttcol>Name</ttcol>
         <ttcol>Type</ttcol>
         <ttcol>Description</ttcol>
         <c>url</c>
         <c>String</c>
         <c>The URL where the content is located</c>
         <c>callback</c>
         <c>Function</c>
         <c>The function to call with the data from the URL once it is fetched.
         The callback function will not be called until after the existing
         callstack has completed execution.</c>
         <c>opt_params</c>
         <c>Map.&lt;gadgets.io.RequestParameters|Object&gt;</c>
         <c>Additional 
         <xref target="gadgets.io.RequestParameters">request
         parameters</xref> or 
         <xref target="gadgets.io.ProxyUrlRequestParameters">proxy request
         parameters</xref> </c>
        </texttable>
       </t>
      </section>
     </section>
    </section>
   </section>
   <section title="gadgets.io.AuthorizationType"
            anchor="gadgets.io.AuthorizationType">
    <!-- ============================== class summary ========================== -->
    <t>Used by 
    <xref target="gadgets.io.RequestParameters">RequestParameters</xref>.</t>
    <list style="hanging"> 
     <t hangText="NONE"
              anchor="gadgets.io.AuthorizationType.NONE">
      No authorization. This field may be used interchangeably
      with the string 'NONE'.</t>
     <t hangText="OAUTH"
              anchor="gadgets.io.AuthorizationType.OAUTH">
     The container will use OAuth for authentication. This
      field may be used interchangeably with the string 'OAUTH'.</t>
     <t hangText="SIGNED"
              anchor="gadgets.io.AuthorizationType.SIGNED">
     The request will be signed by the container. This field
      may be used interchangeably with the string 'SIGNED'.</t>
    </list>
   </section>
   <section title="gadgets.io.ContentType"
            anchor="gadgets.io.ContentType">
    <!-- ============================== class summary ========================== -->
    <t>Used by 
    <xref target="gadgets.io.RequestParameters">RequestParameters</xref>.</t>
    <list style="hanging">
     <t hangText="DOM"
              anchor="gadgets.io.ContentType.DOM">
      Returns a DOM object; used for fetching XML. This field
      may be used interchangeably with the string 'DOM'.</t>
     <t hangText="FEED"
              anchor="gadgets.io.ContentType.FEED">
      Returns a JSON representation of an RSS or Atom feed.
      This field may be used interchangeably with the string 'FEED'.</t>
     <t hangText="JSON"
              anchor="gadgets.io.ContentType.JSON">
      Returns a JSON object. This field may be used
      interchangeably with the string 'JSON'.</t>
     <t hangText="TEXT"
              anchor="gadgets.io.ContentType.TEXT">
      Returns text; used for fetching HTML. This field may be
      used interchangeably with the string 'TEXT'.</t>
    </list>
   </section>
   <section title="gadgets.io.MethodType"
            anchor="gadgets.io.MethodType">
    <!-- ============================== class summary ========================== -->
    <t>Defines values for 
    <xref target="gadgets.io.RequestParameters.METHOD">
    RequestParameters.METHOD</xref>.</t>
    <list style="hanging">
     <t hangText="DELETE"
              anchor="gadgets.io.MethodType.DELETE">
      Container support for this method type is OPTIONAL. This
      field may be used interchangeably with the string 'DELETE'.</t>
     <t hangText="GET"
              anchor="gadgets.io.MethodType.GET">
      The default type. This field may be used interchangeably
      with the string 'GET'.</t>
     <t hangText="HEAD"
              anchor="gadgets.io.MethodType.HEAD">
      Container support for this method type is OPTIONAL. This
      field may be used interchangeably with the string 'HEAD'.</t>
     <t hangText="POST"
              anchor="gadgets.io.MethodType.POST">
      Container support for this method type is OPTIONAL. This
      field may be used interchangeably with the string 'POST'.</t>
     <t hangText="PUT"
              anchor="gadgets.io.MethodType.PUT">
      Container support for this method type is OPTIONAL. This
      field may be used interchangeably with the string 'PUT'.</t>
    </list>
   </section>
   <section title="gadgets.io.ProxyUrlRequestParameters"
            anchor="gadgets.io.ProxyUrlRequestParameters">
    <!-- ============================== class summary ========================== -->
    <t>Used by 
    <xref target="gadgets.io.getProxyUrl">
    gadgets.io.getProxyUrl()</xref> method.</t>
    <list style="hanging">
     <t hangText="REFRESH_INTERVAL"
              anchor="gadgets.io.ProxyUrlRequestParameters.REFRESH_INTERVAL">
      Explicitly sets the lifespan of cached content. The
      Refresh Interval is the number of seconds the container should cache the
      given response. By default, the HTTP caching headers will be respected
      for fetched content. If the refresh interval is set, this value will take
      precedence over any HTTP cache headers. If this value is not set and
      there are no HTTP caching headers specified, this value will default to
      3600 (one hour). Note that Signed requests and objects with POST_DATA
      present will generally not be cached. This field may be used
      interchangeably with the string 'REFRESH_INTERVAL'.</t>
    </list>
   </section>
   <section title="gadgets.io.RequestParameters"
            anchor="gadgets.io.RequestParameters">
    <!-- ============================== class summary ========================== -->
    <t>Used by the
    <xref target="gadgets.io.makeRequest">
    gadgets.io.makeRequest()</xref> method.</t>
    <list style="hanging">
     <t hangText="AUTHORIZATION"
              anchor="gadgets.io.RequestParameters.AUTHORIZATION">
      The type of authentication to use when fetching the
      content; defaults to AuthorizationType.NONE. Specified as an
      <xref target="gadgets.io.AuthorizationType">AuthorizationType</xref>.
      This field may be used interchangeably with the string
      'AUTHORIZATION'.</t>
     <t hangText="CONTENT_TYPE"
              anchor="gadgets.io.RequestParameters.CONTENT_TYPE">
      The type of content that lives at the URL; defaults to
      ContentType.TEXT. Specified as a
      <xref target="gadgets.io.ContentType">ContentType</xref>. This field may
      be used interchangeably with the string 'CONTENT_TYPE'.</t>
     <t hangText="GET_SUMMARIES"
              anchor="gadgets.io.RequestParameters.GET_SUMMARIES">
      If the content is a feed, whether to fetch summaries for
      that feed; defaults to false. Specified as a Boolean. This field may be
      used interchangeably with the string 'GET_SUMMARIES'.</t>
     <t hangText="HEADERS"
              anchor="gadgets.io.RequestParameters.HEADERS">
      The HTTP headers to send to the URL; defaults to null.
      Specified as a Map.&lt;String,String&gt;. This field may be used
      interchangeably with the string 'HEADERS'.</t>
     <t hangText="METHOD"
              anchor="gadgets.io.RequestParameters.METHOD">
      The method to use when fetching content from the URL;
      defaults to 
      <xref target="gadgets.io.MethodType.GET">MethodType.GET</xref>. Valid
      values are specified by
      <xref target="gadgets.io.MethodType">MethodType</xref>. This field may be
      used interchangeably with the string 'METHOD'.</t>
     <t hangText="NUM_ENTRIES"
              anchor="gadgets.io.RequestParameters.NUM_ENTRIES">
      If the content is a feed, the number of entries to fetch;
      defaults to 3. Specified as a Number. This field may be used
      interchangeably with the string 'NUM_ENTRIES'.</t>
     <t hangText="POST_DATA"
              anchor="gadgets.io.RequestParameters.POST_DATA">
      The data to send to the URL using the POST method;
      defaults to null. Specified as a String. This field may be used
      interchangeably with the string 'POST_DATA'.</t>
     <t hangText="REFRESH_INTERVAL"
              anchor="gadgets.io.RequestParameters.REFRESH_INTERVAL">
      Explicitly sets the lifespan of cached content. The
      Refresh Interval is the number of seconds the container should cache the
      given response. By default, the HTTP caching headers will be respected
      for fetched content. If the refresh interval is set, this value will take
      precedence over any HTTP cache headers. If this value is not set and
      there are no HTTP caching headers specified, this value will default to
      3600 (one hour). Note that Signed requests and objects with POST_DATA
      present will generally not be cached. This field may be used
      interchangeably with the string 'REFRESH_INTERVAL'.</t>
     <t hangText="SIGN_OWNER"
              anchor="gadgets.io.RequestParameters.SIGN_OWNER">
      Indicates that the container should include the owner ID when signing the request. Specified as a Boolean. This field may be used interchangeably with the string 'SIGN_OWNER'.</t>
     <t hangText="SIGN_VIEWER"
              anchor="gadgets.io.RequestParameters.SIGN_VIEWER">
      Indicates that the container should include the viewer ID when signing the request. Specified as a Boolean. This field may be used interchangeably with the string 'SIGN_VIEWER'.</t>
    </list>
   </section>
   <section title="gadgets.json"
            anchor="gadgets.json">
    <!-- ============================== class summary ========================== -->
    <t>Provides operations for translating objects to and from JSON.</t>
    <section title="Method Details">
     <section title="parse"
              anchor="gadgets.json.parse">
      <t>&lt;static&gt; Type: {Object} gadgets.json.parse(text)</t>
      <t>Description: Parses a JSON string, producing a JavaScript value.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>text</c>
       <c>String</c>
       <c>The string to transform into an object; usually the result of a
       previous stringify call</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Object</c>
       <c>The object parsed from the passed in text; false if an error
       occurred</c>
      </texttable></t>
     </section>
     <section title="stringify"
              anchor="gadgets.json.stringify">
      <t>&lt;static&gt; Type: {String} gadgets.json.stringify(v)</t>
      <t>Description: Converts a JavaScript value to a JSON string.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>v</c>
       <c>Object</c>
       <c>The object to convert</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The JSON equivalent</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.Prefs"
            anchor="gadgets.Prefs">
    <!-- ============================== class summary ========================== -->
    <t>Provides access to user preferences, module dimensions, and messages.
    Clients can access their preferences by constructing an instance of
    gadgets.Prefs and passing in their module ID. Example: 
    <figure>
     <artwork xml:space="preserve">
var prefs = new gadgets.Prefs();
var name = prefs.getString("name");
var lang = prefs.getLang();
</artwork>
    </figure></t>
    <!-- ============================== constructor details ==================== -->
    <section title="Constructor"
             anchor="gadgets.Prefs.ctor">
     <t>gadgets.Prefs(opt_moduleId)</t>
     <t>Creates a new Prefs object.</t>
     <t>Parameters:
     <texttable align="left">
      <ttcol>Name</ttcol>
      <ttcol>Type</ttcol>
      <ttcol>Description</ttcol>
      <c>opt_moduleId</c>
      <c>String | Number</c>
      <c>An optional parameter specifying the module ID to create prefs for; if
      not provided, the default module ID is used</c>
     </texttable></t>
    </section>
    <section title="Method Details">
     <section title="getArray"
              anchor="gadgets.Prefs.getArray">
      <t>Type: {Array.&lt;String&gt;} getArray(key)</t>
      <t>Description: Retrieves a preference as an array. UserPref values that
      were not declared as lists are treated as one-element arrays.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The preference to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Array.&lt;String&gt;</c>
       <c>The preference; if not set, an empty array</c>
      </texttable></t>
     </section>
     <section title="getBool"
              anchor="gadgets.Prefs.getBool">
      <t>Type: {Boolean} getBool(key)</t>
      <t>Description: Retrieves a preference as a boolean.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The preference to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Boolean</c>
       <c>The preference; if not set, false</c>
      </texttable></t>
     </section>
     <section title="getCountry"
              anchor="gadgets.Prefs.getCountry">
      <t>Type: {String} getCountry()</t>
      <t>Description: Gets the current country, returned as ISO 3166-1 alpha-2
      code.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The country for this module instance</c>
      </texttable></t>
     </section>
     <section title="getFloat"
              anchor="gadgets.Prefs.getFloat">
      <t>Type: {Number} getFloat(key)</t>
      <t>Description: Retrieves a preference as a floating-point value.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The preference to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Number</c>
       <c>The preference; if not set, 0</c>
      </texttable></t>
     </section>
     <section title="getInt"
              anchor="gadgets.Prefs.getInt">
      <t>Type: {Number} getInt(key)</t>
      <t>Description: Retrieves a preference as an integer.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The preference to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Number</c>
       <c>The preference; if not set, 0</c>
      </texttable></t>
     </section>
     <section title="getLang"
              anchor="gadgets.Prefs.getLang">
      <t>Type: {String} getLang()</t>
      <t>Description: Gets the current language the gadget should use when
      rendering, returned as a ISO 639-1 language code.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The language for this module instance</c>
      </texttable></t>
     </section>
     <section title="getModuleId"
              anchor="gadgets.Prefs.getModuleId">
      <t>Type: {String | Number} getModuleId()</t>
      <t>Description: Gets the module ID for the current instance.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String | Number</c>
       <c>The module ID for this module instance</c>
      </texttable></t>
     </section>
     <section title="getMsg"
              anchor="gadgets.Prefs.getMsg">
      <t>Type: {String} getMsg(key)</t>
      <t>Description: Fetches an unformatted message.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The message to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The message</c>
      </texttable></t>
     </section>
     <section title="getString"
              anchor="gadgets.Prefs.getString">
      <t>Type: {String} getString(key)</t>
      <t>Description: Retrieves a preference as a string.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The preference to fetch</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The preference; if not set, an empty string</c>
      </texttable></t>
     </section>
     <section title="set"
              anchor="gadgets.Prefs.set">
      <t>set(key, val)</t>
      <t>Description: Stores a preference. To use this call, the gadget must
      require the feature setprefs. 
      <t>Note: If the gadget needs to store an Array it should use setArray
      instead of this call.</t></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The pref to store</c>
       <c>val</c>
       <c>Object</c>
       <c>The values to store</c>
      </texttable></t>
     </section>
     <section title="setArray"
              anchor="gadgets.Prefs.setArray">
      <t>setArray(key, val)</t>
      <t>Description: Stores an array preference. To use this call, the gadget
      must require the feature setprefs.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>key</c>
       <c>String</c>
       <c>The pref to store</c>
       <c>val</c>
       <c>Array</c>
       <c>The values to store</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.util"
            anchor="gadgets.util">
    <!-- ============================== class summary ========================== -->
    <t>Provides general-purpose utility functions.</t>
    <section title="Method Details">
     <section title="escapeString"
              anchor="gadgets.util.escapeString">
      <t>&lt;static&gt; Type: {String} gadgets.util.escapeString(str)</t>
      <t>Description: Escapes the input using HTML entities to make it safer.
      The following characters are affected: 
      <list style="symbols">
       <t>newline (\n, Unicode code point 10)</t>
       <t>carriage return (\r, Unicode 13)</t>
       <t>double quote (", Unicode 34)</t>
       <t>ampersand (&amp;, Unicode 38)</t>
       <t>single quote (', Unicode 39)</t>
       <t>left angle bracket (&lt;, Unicode 60)</t>
       <t>right angle bracket (&gt;, Unicode 62)</t>
       <t>backslash (\, Unicode 92)</t>
       <t>line separator (Unicode 8232)</t>
       <t>paragraph separator (Unicode 8233)</t>
      </list></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>str</c>
       <c>String</c>
       <c>The string to escape</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The escaped string</c>
      </texttable></t>
     </section>
     <section title="getFeatureParameters"
              anchor="gadgets.util.getFeatureParameters">
      <t>&lt;static&gt; Type: {Object}
      gadgets.util.getFeatureParameters(feature)</t>
      <t>Description: Returns the value of parameters for this feature. A
      gadget specifies parameters using the &lt;Param&gt; subelement of the
      &lt;Requires&gt; or &lt;Optional&gt; element.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>feature</c>
       <c>String</c>
       <c>The feature to get parameters for</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Object</c>
       <c>The parameters for the given feature, or null</c>
      </texttable></t>
     </section>
     <section title="hasFeature"
              anchor="gadgets.util.hasFeature">
      <t>&lt;static&gt; Type: {Boolean} gadgets.util.hasFeature(feature)</t>
      <t>Description: Returns whether the specified feature is supported.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>feature</c>
       <c>String</c>
       <c>The feature to test for</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Boolean</c>
       <c>True if the feature is supported</c>
      </texttable></t>
     </section>
     <section title="registerOnLoadHandler"
              anchor="gadgets.util.registerOnLoadHandler">
      <t>&lt;static&gt; gadgets.util.registerOnLoadHandler(callback)</t>
      <t>Description: Registers an onload handler; a function that's executed
      when the gadget loads. Multiple handlers can be registered, and all will
      be invoked in the same order that they were registered.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>callback</c>
       <c>Function</c>
       <c>The handler to run. The callback function will not be called until
       after the existing callstack has completed execution.</c>
      </texttable></t>
     </section>
     <section title="sanitizeHtml"
              anchor="gadgets.util.sanitizeHtml">
      <t>&lt;static&gt; Type: {String} gadgets.util.sanitizeHtml(text)</t>
      <t>Description: Sanitizes a text string. The returned value is safe to
      assign to innerHTML. The returned value may include HTML tags. If plain
      text is desired, use gadgets.util.escapeString instead.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>text</c>
       <c>String</c>
       <c>arbitrary text string</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>a sanitized version that may include HTML tags, but will not execute
       script.</c>
      </texttable></t>
     </section>
     <section title="unescapeString"
              anchor="gadgets.util.unescapeString">
      <t>&lt;static&gt; Type: {String} gadgets.util.unescapeString(str)</t>
      <t>Description: Reverses escapeString</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>str</c>
       <c>String</c>
       <c>The string to unescape.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The unescaped string</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.views"
            anchor="gadgets.views">
    <!-- ============================== class summary ========================== -->
    <t>Provides operations for dealing with views.
    <t>See also: 
    <xref target="gadgets.views.View">gadgets.views.View</xref> </t></t>
    <section title="Method Details">
     <section title="bind"
              anchor="gadgets.views.bind">
      <t>&lt;static&gt; Type: {String} gadgets.views.bind(urlTemplate,
      environment)</t>
      <t>Description: Binds a URL template with variables in the passed
      environment to produce a URL string.
      <t>See also: 
      <xref target="gadgets.views.View.getUrlTemplate">
      View.getUrlTemplate()</xref> </t></t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>urlTemplate</c>
       <c></c>
       <c>A url template for a container view</c>
       <c>environment</c>
       <c></c>
       <c>A set of named variables (for example, [OWNER | PATH | PARAMS |
       NAME]) of type string.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>A URL string</c>
      </texttable></t>
     </section>
     <section title="getCurrentView"
              anchor="gadgets.views.getCurrentView">
      <t>&lt;static&gt; Type: {
      <xref target="gadgets.views.View">gadgets.views.View</xref> }
      gadgets.views.getCurrentView()</t>
      <t>Description: Returns the current view.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>
        <xref target="gadgets.views.View">gadgets.views.View</xref>
       </c>
       <c>The current view</c>
      </texttable></t>
     </section>
     <section title="getParams"
              anchor="gadgets.views.getParams">
      <t>&lt;static&gt; Type: {Map.&lt;String|String&gt;}
      gadgets.views.getParams()</t>
      <t>Description: Returns the parameters passed into this gadget for this
      view. Does not include all URL parameters, only the ones passed into
      gadgets.views.requestNavigateTo.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Map.&lt;String|String&gt;</c>
       <c>The parameter map</c>
      </texttable></t>
     </section>
     <section title="getSupportedViews"
              anchor="gadgets.views.getSupportedViews">
      <t>&lt;static&gt; Type: {Map&lt;gadgets.views.ViewType |
      String|gadgets.views.View&gt;} gadgets.views.getSupportedViews()</t>
      <t>Description: Returns a map of all the supported views. Keys each
      gadgets.view.View by its name. This function only returns the primary
      views and does not return any secondary views. Example: if the markup
      indicates a set of views named Canvas.About, Profile.About, Home.About,
      Canvas.Help the returned views will only be Canvas, Profile, Home.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Map&lt;gadgets.views.ViewType | String|gadgets.views.View&gt;</c>
       <c>All supported views, keyed by their name attribute.</c>
      </texttable></t>
     </section>
     <section title="requestNavigateTo"
              anchor="gadgets.views.requestNavigateTo">
      <t>&lt;static&gt; gadgets.views.requestNavigateTo(|, |, opt_ownerId)</t>
      <t>Description: Attempts to navigate to this gadget in a different view.
      If the container supports parameter passing it will pass the optional
      parameters along to the gadget in the new view. This also allows for
      navigation to named views on the current surface. Views are composed of
      names that are [Surface](.[Secondary])?. The canonical Surface names are
      Canvas, Profile, Home. The Secondary names are user defined. When
      navigating from [Surface].valueX to [Surface].valueY, the container can
      stay on the same Surface but will show the appropriate &lt;Content&gt;
      sections whose View is [Surface].valueY. When navigating from
      SurfaceA.[Secondary] to SurfaceB.[Secondary], the container will switch
      to the SurfaceB surface and show the appropriate &lt;Content&gt; sections
      whose View is SurfaceB.[Secondary].In no cases must the .[Secondary] item
      ever be declared.</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>|</c>
       <c>gadgets.views.View</c>
       <c>{string} view If set to a string, the name of the view to navigate
       to. If set to a View, the View object to navigate to. Passing a View has
       been deprecated.</c>
       <c>|</c>
       <c>Map.&lt;String|String&gt;</c>
       <c>{string} opt_params If the value is an object, it represents
       parameters to pass to the gadget after it has been navigated to on the
       surface. If the view navigated to contains an href and opt_params is a
       string, the value in opt_params is treated as a relative path that must
       be resolved relative to the href of the referenced view according to RFC
       3986. If opt_params is a string all query parameters including query
       parameters encoded in a fragment are available in the receiving view
       using gadgets.views.getParams()</c>
       <c>opt_ownerId</c>
       <c>String</c>
       <c>The ID of the owner of the page to navigate to; defaults to the
       current owner</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.views.View"
            anchor="gadgets.views.View">
    <!-- ============================== class summary ========================== -->
    <t>Base interface for all view objects.</t>
    <section title="Method Details">
     <section title="bind"
              anchor="gadgets.views.View.bind">
      <t>Type: {String} bind(environment)</t>
      <t>Description: Binds the view's URL template with variables in the
      passed environment to produce a URL string.
      <t>See also: 
      <xref target="gadgets.views.View.getUrlTemplate">
      getUrlTemplate()</xref> </t></t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>environment</c>
       <c></c>
       <c>A set of named variables (for example, [OWNER | PATH | PARAMS |
       NAME]) of type string.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>A URL string</c>
      </texttable></t>
     </section>
     <section title="getName"
              anchor="gadgets.views.View.getName">
      <t>Type: {
      <xref target="gadgets.views.ViewType">gadgets.views.ViewType</xref> |
      String} getName()</t>
      <t>Description: Returns the name of this view.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>
       <xref target="gadgets.views.ViewType">gadgets.views.ViewType</xref> |
       String</c>
       <c>The view name, usually specified as a gadgets.views.ViewType</c>
      </texttable></t>
     </section>
     <section title="getUrlTemplate"
              anchor="gadgets.views.View.getUrlTemplate">
      <t>Type: {String} getUrlTemplate()</t>
      <t>Description: Returns a string URI template conforming to the 
      <eref target="http://bitworking.org/projects/URI-Templates/spec/draft-gregorio-uritemplate-03">
      IETF spec draft</eref> with variables for substitution.
      <t>Four variables are supported:</t>
      <list style="hanging">
      <t hangText="name">The name or ID of the application</t>
      <t hangText="owner">The ID of the owner of the page</t>
      <t hangText="path">An array of path steps</t>` 
      <t hangText="params">Associative array or
      array[param1,value1,param2,value2,...]</t></list>Example 
      <figure>
       <preamble>Here are two valid URL template strings:</preamble>
       <artwork xml:space="preserve">
http://container.com/{-list|/|name,owner,path}?{-join|&amp;|params}
http://container.com/apps/{name}/{owner}{-prefix|/|path}{-opt|?os_|params}{-join|&amp;os_|params}
</artwork>
      </figure>
      <t>Here are some parameters:</t>
      <figure>
       <artwork xml:space="preserve">
{
    name : 'Wilma',
    owner : 'Betty',
    path : ['dino','car'],
    params : { a : 'Barney', b : 'Fred'}          
}
</artwork>
      </figure>
      <t>With those parameters, the two example URL template strings resolve to
      the following URLs:</t>
      <figure>
       <artwork xml:space="preserve">
http://container.com/Wilma/Betty/dino/car?a=Barney&amp;b=Fred
http://container.com/apps/Wilma/Betty/dino/car?os_a=Barney&amp;os_b=Fred
</artwork>
      </figure>
      <t>See also: 
      <xref target="gadgets.views.View.bind">bind()</xref> </t></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>A template that can be used to construct URLs that navigate to this
       view</c>
      </texttable></t>
     </section>
     <section title="isOnlyVisibleGadget"
              anchor="gadgets.views.View.isOnlyVisibleGadget">
      <t>Type: {boolean} isOnlyVisibleGadget()</t>
      <t>Description: Returns true if the gadget is the only visible gadget in
      this view. On a canvas page or in maximize mode this is most likely true;
      on a profile page or in dashboard mode, it is most likely false.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>boolean</c>
       <c>True if the gadget is the only visible gadget; otherwise, false</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.views.ViewType"
            anchor="gadgets.views.ViewType">
    <!-- ============================== class summary ========================== -->
    <t>Used by 
    <xref target="gadgets.views.View">View objects</xref>.</t>
      <list style="hanging">
     <t hangText="CANVAS"
              anchor="gadgets.views.ViewType.CANVAS">
      A view where the gadget is displayed in a very large
      mode. It is typically the main content on the page. The viewer is not
      always the same as the owner. This field may be used interchangeably with
      the string 'CANVAS'.</t>
     <t hangText="HOME"
              anchor="gadgets.views.ViewType.HOME">
      A view where the gadget is displayed in a small area
      usually on a page with other gadgets. Typically the viewer is the same as
      the owner. This field may be used interchangeably with the string
      'HOME'.</t>
     <t hangText="PREVIEW"
              anchor="gadgets.views.ViewType.PREVIEW">
      A demo view of the gadget. In this view the owner and
      viewer are not known. This field may be used interchangeably with the
      string 'PREVIEW'.</t>
     <t hangText="PROFILE"
              anchor="gadgets.views.ViewType.PROFILE">
      A view where the gadget is displayed in a small area
      usually on a page with other gadgets. The viewer is not always the same
      as the owner. This field may be used interchangeably with the string
      'PROFILE'.</t>
    </list>
   </section>
  </section>
  <section title="Data Pipelining" anchor="DataPipelining">
   <t>Data Pipelining is a declarative syntax for defining the data a gadget requires from the container. The
   &lt;os:DataRequest&gt; element provides access to OpenSocial data, and the
   &lt;os:HttpRequest&gt; element provides access to content from any HTTP
   endpoint.</t>
   <t>The data that is retrieved will be available in three contexts: 
   <list style="numbers">
    <t>Proxied content requests. This data will be POSTed to the developer
    party server with requests for proxied content.</t>
    <t>OpenSocial Templates. The data will be available as named variables in
    OpenSocial templates.</t>
    <t>JavaScript. This data will be available in the JavaScript API.</t>
   </list>Developers will insert the following &lt;os:*&gt; namespaced tags
   within a &lt;Content&gt; block to specify what data should be provided to
   the gadget.</t>
   <t>RESTful call equivalents: 
   <list style="numbers">
    <t>&lt;os:DataRequest&gt; - request to OpenSocial data, including person
    data, activity data, and any container-specific endpoints</t>
    <t>&lt;os:HttpRequest&gt;, equivalent to gadgets.io.makeRequest 
    <list style="symbols">
     <t>This is a call to an arbitrary URL.</t>
    </list></t>
   </list>
   <figure>
    <artwork xml:space="preserve">
  
&lt;Content type="html"&gt;&lt;![CDATA[
  &lt;script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data"&gt;
    &lt;os:DataRequest key="vwr" method="people.get" userId="@viewer" fields="name,birthday"/&gt;
    &lt;os:HttpRequest key="mydata" href="http://example.com/api"/&gt;
  &lt;/script&gt;
  ... HTML content here ...
]]&gt;&lt;/Content&gt;
</artwork>
   </figure>Note that we only have equivalents for REST calls that get data -
   calls that update data cannot be safely used in Data Pipelining.</t>
   <t>Data Pipelining creates a new feature name for use in the Gadget
   Specification: opensocial-data. When data pipelining elements are embedded
   in type=@html, the Module must contain this XML: 
   <figure>
    <artwork xml:space="preserve">
&lt;ModulePrefs&gt;
 &lt;Require feature="opensocial-data"/&gt;
&lt;/ModulePrefs&gt;
</artwork>
   </figure></t>
   <section title="Common request processing">
   <t>All XML tags MUST have an @key string attribute. This is used to identify
   the data in the response back.</t>
   <t>Calls with corresponding REST APIs have a 1:1 mapping between the XML
   attributes and the RESTful API parameters. See the OpenSocial RESTful
   Protocol for an overview of the REST calls.</t>
  </section>
   <section title="Tag: &lt;os:DataRequest&gt;"
           anchor="DataRequest">
   <t>Request to get OpenSocial data, including person data, activity data, and
   any container-specific endpoints.</t>
   <t>Attributes 
   <list style="symbols">
    <t>@key {string}</t>
    <t>@method {string} The name of the REST endpoint and operation called.
    Implementations MUST support "people.get" and "activities.get", and MUST
    NOT support ".update", ".create", or ".delete" operations.</t>
    <t>All other attributes will be passed as string parameters to the
    endpoint. See the OpenSocial RESTful protocol for information on the
    parameters available for each endpoint.</t>
   </list>Returns 
   <list style="symbols">
    <t>JSON object (typically, an array) representing the results of invoking
    the endpoint.</t>
   </list>
   <figure>
    <preamble>Example:</preamble>
    <artwork xml:space="preserve">
&lt;os:DataRequest key="PagedFriends" method="people.get" userId="@owner" groupId="@friends" startIndex="40" count="20"/&gt;
</artwork>
   </figure></t>
  </section>
   <section title="Tag: &lt;os:HttpRequest&gt;"
           anchor="HttpRequest">
   <t>Request for arbitrary URL data, equivalent to
   gadgets.io.makeRequest().</t>
   <t>This tag has additional attributes to match the functionality of 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>. Containers SHOULD
  cache the results of these requests.</t>
   <t>Attributes 
   <list style="symbols">
    <t>@key {string}</t>
    <t>@href {string} The URL to send a request to.</t>
    <t>@params {string} Additional URL parameters, of format "a=b&amp;c=d".
    Optional.</t>
    <t>@method {string} HTTP method to use, one of "get" or "post". Defaults to
    "get". Optional. 
    <list style="symbols">
     <t>If method is "post", then the "@params" parameters are sent as POST
     content with a content type of "application/x-www-form-urlencoded". If
     method is "get", then the params are appended to the URL.</t>
     <t>There is no ability to set arbitrary POST content, this just determines
     whether the key/value pair parameters are sent as a POST body.</t>
    </list></t>
    <t>@format {string} Format data is returned in for processing, values are
    "json" or "text". Defaults to "json". Optional.</t>
    <t>@refreshInterval {int} Period of time for which the container can cache
    the data. If this parameter is set, it overrides the HTTP response header
    sent back from the makeRequest(). Optional.</t>
    <t>@authz. String, one of "none", "signed", "oauth", defaults to "none".
    This tells the gadget what authorization method to use when sending data to
    the remote server.</t>
    <t>@sign_viewer {boolean} Sign the request and include the current viewer
    id. Defaults to true.</t>
    <t>@sign_owner {boolean} Sign the request and include the current owner id.
    Defaults to true.</t>
    <t>@oauth_service_name {string} Identifies the service element in the
    gadget spec to use for this request. Default is "".</t>
    <t>@oauth_token_name {string} Identifies the OAuth token used to make a
    request to the service provider. Default is "".</t>
    <t>@oauth_request_token {string}. Identify a token that is pre-approved by
    the provider for access to the resource.</t>
    <t>@oauth_request_token_secret {string}. Secret associated with the
    pre-approved request token.</t>
    <t>@oauth_use_token {string}. Control whether an OAuth token should be used
    with the request. Allowed values are: "always" | "if_available" |
    "never"</t>
   </list>
   <figure>
    <preamble>Example:</preamble>
    <artwork xml:space="preserve">
&lt;os:HttpRequest key="Pets" href="http://example.com/api" authz="signed"/&gt;
</artwork>
   </figure></t>
   <t>os:HttpRequest produces a standard JSON-RPC object with "id", "error",
   and "result" properties. The "result" object is not available for 4xx or 5xx
   responses. When available, the "result" object in turn contains: 
   <list style="symbols">
    <t>content {object} If @format is "text", the string content of the
    response. If @format is "json", the parsed JSON object or array of the
    response. If a JSON response cannot be parsed, a 406 (Not Acceptable) error
    code will be produced.</t>
    <t>headers {object} An optional object with response header names as keys,
    and the header values as per-key arrays.</t>
    <t>status {int} The HTTP status code.</t>
   </list>For errors, the "message" property MUST NOT contain the response
   body, but SHOULD contain a descriptive message describing the HTTP error.
   The error MAY contain a data block providing the content and headers. 
   <figure>
    <preamble>Examples:</preamble>
    <artwork xml:space="preserve">
// @format='text' example
{result: {
 content: 'Hi there!',
 status: 200,
 headers: {'Content-Type': ['text/plain;charset=utf-8']}
}}
// @format='json' example
{result: {
 content: {'hi': 'there!'},
 status: 200,
 headers: {'Content-Type': ['application/json;charset=utf-8']}
}}
// 404 error
{error: {
 code: 404,
 message: 'Resource not found',
 // Optional data block
 data: {
  content : {'&lt;html&gt;&lt;body&gt;File not found... '},
   headers: {'Content-Type': ['text/html; charset=iso-8859-1']}
 }
}}
// Unparseable JSON
{error: {
 message: "JSON could not be parsed",
 code: 406,
 data: {
  content: {'This isn't JSON'}
 }
}}
</artwork>
   </figure></t>
  </section>
  </section>
 </middle>
 <back>
  <section title="Gadget XML Schema"
           anchor="GadgetXmlSchema">
   <t>
    <figure>
     <artwork xml:space="preserve">
&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="Module"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="ModulePrefs" minOccurs="0"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
              &lt;xs:element name="Require" type="GadgetFeatureType"/&gt;
              &lt;xs:element name="Optional" type="GadgetFeatureType"/&gt;
              &lt;xs:element name="Preload"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:attribute name="href" type="xs:string" use="required"/&gt;
                  &lt;xs:attribute name="authz" default="none"&gt;
                    &lt;xs:simpleType&gt;
                      &lt;xs:restriction base="xs:string"&gt;
                        &lt;xs:enumeration value="none"/&gt;
                        &lt;xs:enumeration value="signed"/&gt;
                        &lt;xs:enumeration value="oauth"/&gt;
                      &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                  &lt;/xs:attribute&gt;
                  &lt;xs:attribute name="sign_owner" type="xs:boolean" default="true"/&gt;
                  &lt;xs:attribute name="sign_viewer" type="xs:boolean" default="true"/&gt;
                  &lt;xs:attribute name="views" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="oauth_service_name" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="oauth_token_name" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="oauth_request_token" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="oauth_request_token_secret" type="xs:string" use="optional"/&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
              &lt;xs:element name="Icon"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:simpleContent&gt;
                    &lt;xs:extension base="xs:string"&gt;
                      &lt;xs:attribute name="mode"&gt;
                        &lt;xs:simpleType&gt;
                          &lt;xs:restriction base="xs:string"&gt;
                            &lt;xs:enumeration value="base64"/&gt;
                          &lt;/xs:restriction&gt;
                        &lt;/xs:simpleType&gt;
                      &lt;/xs:attribute&gt;
                      &lt;xs:attribute name="type" type="xs:string"/&gt;
                    &lt;/xs:extension&gt;
                  &lt;/xs:simpleContent&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
              &lt;xs:element name="Locale"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name="msg" minOccurs="0" maxOccurs="unbounded"&gt;
                      &lt;xs:complexType&gt;
                        &lt;xs:simpleContent&gt;
                          &lt;xs:extension base="xs:string"&gt;
                            &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
                            &lt;xs:attribute name="desc" type="xs:string" use="optional"/&gt;
                          &lt;/xs:extension&gt;
                        &lt;/xs:simpleContent&gt;
                      &lt;/xs:complexType&gt;
                    &lt;/xs:element&gt;
                  &lt;/xs:sequence&gt;
                  &lt;xs:attribute name="lang" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="country" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="messages" type="xs:string" use="optional"/&gt;
                  &lt;xs:attribute name="language_direction"&gt;
                    &lt;xs:simpleType&gt;
                      &lt;xs:restriction base="xs:string"&gt;
                        &lt;xs:enumeration value="ltr"/&gt;
                        &lt;xs:enumeration value="rtl"/&gt;
                      &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                  &lt;/xs:attribute&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
              &lt;xs:element name="Link"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:attribute name="href" type="xs:string" use="required"/&gt;
                  &lt;xs:attribute name="rel" type="xs:string" use="required"&gt;
                    &lt;xs:simpleType&gt;
                      &lt;xs:restriction base="xs:string"&gt;
                        &lt;xs:enumeration value="gadgets.help"/&gt;
                        &lt;xs:enumeration value="gadgets.support"/&gt;
                        &lt;xs:enumeration value="icon"/&gt;
                      &lt;/xs:restriction&gt;
                    &lt;/xs:simpleType&gt;
                  &lt;/xs:attribute&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
              &lt;xs:element name="OAuth" minOccurs="0" maxOccurs="1"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name="Service" maxOccurs="unbounded"&gt;
                      &lt;xs:complexType&gt;
                        &lt;xs:all&gt;
                          &lt;xs:element name="Request" type="OAuthResourceType" minOccurs="0"/&gt;
                          &lt;xs:element name="Access" type="OAuthResourceType" minOccurs="0"/&gt;
                          &lt;xs:element name="Authorization" minOccurs="0"&gt;
                            &lt;xs:complexType&gt;
                              &lt;xs:attribute name="url" type="xs:string" use="required"/&gt;
                            &lt;/xs:complexType&gt;
                          &lt;/xs:element&gt;
                        &lt;/xs:all&gt;
                      &lt;/xs:complexType&gt;
                    &lt;/xs:element&gt;
                  &lt;/xs:sequence&gt;
                  &lt;xs:attribute name="name" type="xs:string" use="optional"/&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
            &lt;/xs:choice&gt;
            &lt;xs:attribute name="title" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="title_url" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="description" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="author" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="author_email" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="screenshot" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="thumbnail" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="directory_title" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="category" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="category2" type="xs:string" use="optional"/&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="UserPref" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="EnumValue" minOccurs="0" maxOccurs="unbounded"&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:attribute name="value" type="xs:string" use="required"/&gt;
                  &lt;xs:attribute name="display_value" type="xs:string" use="optional"/&gt;
                &lt;/xs:complexType&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
            &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
            &lt;xs:attribute name="display_name" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="default_value" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="required" type="xs:string" use="optional"/&gt;
            &lt;xs:attribute name="datatype" default="string"&gt;
              &lt;xs:simpleType&gt;
                &lt;xs:restriction base="xs:string"&gt;
                  &lt;xs:enumeration value="string"/&gt;
                  &lt;xs:enumeration value="hidden"/&gt;
                  &lt;xs:enumeration value="bool"/&gt;
                  &lt;xs:enumeration value="enum"/&gt;
                  &lt;xs:enumeration value="number"/&gt;
                &lt;/xs:restriction&gt;
              &lt;/xs:simpleType&gt;
            &lt;/xs:attribute&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="Content" minOccurs="1" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:simpleContent&gt;
              &lt;xs:extension base="xs:string"&gt;
                &lt;xs:attribute name="type" use="optional" default="html"&gt;
                  &lt;xs:simpleType&gt;
                    &lt;xs:restriction base="xs:string"&gt;
                      &lt;xs:enumeration value="html"/&gt;
                      &lt;xs:enumeration value="url"/&gt;
                    &lt;/xs:restriction&gt;
                  &lt;/xs:simpleType&gt;
                &lt;/xs:attribute&gt;
                &lt;xs:attribute name="href" type="xs:string" use="optional"/&gt;
                &lt;xs:attribute name="view" type="xs:string" use="optional"/&gt;
                &lt;xs:attribute name="preferred_height" type="xs:integer" use="optional"/&gt;
                &lt;xs:attribute name="preferred_width" type="xs:integer" use="optional"/&gt;
                &lt;xs:attribute name="scrolling" type="xs:boolean" use="optional"/&gt;
              &lt;/xs:extension&gt;
            &lt;/xs:simpleContent&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
  &lt;xs:complexType name="GadgetFeatureType"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="Param" minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:simpleContent&gt;
            &lt;xs:extension base="xs:string"&gt;
              &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
            &lt;/xs:extension&gt;
          &lt;/xs:simpleContent&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:sequence&gt;
    &lt;xs:attribute name="feature" type="xs:string" use="required"/&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:complexType name="OAuthResourceType"&gt;
    &lt;xs:attribute name="url" type="xs:string" use="required"/&gt;
    &lt;xs:attribute name="method" use="optional" default="GET"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:enumeration value="GET"/&gt;
          &lt;xs:enumeration value="POST"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
    &lt;xs:attribute name="param_location" use="optional" default="header"&gt;
      &lt;xs:simpleType&gt;
        &lt;xs:restriction base="xs:string"&gt;
          &lt;xs:enumeration value="auth-header"/&gt;
          &lt;xs:enumeration value="uri-query"/&gt;
          &lt;xs:enumeration value="post-body"/&gt;
        &lt;/xs:restriction&gt;
      &lt;/xs:simpleType&gt;
    &lt;/xs:attribute&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</artwork>
    </figure>
   </t>
  </section>
  <section title="Message Bundle Schema"
           anchor="MessageBundleSchema">
   <t>
    <figure>
     <artwork xml:space="preserve">
&lt;?xml version="1.0"?&gt;
&lt;xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="messagebundle"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="msg" minOccurs="0" maxOccurs="unbounded"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:simpleContent&gt;
              &lt;xs:extension base="xs:string"&gt;
                &lt;xs:attribute name="name" type="xs:string" use="required"/&gt;
                &lt;xs:attribute name="desc" type="xs:string" use="optional"/&gt;
              &lt;/xs:extension&gt;
            &lt;/xs:simpleContent&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</artwork>
    </figure>
   </t>
  </section>
  <section title="Highly Recommended Features">
   <section title="gadgets.flash"
            anchor="gadgets.flash">
    <!-- ============================== class summary ========================== -->
    <t>Embeds Flash content in gadgets.</t>
    <section title="Method Details">
     <section title="embedCachedFlash"
              anchor="gadgets.flash.embedCachedFlash">
      <t>&lt;static&gt; Type: {Boolean} gadgets.flash.embedCachedFlash()</t>
      <t>Description: Injects a cached Flash file into the DOM tree. Accepts
      the same parameters as gadgets.flash.embedFlash does.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Boolean</c>
       <c>Whether the function call completes successfully</c>
      </texttable></t>
     </section>
     <section title="embedFlash"
              anchor="gadgets.flash.embedFlash">
      <t>&lt;static&gt; Type: {Boolean} gadgets.flash.embedFlash(swfUrl,
      swfContainer, swfVersion, opt_params)</t>
      <t>Description: Injects a Flash file into the DOM tree.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>swfUrl</c>
       <c>String</c>
       <c>SWF URL</c>
       <c>swfContainer</c>
       <c>String | Object</c>
       <c>The ID or object reference of an existing HTML container element</c>
       <c>swfVersion</c>
       <c>Number</c>
       <c>Minimum Flash Player version required</c>
       <c>opt_params</c>
       <c>Object</c>
       <c>An optional object that may contain any valid HTML parameter; all
       attributes will be passed through to the Flash movie on creation</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Boolean</c>
       <c>Whether the function call completes successfully</c>
      </texttable></t>
     </section>
     <section title="getMajorVersion"
              anchor="gadgets.flash.getMajorVersion">
      <t>&lt;static&gt; Type: {Number} gadgets.flash.getMajorVersion()</t>
      <t>Description: Detects Flash Player and its major version.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Number</c>
       <c>The major version of Flash Player or 0 if Flash is not supported</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.MiniMessage"
            anchor="gadgets.MiniMessage">
    <!-- ============================== class summary ========================== -->
    <t>MiniMessage class, used to create messages that will appear to the user
    within the gadget. Typical use cases:
    <list style="symbols">
     <t>Status messages: loading, saving, etc.</t>
     <t>Promotional messages: new features, new gadget, etc.</t>
     <t>Debug/error messages: bad input, failed connection to server, etc.</t>
    </list></t>
    <!-- ============================== constructor details ==================== -->
    <section title="Constructor"
             anchor="gadgets.MiniMessage.ctor">
     <t>gadgets.MiniMessage(opt_moduleId, opt_container)</t>
     <t>Creates a MiniMessage.</t>
     <t>Parameters:
     <texttable align="left">
      <ttcol>Name</ttcol>
      <ttcol>Type</ttcol>
      <ttcol>Description</ttcol>
      <c>opt_moduleId</c>
      <c>String</c>
      <c>Optional module ID</c>
      <c>opt_container</c>
      <c>HTMLElement</c>
      <c>Optional HTML container element where mini-messages will appear</c>
     </texttable></t>
    </section>
    <section title="Method Details">
     <section title="createDismissibleMessage"
              anchor="gadgets.MiniMessage.createDismissibleMessage">
      <t>Type: {HTMLElement} createDismissibleMessage(message,
      opt_callback)</t>
      <t>Description: Creates a dismissible message with an [x] icon that
      allows users to dismiss the message. When the message is dismissed, it is
      removed from the DOM and the optional callback function, if defined, is
      called.</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>String | Object</c>
       <c>The message as an HTML string or DOM element</c>
       <c>opt_callback</c>
       <c>Function</c>
       <c>Optional callback function to be called when the message is
       dismissed. The callback function will not be called until after the
       existing callstack has completed execution.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>HTML element of the created message</c>
      </texttable></t>
     </section>
     <section title="createStaticMessage"
              anchor="gadgets.MiniMessage.createStaticMessage">
      <t>Type: {HTMLElement} createStaticMessage(message)</t>
      <t>Description: Creates a static message that can only be dismissed
      programmatically (by calling dismissMessage()).</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>String | Object</c>
       <c>The message as an HTML string or DOM element</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>HTML element of the created message</c>
      </texttable></t>
     </section>
     <section title="createTimerMessage"
              anchor="gadgets.MiniMessage.createTimerMessage">
      <t>Type: {HTMLElement} createTimerMessage(message, seconds,
      opt_callback)</t>
      <t>Description: Creates a message that displays for the specified number
      of seconds. When the timer expires, the message is dismissed and the
      optional callback function is executed.</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>String | Object</c>
       <c>The message as an HTML string or DOM element</c>
       <c>seconds</c>
       <c>number</c>
       <c>Number of seconds to wait before dismissing the message</c>
       <c>opt_callback</c>
       <c>Function</c>
       <c>Optional callback function to be called when the message is
       dismissed. The callback function will not be called until after the
       existing callstack has completed execution.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>HTML element of the created message</c>
      </texttable></t>
     </section>
     <section title="dismissMessage"
              anchor="gadgets.MiniMessage.dismissMessage">
      <t>dismissMessage(message)</t>
      <t>Description: Dismisses the specified message.</t>
      <t>Parameters:
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>message</c>
       <c>HTMLElement</c>
       <c>HTML element of the message to remove</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.oauth.Popup"
            anchor="gadgets.oauth.Popup">
    <!-- ============================== class summary ========================== -->
    <t>OAuth popup window manager.</t>
    <t>Expected usage: 
    <list style="numbers">
     <t>Gadget attempts to fetch OAuth data for the user and discovers that
     approval is needed. The gadget creates two new UI elements: 
     <list style="symbols">
      <t>a "personalize this gadget" button or link</t>
      <t>a "personalization done" button or link, which is initially
      hidden.</t>
     </list>The "personalization done" button may be unnecessary. The popup
     window manager will attempt to detect when the window closes. However, the
     "personalization done" button should still be displayed to handle cases
     where the popup manager is unable to detect that a window has closed. This
     allows the user to signal approval manually.</t>
     <t>Gadget creates a popup object and associates event handlers with the UI
     elements: 
     <figure>
      <artwork xml:space="preserve">
// Called when the user opens the popup window.
var onOpen = function() {
  $("personalizeDone").style.display = "block"
}
// Called when the user closes the popup window.
var onClose = function() {
  $("personalizeDone").style.display = "none"
  fetchData();
}
var popup = new gadgets.oauth.Popup(
    response.oauthApprovalUrl,
    "height=300,width=200",
    onOpen,
    onClose
);
personalizeButton.onclick = popup.createOpenerOnClick();
personalizeDoneButton.onclick = popup.createApprovedOnClick();
</artwork>
     </figure></t>
     <t>When the user clicks the personalization button/link, a window is
     opened to the approval URL. The onOpen function is called to notify the
     gadget that the window was opened.</t>
     <t>When the window is closed, the popup manager calls the onClose function
     and the gadget attempts to fetch the user's data.</t>
    </list></t>
    <!-- ============================== constructor details ==================== -->
    <section title="Constructor"
             anchor="gadgets.oauth.Poup.ctor">
     <t>gadgets.oauth.Popup(destination, windowOptions, openCallback,
     closeCallback)</t>
     <t>Description: used to create a new OAuth popup window manager.</t>
     <t>Parameters:
     <texttable align="left">
      <ttcol>Name</ttcol>
      <ttcol>Type</ttcol>
      <ttcol>Description</ttcol>
      <c>destination</c>
      <c>String</c>
      <c>Target URL for the popup window.</c>
      <c>windowOptions</c>
      <c>String</c>
      <c>Options for window.open, used to specify look and feel of the
      window.</c>
      <c>openCallback</c>
      <c>Function</c>
      <c>Function to call when the window is opened.</c>
      <c>closeCallback</c>
      <c>Function</c>
      <c>Function to call when the window is closed.</c>
     </texttable></t>
    </section>
    <section title="Method Details">
     <section title="createOpenerOnClick"
              anchor="gadgets.oauth.Popup.createOpenerOnClick">
      <t>Type: {Function} createOpenerOnClick()</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Function</c>
       <c>an onclick handler for the "open the approval window" link.</c>
      </texttable></t>
     </section>
     <section title="createApprovedOnClick"
              anchor="gadgets.oauth.Popup.createApprovedOnClick">
      <t>Type: {Function} createApprovedOnClick()</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Function</c>
       <c>an onclick handler for the "I've approved" link. This may not ever be
       called. If we successfully detect that the window was closed, this link
       is unnecessary.</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.rpc"
            anchor="gadgets.rpc">
    <!-- ============================== class summary ========================== -->
    <t>Provides operations for making remote procedure calls for
    gadget-to-container, container-to-gadget, and gadget-to-gadget
    communication.</t>
    <section title="Method Details">
     <section title="call"
              anchor="gadgets.rpc.call">
      <t>&lt;static&gt; gadgets.rpc.call(targetId, serviceName, callback,
      var_args)</t>
      <t>Description: Calls an RPC service.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>targetId</c>
       <c>String</c>
       <c>ID of the RPC service provider; empty if calling the parent
       container</c>
       <c>serviceName</c>
       <c>String</c>
       <c>Service name to call</c>
       <c>callback</c>
       <c>Function|null</c>
       <c>Callback function (if any) to process the return value of the RPC
       request. The callback function will not be called until after the
       existing callstack has completed execution.</c>
       <c>var_args</c>
       <c>*</c>
       <c>Parameters for the RPC request</c>
      </texttable></t>
     </section>
     <section title="register"
              anchor="gadgets.rpc.register">
      <t>&lt;static&gt; gadgets.rpc.register(serviceName, handler)</t>
      <t>Description: Registers an RPC service.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>serviceName</c>
       <c>String</c>
       <c>Service name to register</c>
       <c>handler</c>
       <c>Function</c>
       <c>Service handler</c>
      </texttable></t>
     </section>
     <section title="registerDefault"
              anchor="gadgets.rpc.registerDefault">
      <t>&lt;static&gt; gadgets.rpc.registerDefault(handler)</t>
      <t>Description: Registers a default service handler to process all
      unknown remote procedure calls, which fail silently by default.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>handler</c>
       <c>Function</c>
       <c>Service handler</c>
      </texttable></t>
     </section>
     <section title="unregister"
              anchor="gadgets.rpc.unregister">
      <t>&lt;static&gt; gadgets.rpc.unregister(serviceName)</t>
      <t>Description: Unregisters an RPC service.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>serviceName</c>
       <c>String</c>
       <c>Service name to unregister</c>
      </texttable></t>
     </section>
     <section title="unregisterDefault"
              anchor="gadgets.rpc.unregisterDefault">
      <t>&lt;static&gt; gadgets.rpc.unregisterDefault()</t>
      <t>Description: Unregisters the default service handler. Future unknown
      remote procedure calls will fail silently.</t>
     </section>
    </section>
   </section>
   <section title="gadgets.skins"
            anchor="gadgets.skins">
    <!-- ============================== class summary ========================== -->
    <t>Provides operations for getting display information about the currently
    shown skin.</t>
    <section title="Method Details">
     <section title="getProperty"
              anchor="gadgets.skins.getProperty">
      <t>&lt;static&gt; Type: {String}
      gadgets.skins.getProperty(propertyKey)</t>
      <t>Description: Fetches the display property mapped to the given key.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>propertyKey</c>
       <c>String</c>
       <c>The key to get data for; keys are defined in 
       <xref target="gadgets.skins.Property">gadgets.skins.Property</xref> </c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The data</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.skins.Property"
            anchor="gadgets.skins.Property">
    <!-- ============================== class summary ========================== -->
    <t>All of the display values that can be fetched and used in the gadgets
    UI. These are the supported keys for the 
    <xref target="gadgets.skins.getProperty">
    gadgets.skins.getProperty()</xref> method.</t>
    <list style="hanging">
     <t hangText="ANCHOR_COLOR"
              anchor="gadgets.skins.Property.ANCHOR_COLOR">
      The color that anchor tags should use. This field may be
      used interchangeably with the string 'ANCHOR_COLOR'.
     </t>
     <t hangText="BG_COLOR"
              anchor="gadgets.skins.Property.BG_COLOR">
      The color of the background of the gadget. This field may
      be used interchangeably with the string 'BG_COLOR'.</t>
     <t hangText="BG_IMAGE"
              anchor="gadgets.skins.Property.BG_IMAGE">
      An image to use in the background of the gadget. This
      field may be used interchangeably with the string 'BG_IMAGE'.</t>
     <t hangText="FONT_COLOR"
              anchor="gadgets.skins.Property.FONT_COLOR">
      The color in which the main font should be rendered. This
      field may be used interchangeably with the string 'FONT_COLOR'.</t>
    </list>
   </section>
   <section title="gadgets.Tab"
            anchor="gadgets.Tab">
    <!-- ============================== class summary ========================== -->
    <t>Tab class for gadgets. You create tabs using the TabSet addTab() method.
    To get Tab objects, use the TabSet getSelectedTab() or getTabs() methods. 
    <t>See also: 
    <xref target="gadgets.TabSet">TabSet</xref> </t></t>
    <section title="Method Details">
     <section title="getCallback"
              anchor="gadgets.Tab.getCallback">
      <t>Type: {Function} getCallback()</t>
      <t>Description: Returns the callback function that is executed when the
      tab is selected.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Function</c>
       <c>The callback function of the tab</c>
      </texttable></t>
     </section>
     <section title="getContentContainer"
              anchor="gadgets.Tab.getContentContainer">
      <t>Type: {HTMLElement} getContentContainer()</t>
      <t>Description: Returns the HTML element where the tab content is
      rendered.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>The HTML element of the content container</c>
      </texttable></t>
     </section>
     <section title="getIndex"
              anchor="gadgets.Tab.getIndex">
      <t>Type: {Number} getIndex()</t>
      <t>Description: Returns the tab's index.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Number</c>
       <c>The tab's index</c>
      </texttable></t>
     </section>
     <section title="getName"
              anchor="gadgets.Tab.getName">
      <t>Type: {String} getName()</t>
      <t>Description: Returns the label of the tab as a string (may contain
      HTML).</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>The label of the tab</c>
      </texttable></t>
     </section>
     <section title="getNameContainer"
              anchor="gadgets.Tab.getNameContainer">
      <t>Type: {HTMLElement} getNameContainer()</t>
      <t>Description: Returns the HTML element that contains the tab's
      label.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>The HTML element of the tab's label</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.TabSet"
            anchor="gadgets.TabSet">
    <!-- ============================== class summary ========================== -->
    <t>A class gadgets can use to make tabs.</t>
    <!-- ============================== constructor details ==================== -->
    <section title="Constructor"
             anchor="gadgets.TabSet.ctor">
     <t>gadgets.TabSet(opt_moduleId, opt_defaultTab, opt_container)</t>
     <t>Creates a new TabSet object</t>
     <t>Parameters:
     <texttable align="left">
      <ttcol>Name</ttcol>
      <ttcol>Type</ttcol>
      <ttcol>Description</ttcol>
      <c>opt_moduleId</c>
      <c>String</c>
      <c>Optional suffix for the ID of tab container</c>
      <c>opt_defaultTab</c>
      <c>String</c>
      <c>Optional tab name that specifies the name of of the tab that is
      selected after initialization; if this parameter is omitted, the first
      tab is selected by default</c>
      <c>opt_container</c>
      <c>HTMLElement</c>
      <c>The HTML element to contain the tabs; if omitted, a new div element is
      created and inserted at the very top</c>
     </texttable></t>
    </section>
    <section title="Method Details">
     <section title="addTab"
              anchor="gadgets.TabSet.addTab">
      <t>Type: {String} addTab(tabName, opt_params)</t>
      <t>Description: Adds a new tab based on the name-value pairs specified in
      opt_params. The following properties are supported in opt_params: 
      <list style="hanging">
       <t hangText="contentContainer">An existing HTML element to be used as
       the tab content container. If omitted, the tabs library creates one.</t>
       <t hangText="callback">A callback function to be executed when the tab
       is selected. The callback function will not be called until after the
       existing callstack has completed execution.</t>
       <t hangText="tooltip">A tooltip description that pops up when user moves
       the mouse cursor over the tab.</t>
       <t hangText="index">The index at which to insert the tab. If omitted,
       the new tab is appended to the end.</t>
      </list></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>tabName</c>
       <c>String</c>
       <c>Label of the tab to create</c>
       <c>opt_params</c>
       <c>Object</c>
       <c>Optional parameter object</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>String</c>
       <c>DOM id of the tab container</c>
      </texttable></t>
     </section>
     <section title="alignTabs"
              anchor="gadgets.TabSet.alignTabs">
      <t>alignTabs(align, opt_offset)</t>
      <t>Description: Sets the alignment of tabs. Tabs are center-aligned by
      default.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>align</c>
       <c>String</c>
       <c>'left', 'center', or 'right'</c>
       <c>opt_offset</c>
       <c>Number</c>
       <c>Optional parameter to set the number of pixels to offset tabs from
       the left or right edge; the default value is 3px</c>
      </texttable></t>
     </section>
     <section title="displayTabs"
              anchor="gadgets.TabSet.displayTabs">
      <t>displayTabs(display)</t>
      <t>Description: Shows or hides tabs and all associated content.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>display</c>
       <c>Boolean</c>
       <c>True to show tabs; false to hide tabs</c>
      </texttable></t>
     </section>
     <section title="getHeaderContainer"
              anchor="gadgets.TabSet.getHeaderContainer">
      <t>Type: {HTMLElement} getHeaderContainer()</t>
      <t>Description: Returns the tab headers container element.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>HTMLElement</c>
       <c>The tab headers container element</c>
      </texttable></t>
     </section>
     <section title="getSelectedTab"
              anchor="gadgets.TabSet.getSelectedTab">
      <t>Type: {
      <xref target="gadgets.Tab">gadgets.Tab</xref> } getSelectedTab()</t>
      <t>Description: Returns the currently selected tab object.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>
        <xref target="gadgets.Tab">gadgets.Tab</xref>
       </c>
       <c>The currently selected tab object</c>
      </texttable></t>
     </section>
     <section title="getTabs"
              anchor="gadgets.TabSet.getTabs">
      <t>Type: {Array.&lt;gadgets.Tab&gt;} getTabs()</t>
      <t>Description: Returns an array of all existing tab objects.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Array.&lt;gadgets.Tab&gt;</c>
       <c>Array of all existing tab objects</c>
      </texttable></t>
     </section>
     <section title="removeTab"
              anchor="gadgets.TabSet.removeTab">
      <t>removeTab(tabIndex)</t>
      <t>Description: Removes a tab at tabIndex and all of its associated
      content.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>tabIndex</c>
       <c>Number</c>
       <c>Index of the tab to remove</c>
      </texttable></t>
     </section>
     <section title="setSelectedTab"
              anchor="gadgets.TabSet.setSelectedTab">
      <t>setSelectedTab(tabIndex)</t>
      <t>Description: Selects the tab at tabIndex and fires the tab's callback
      function if it exists. If the tab is already selected, the callback is
      not fired.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>tabIndex</c>
       <c>Number</c>
       <c>Index of the tab to select</c>
      </texttable></t>
     </section>
     <section title="swapTabs"
              anchor="gadgets.TabSet.swapTabs">
      <t>swapTabs(tabIndex1, tabIndex2)</t>
      <t>Description: Swaps the positions of tabs at tabIndex1 and tabIndex2.
      The selected tab does not change, and no callback functions are
      called.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>tabIndex1</c>
       <c>Number</c>
       <c>Index of the first tab to swap</c>
       <c>tabIndex2</c>
       <c>Number</c>
       <c>Index of the secnod tab to swap</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="gadgets.window"
            anchor="gadgets.window">
    <!-- ============================== class summary ========================== -->
    <t>Provides operations for getting information about and modifying the
    window the gadget is placed in.</t>
    <section title="Method Details">
     <section title="adjustHeight"
              anchor="gadgets.window.adjustHeight">
      <t>&lt;static&gt; gadgets.window.adjustHeight(opt_height)</t>
      <t>Description: Adjusts the gadget height.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>opt_height</c>
       <c>Number</c>
       <c>An optional preferred height in pixels; If not specified, will
       attempt to fit the gadget to its content</c>
      </texttable></t>
     </section>
     <section title="getViewportDimensions"
              anchor="gadgets.window.getViewportDimensions">
      <t>&lt;static&gt; Type: {Object}
      gadgets.window.getViewportDimensions()</t>
      <t>Description: Detects the inner dimensions of a frame. See 
      <eref target="http://www.quirksmode.org/dom/w3c_cssom">
      http://www.quirksmode.org/dom/w3c_cssom</eref> for more information.</t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>Object</c>
       <c>An object with width and height properties</c>
      </texttable></t>
     </section>
     <section title="setTitle"
              anchor="gadgets.window.setTitle">
      <t>&lt;static&gt; gadgets.window.setTitle(title)</t>
      <t>Description: Sets the gadget title.</t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>title</c>
       <c>String</c>
       <c>The preferred title</c>
      </texttable></t>
     </section>
    </section>
   </section>
   <section title="JavaScript Internationalization (i18n)">
    <t>A container MUST emit the OpenSocial JavaScript internationalization
    libraries and data files required by the libraries if an application
    requires the feature &lt;Require feature="opensocial-i18n"/&gt;. The
    container SHOULD emit the OpenSocial JavaScript internationalization
    libraries and data files required by the libraries if an application
    optionallly requests the feature &lt;Optional
    feature="opensocial-i18n"/&gt;.</t>
    <section title="gadgets.i18n"
             anchor="gadgets.i18n">
     <!-- ============================== class summary ========================== -->
     <t>Class for internationalization features.</t>
    </section>
    <section title="Formatting/Parsing using Predefined Patterns is Done within Default Locale">
     <t>Gadgets locale is set at render time. The i18n package above will use
     getCountry and getLanguage to load the corresponding formatter/parser for
     that locale if any of the functions in the package are invoked. For
     example, let's say gadgets has lanuguage as french and country as france,
     the i18n package will use formatter/parser following french conventions by
     default. That means gadget developers could format/parse French
     date/time/number/currency using the predefined CURRENCY_PATTERN. 
     <figure>
      <preamble>Example</preamble>
      <artwork xml:space="preserve">
           
gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 \u20AC"); // will return 20000
</artwork>
     </figure>They could also parse foreign currency by passing in a
     opt_currencyCode. Note when French writes an amount of foreign currency,
     they will still use the French way of writing numbers the positioning
     currency code - just the currency code is different. 
     <figure>
      <preamble>Example</preamble>
      <artwork xml:space="preserve">
           
gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 $", 0, "USD"); // will return 20000
</artwork>
     </figure>It gets a little bit complicated if a foreign currency written in
     the foreign way is to be parsed. In that case, predefined patterns won't
     work, and string patterns need to be used. The example below returns 0
     (indicating error in parsing), as the number presented is not in French
     format. 
     <figure>
      <preamble>Example</preamble>
      <artwork xml:space="preserve">
           
gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "$20,000"); // will return 0, indicating error
</artwork>
     </figure>To make this work, a string pattern needs to be passed in, like
     what is done below: 
     <figure>
      <preamble>Example</preamble>
      <artwork xml:space="preserve">
           
gadgets.i18n.parseNumber("#,###", "$20,000", 0, "USD"); // will return 20000
</artwork>
     </figure></t>
    </section>
    <section title="Pattern Specification">
     <section title="Date/Time Pattern Specification">
      <t>Both Formatting and Parsing following the same pattern specification.
      The date/time pattern specifications are found in 
      <eref target="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">
      Unicode Locale Data Markup Language, Date Format Patterns</eref> The
      following specifiers are not required in this release: 
      <list style="symbols">
       <t>w: Week of year</t>
       <t>W: Week of Month.</t>
       <t>D: Day of year.</t>
       <t>F: Day of Week in Month.</t>
       <t>g: Modified Julian day</t>
      </list></t>
     </section>
     <section title="Number Pattern Specification">
      <t>Many characters in a pattern are taken literally; they are matched
      during parsing and output unchanged during formatting. Special
      characters, on the other hand, stand for other characters, strings, or
      classes of characters. For example, the '#' character is replaced by a
      localized digit. Often the replacement character is the same as the
      pattern character; in the U.S. locale, the ',' grouping character is
      replaced by ','. However, the replacement is still happening, and if the
      symbols are modified, the grouping character changes. Some special
      characters affect the behavior of the formatter by their presence; for
      example, if the percent character is seen, then the value is multiplied
      by 100 before being displayed.</t>
      <t>To insert a special character in a pattern as a literal, that is,
      without any special meaning, the character must be quoted. There are some
      exceptions to this which are noted below.</t>
      <t>The characters listed here are used in non-localized patterns.
      Localized patterns use the corresponding characters taken from
      corresponding locale symbol collection. Two exceptions are the currency
      sign and quote, which are not localized. 
      <texttable align="left">
       <ttcol>Symbol</ttcol>
       <ttcol>Location</ttcol>
       <ttcol>Localized?</ttcol>
       <ttcol>Meaning</ttcol>
       <c>0</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Digit</c>
       <c>#</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Digit, zero shows as absent.</c>
       <c>.</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Decimal separator or monetary decimal separator.</c>
       <c>-</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Minus sign</c>
       <c>,</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Grouping Separator</c>
       <c>E</c>
       <c>Number</c>
       <c>Yes</c>
       <c>Separates mantizza and exponent in scientific notation. Need not be
       quoted in prefix or suffix.</c>
       <c>;</c>
       <c>Subpattern boundary</c>
       <c>Yes</c>
       <c>Separates positive and negative subpatterns.</c>
       <c>%</c>
       <c>Prefix or suffix</c>
       <c>Yes</c>
       <c>Multiply by 100 and show as percentage.</c>
       <c>\u2030</c>
       <c>Prefix or suffix</c>
       <c>Yes</c>
       <c>Multiply by 1000 and show as per mile.</c>
       <c>¤ (\u00A4)</c>
       <c>Prefix or suffix</c>
       <c>No</c>
       <c>Currency sign, replaced by currency symbol. If doubled, replaced by
       international currency symbol. If present in a pattern, the monetary
       decimal separator is used instead of the decimal separator.</c>
       <c>'</c>
       <c>Prefix or suffix</c>
       <c>No</c>
       <c>Used to quote special characters in a prefix or suffix, for example,
       "'#'#" formats 123 to "#123". To create a single quote itself, use two
       in a row: "# o''clock".</c>
      </texttable>A NumberFormat pattern contains a postive and negative
      subpattern, for example, "#,##0.00;(#,##0.00)". Each subpattern has a
      prefix, a numeric part, and a suffix. If there is no explicit negative
      subpattern, the negative subpattern is the localized minus sign prefixed
      to the positive subpattern. That is, "0.00" alone is equivalent to
      "0.00;-0.00". If there is an explicit negative subpattern, it serves only
      to specify the negative prefix and suffix; the number of digits, minimal
      digits, and other characteristics are ignored in the negative subpattern.
      That means that "#,##0.0#;(#)" has precisely the same result as
      "#,##0.0#;(#,##0.0#)".</t>
      <t>The prefixes, suffixes, and various symbols used for infinity, digits,
      thousands separators, decimal separators, etc. may be set to arbitrary
      values, and they will appear properly during formatting. However, care
      must be taken that the symbols and strings do not conflict, or parsing
      will be unreliable. For example, the decimal separator and thousands
      separator should be distinct characters, or parsing will be
      impossible.</t>
      <t>The grouping separator is a character that separates clusters of
      integer digits to make large numbers more legible. It commonly used for
      thousands, but in some locales it separates ten-thousands. The grouping
      size is the number of digits between the grouping separators, such as 3
      for "100,000,000" or 4 for "1 0000 0000".</t>
      <section title="Pattern BNF">
       <t>
       <figure>
        <artwork xml:space="preserve">
 pattern := subpattern (';' subpattern)?
subpattern := prefix? number exponent? suffix?
 number :=
(integer ('.' fraction)?) | sigDigits
 prefix :=
'\u0000'..'\uFFFD' - specialCharacters
 suffix :=
'\u0000'..'\uFFFD' - specialCharacters
 integer := '#'* '0'*
'0'
 fraction := '0'* '#'*
 sigDigits := '#'* '@'
'@'* '#'*
 exponent := 'E' '+'? '0'* '0'
 padSpec
:= '*' padChar
 padChar := '\u0000'..'\uFFFD' -
quote
 
 Notation:
 X* 0 or more
instances of X
 X? 0 or 1 instances of X
 X|Y
either X or Y
 C..D any character from C up to D,
inclusive
 S-T characters in S, except those in T
</artwork>
       </figure>The first subpattern is for positive numbers. The second
       (optional) subpattern is for negative numbers.</t>
      </section>
     </section>
    </section>
     <list style="hanging">
     <t hangText="CURRENCY_PATTERN"
              anchor="gadgets.i18n.CURRENCY_PATTERN">
      Pattern for currency.</t>
     <t hangText="DECIMAL_PATTERN"
              anchor="gadgets.i18n.DECIMAL_PATTERN">
      Pattern for decimal numbers.</t>
     <t hangText="FULL_DATE_FORMAT"
              anchor="gadgets.i18n.FULL_DATE_FORMAT">
      Format for full representations of dates.</t>
     <t hangText="FULL_DATETIME_FORMAT"
              anchor="gadgets.i18n.FULL_DATETIME_FORMAT">
      Format for short representations of datetimes.</t>
     <t hangText="FULL_TIME_FORMAT"
              anchor="gadgets.i18n.FULL_TIME_FORMAT">
      Format for full representations of times.</t>
     <t hangText="LONG_DATE_FORMAT"
              anchor="gadgets.i18n.LONG_DATE_FORMAT">
      Format for long representations of dates.</t>
     <t hangText="LONG_DATETIME_FORMAT"
              anchor="gadgets.i18n.LONG_DATETIME_FORMAT">
      Format for short representations of datetimes.</t>
     <t hangText="LONG_TIME_FORMAT"
              anchor="gadgets.i18n.LONG_TIME_FORMAT">
      Format for long representations of times.</t>
     <t hangText="MEDIUM_DATE_FORMAT"
              anchor="gadgets.i18n.MEDIUM_DATE_FORMAT">
      Format for medium representations of dates.</t>
     <t hangText="MEDIUM_DATETIME_FORMAT"
              anchor="gadgets.i18n.MEDIUM_DATETIME_FORMAT">
      Format for medium representations of datetimes.</t>
     <t hangText="MEDIUM_TIME_FORMAT"
              anchor="gadgets.i18n.MEDIUM_TIME_FORMAT">
      Format for medium representations of times.</t>
     <t hangText="PERCENT_PATTERN"
              anchor="gadgets.i18n.PERCENT_PATTERN">
      Pattern for percentages.</t>
     <t hangText="SCIENTIFIC_PATTERN"
              anchor="gadgets.i18n.SCIENTIFIC_PATTERN">
      Pattern for scientific numbers.</t>
     <t hangText="SHORT_DATE_FORMAT"
              anchor="gadgets.i18n.SHORT_DATE_FORMAT">
      Format for short representations of dates.</t>
     <t hangText="SHORT_DATETIME_FORMAT"
              anchor="gadgets.i18n.SHORT_DATETIME_FORMAT">
      Format for short representations of datetimes.</t>
     <t hangText="SHORT_TIME_FORMAT"
              anchor="gadgets.i18n.SHORT_TIME_FORMAT">
      Format for short representations of times.</t>
    </list>
    <section title="Method Details">
     <section title="formatDateTime"
              anchor="gadgets.i18n.formatDateTime">
      <t>&lt;static&gt; Type: {string} gadgets.i18n.formatDateTime(pattern,
      date)</t>
      <t>Description: This method formats a "Date" object with provided pattern
      specification. The pattern could be a string using ICU notation or a
      predefined pattern. A string using ICU notation offers the most
      flexibility. Each field as specified in the pattern has locale specific
      behavior. The pattern string is allowed to contain string literals, and
      one type of pattern might not work for all locales. In those case, the
      pattern itself could also be locale specific, thus not good for sharing
      among locales. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
date = new Date(2006, 6, 27, 13, 10, 10, 250);
assertEquals("13:10:10", gadgets.i18n.formatDateTime("HH:mm:ss", date));
</artwork>
      </figure></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>pattern</c>
       <c>string/number</c>
       <c>String to specify patterns or Number used to reference predefined
       pattern that a date should be formatted into.</c>
       <c>date</c>
       <c>Date</c>
       <c>Date object being formatted.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>string</c>
       <c>string representation of date/time.</c>
      </texttable></t>
     </section>
     <section title="formatNumber"
              anchor="gadgets.i18n.formatNumber">
      <t>&lt;static&gt; Type: {string} gadgets.i18n.formatNumber(pattern,
      value, opt_currencyCode)</t>
      <t>Description: Format number using the pattern specified. The pattern
      could be a string pattern or one of the predefined patterns. The
      formatted string is returned. If an error is encountered, zero will be
      returned. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
var str = gadgets.i18n.formatNumber("#,###", 1234567890);
assertEquals("1,234,567,890", str);
var str = gadgets.i18n.formatNumber(gadgets.i18n.CURRRENCY_PATTERN, 1234.569);
assertEquals("$1,234.58", str);
</artwork>
      </figure></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>pattern</c>
       <c>string/number</c>
       <c>String to specify patterns or Number used to reference predefined
       pattern that a number should be formatted into.</c>
       <c>value</c>
       <c>number</c>
       <c>The number being formatted.</c>
       <c>opt_currencyCode</c>
       <c>string</c>
       <c>optional international currency code, it determines the currency
       code/symbol should be used in format/parse. If not given, the currency
       code for current locale will be used.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>string</c>
       <c>The formatted string.</c>
      </texttable></t>
     </section>
     <section title="parseDateTime"
              anchor="gadgets.i18n.parseDateTime">
      <t>&lt;static&gt; Type: {number} gadgets.i18n.parseDateTime(pattern,
      text, start, date)</t>
      <t>Description: This method will parse the input string ("text"),
      interpretting it as specified by pattern. The parsed result will be saved
      into a Date object ("date"). "start" indicates from where in the string
      the parse should start. This method returns the number of characters
      consumed. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
assertTrue(gadgets.i18n.parseDateTime("yyMMdd", "991202", 0, date) &gt; 0);
assertEquals(1999, date.getFullYear());
assertTrue(date.getMonth() == 12 - 1);
assertTrue(date.getDate() == 02);
assertTrue(gadgets.i18n.parseDateTime("yyyyMMdd", "20051202", 0, date) &gt; 0);
assertEquals(2005, date.getFullYear());
assertTrue(date.getMonth() == 12 - 1);
assertTrue(date.getDate() == 02);   
</artwork>
      </figure>A whole piece of string is usually the target for parsing. But
      in some cases, you might just want to parse part of the string, "start"
      parameter and return value also make it very convenient. For example,
      suppose you want to parse a string like "88/01, 99/03, 98/05, 97/02", the
      following code will do the job. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
var date_array = [];
var pos = 0;
var text = "88/01, 99/03, 98/05, 97/02";
while(1) {
 var date = new Date;
    var consumed = gadgets.i18n.parseDateTime("yy/MM", text, pos, date);
    if (consumed &lt;= 0) break;
    date_array.push(date);
    pos += consumed;
    if (pos &lt; text.length &amp;&amp; text[pos] == ',') ++pos;
    if (pos &lt; text.length &amp;&amp; text[pos] == ' ') ++pos;
}
</artwork>
      </figure>Similar to the formatting functions, a predefined pattern could
      also be passed in as the first parameter. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
//assume locale has already been set to zh_CN
var date = new Date();
gadgets.i18n.parseDateTime(gadgets.i18n.LONG_DATE_FORMAT, "2006年7月24日", 0, date);
assertEquals(date.getFullYear(), 2006);
assertEquals(date.getMonth(), 7 - 1);
assertEquals(date.getDate(), 24);
</artwork>
      </figure></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>pattern</c>
       <c>string/number</c>
       <c>String to specify patterns or Number used to reference predefined
       pattern that a date should be parsed from.</c>
       <c>text</c>
       <c>string</c>
       <c>The string that need to be parsed.</c>
       <c>start</c>
       <c>number</c>
       <c>The character position in "text" where parse begins.</c>
       <c>date</c>
       <c>Date</c>
       <c>The date object that will hold parsed value.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>number</c>
       <c>The number of characters advanced or 0 if failed.</c>
      </texttable></t>
     </section>
     <section title="parseNumber"
              anchor="gadgets.i18n.parseNumber">
      <t>&lt;static&gt; Type: {number} gadgets.i18n.parseNumber(pattern, text,
      opt_pos, opt_currencyCode)</t>
      <t>Description: Parse string to get a number the pattern specified. The
      pattern could be a string pattern or one of the predefined patterns. 
      <figure>
       <preamble>Example</preamble>
       <artwork xml:space="preserve">
var value = gadgets.i18n.parseNumber("0E0", "1.2345E+4");
assertEquals(12345.0, value);
//assume locale has already been set to fr
var value = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "0,30 €");
assertEquals(0.30, value);
</artwork>
      </figure></t>
      <t>Parameters: 
      <texttable align="left">
       <ttcol>Name</ttcol>
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>pattern</c>
       <c>string/number</c>
       <c>String to specify patterns or Number used to reference predefined
       pattern that a number should be parsed from.</c>
       <c>text</c>
       <c>string</c>
       <c>input text being parsed.</c>
       <c>opt_pos</c>
       <c>Array</c>
       <c>optional one element array that holds position information. It tells
       from where parse should begin. Upon return, it holds parse stop
       position.</c>
       <c>opt_currencyCode</c>
       <c>string</c>
       <c>optional international currency code, it determines the currency
       code/symbol should be used in format/parse. If not given, the currency
       code for current locale will be used.</c>
      </texttable></t>
      <t>Returns:
      <texttable align="left">
       <ttcol>Type</ttcol>
       <ttcol>Description</ttcol>
       <c>number</c>
       <c>Parsed number, 0 if in error.</c>
      </texttable></t>
     </section>
    </section>
   </section>
  </section>
  <references>
   <reference anchor='RFC2119'>
    <front>
     <title>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.'
             surname='Bradner'
             fullname='Scott Bradner'>
      <organization abbrev='HarvardU'>Harvard University</organization>
     </author>
     <date month='March'
           year='1997' />
    </front>
    <seriesInfo name='RFC'
                value='2119' />
   </reference>
   <reference anchor='RFC2606'>
    <front>
     <title>Reserved Top Level DNS Names</title>
     <author initials='D.'
             surname='Eastlake'
             fullname='Donald E. Eastlake 3rd'>
      <organization abbrev='IBM'>IBM</organization>
     </author>
     <author initials='A.'
             surname='Panitz'
             fullname='Aliza R. Panitz'></author>
     <date month='June'
           year='1999' />
    </front>
    <seriesInfo name='RFC'
                value='2606' />
   </reference>
   <reference anchor='RFC2616'>
    <front>
     <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
     <author initials='R.'
             surname='Fielding'>
      <organization>UC Irvine</organization>
     </author>
     <author initials='J.'
             surname='Gettys'>
      <organization>Compaq/W3C</organization>
     </author>
     <author initials='J.'
             surname='Mogul'>
      <organization>Compaq</organization>
     </author>
     <author initials='H.'
             surname='Frystyk'>
      <organization>W3C/MIT</organization>
     </author>
     <author initials='L.'
             surname='Masinter'>
      <organization>Xerox</organization>
     </author>
     <author initials='P.'
             surname='Leach'>
      <organization>Microsoft</organization>
     </author>
     <author initials='T.'
             surname='Berners-Lee'>
      <organization>W3C/MIT</organization>
     </author>
     <date month='June'
           year='1999' />
    </front>
    <seriesInfo name='RFC'
                value='2616' />
   </reference>
   <reference anchor='Caja'
              target="http://code.google.com/p/google-caja/">
    <front>
     <title>Caja Project</title>
     <date month='January'
           year='2009' />
    </front>
   </reference>
   <reference anchor="OpenSocial-Templating"
              target="./OpenSocial-Templating.xml">
    <front>
     <title>OpenSocial Templating Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
   <reference anchor="xsdpart1"
              target="http://www.w3.org/TR/xmlschema-1/">
    <front>
     <title>XML Schema Part 1: Structures Second Edition</title>
     <author initials='H.S.'
             surname='Thompson'
             fullname='Henry S. Thompson'>
      <organization>University of Edinburgh</organization>
     </author>
     <author initials='D.'
             surname='Beech'
             fullname='David Beech'>
      <organization>Oracle Corporation</organization>
     </author>
     <author initials='M.'
             surname='Maloney'
             fullname='Murray Maloney'>
      <organization>Commerce One</organization>
     </author>
     <author initials='N.'
             surname='Mendelsohn'
             fullname='Noah Mendelsohn'>
      <organization>Lotus Development Corporation</organization>
     </author>
     <date month='October'
           year='2004' />
    </front>
   </reference>
   <reference anchor='OAuth-Core'
              target='http://oauth.net/core/1.0/'>
    <front>
     <title>OAuth Core 1.0</title>
     <author initials='M.'
             surname='Atwood'
             fullname='Mark Atwood'></author>
     <author initials='R. M.'
             surname='Conlan'
             fullname='Richard M. Conlan'>
      <organization>Google</organization>
     </author>
     <author initials='B.'
             surname='Cook'
             fullname='Blaine Cook'>
      <organization>Twitter</organization>
     </author>
     <author initials='L.'
             surname='Culver'
             fullname='Leah Culver'>
      <organization>Pownce</organization>
     </author>
     <author initials='K.'
             surname='Elliott-McCrea'
             fullname='Kellan Elliott-McCrea'>
      <organization>Flickr</organization>
     </author>
     <author initials='L.'
             surname='Halff'
             fullname='Larry Halff'>
      <organization>ma.gnolia</organization>
     </author>
     <author initials='E.'
             surname='Hammer-Lahav'
             fullname='Eran Hammer-Lahav'></author>
     <author initials='B.'
             surname='Laurie'
             fullname='Ben Laurie'>
      <organization>Google</organization>
     </author>
     <author initials='C.'
             surname='Messina'
             fullname='Chris Messina'></author>
     <author initials='J.'
             surname='Panzer'
             fullname='John Panzer'></author>
     <author initials='S.'
             surname='Quigley'
             fullname='Sam Quigley'>
      <organization>Twitter</organization>
     </author>
     <author initials='D.'
             surname='Recordon'
             fullname='David Recordon'>
      <organization>six apart</organization>
     </author>
     <author initials='E.'
             surname='Sandler'
             fullname='Eran Sandler'>
      <organization>Yedda</organization>
     </author>
     <author initials='J.'
             surname='Sergent'
             fullname='Jonathan Sergent'>
      <organization>ma.gnolia</organization>
     </author>
     <author initials='B.'
             surname='Slesinsky'
             fullname='Brian Slesinsky'></author>
     <author initials='A.'
             surname='Smith'
             fullname='Andy Smith'>
      <organization>Jaiku</organization>
     </author>
     <date month='December'
           year='2007' />
    </front>
   </reference>
  </references>
 </back>
</rfc>
