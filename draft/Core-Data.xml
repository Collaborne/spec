<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<?rfc-ext allow-markup-in-artwork="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="core-data-specification-draft"
     xmlns:x="http://purl.org/net/xml2rfc/ext">
 <front>
  <title abbrev="Core-Data">OpenSocial Core Data Specification (draft)</title>
  <author fullname='OpenSocial and Gadgets Specification Group'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="December"
        year="2009" />
  <abstract>
   <t>This document defines all the data objects used in the <xref target="Core-Gadget"/> and <xref target="Core-API-Server"/> specifications.</t>
  </abstract>
 </front>
 <middle>
  <section title="Introduction">
   <section title="Requirements">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in 
    <xref target="RFC2119">RFC2119</xref>.</t>
    <t>An implementation is not compliant if it fails to satisfy one or more of
    the MUST or REQUIRED level requirements for the protocols it
    implements.</t>
   </section>
   <section title="Terminology">
    <t>This specification uses a number of terms to refer to the roles played
    by participants in, and objects of, an OpenSocial implementation.</t>
    <list style="hanging">
     <t hangText="term">Definition</t>
    </list>
   </section>
  </section>
  <section title="Notational Conventions and Generic Grammar">
   <section title="Conventions">
    <t>Domain name examples use 
    <xref target="RFC2606">RFC2606</xref>.</t>
   </section>
   <section title="Augmented BNF">
    <t>The grammatical rules in this document are to be interpreted as
    described in <xref target="RFC2234">RFC4234</xref> (Augmented Backus-Naur 
    Form).</t>   
    <t>The following constructs are introduced in this document to augment 
    RFC4234:</t>
    <list style="hanging">
     <t hangText="{rule1 rule2}">
      <t>Elements enclosed in braces (squiggly brackets) are treated as a
      single, UNORDERED element. Its contents may occur in any order. Hence: 
      <artwork type="abnf" xml:space="preserve">{elem foo} bar</artwork>
      would match (elem foo bar) and (foo elem bar).</t>
      <t>NOTE: Specifying alternatives is quite different from specifying set
      grouping. Alternatives indicate the matching of exactly one (sub-)rule
      out of the total grouping. The set mechanism indicates the matching of a
      string which contains all of the elements within the group; however the
      elements may occur in any order.</t>
     </t>
     <t hangText="#rule">A construct "#" is defined, similar to "*", for
     defining lists of elements. The full form is "&lt;n&gt;#&lt;m&gt;element"
     indicating at least &lt;n&gt; and at most &lt;m&gt; elements, each
     separated by one or more commas (",") and OPTIONAL linear white space
     (LWS). This makes the usual form of lists very easy; a rule such as 
     <artwork type="inline" xml:space="preserve">( *LWS element *( *LWS "," *LWS element ))</artwork>
     can be shown as 
     <artwork type="inline" xml:space="preserve">1#element</artwork>
     Wherever this construct is used, null elements are allowed, but do
     not contribute to the count of elements present. That is, "(element), ,
     (element) " is permitted, but counts as only two elements. Therefore, 
     where at least one element is required, at least one non-null element MUST 
     be present.  Default values are 0 and infinity so that "#element" allows 
     any number, including zero; "1#element" requires at least one; and 
     "1#2element" allows one or two.</t>
     <t hangText="&amp;rule">A construct "&amp;" is defined, similar to "#",
     which uses an ampersand (&amp;) instead of commas, and MUST NOT include
     linear white space between elements.</t>
     <t hangText="implied *LWS">The grammar described by this specification is
     word-based. Except where noted otherwise, linear white space (LWS) can be
     included between any two adjacent words (token or quoted-string), and
     between adjacent words and separators, without changing the interpretation
     of a field. At least one delimiter (LWS and/or separators) MUST exist
     between any two tokens, since they would otherwise be interpreted as a
     single token.</t>
    </list>
   </section>
   <section title="Basic Rules">
    <t>The following rules are used throughout this specification to describe
    basic parsing constructs. The US-ASCII coded character set is defined by 
    <xref target="RFC20" /> </t>
    <artwork type="abnf"
         xml:space="preserve">
<![CDATA[
OCTET          = <any 8-bit sequence of data>
CHAR           = <any US-ASCII character (octets 0 - 127)>
UPALPHA        = <any US-ASCII uppercase letter "A".."Z">
LOALPHA        = <any US-ASCII lowercase letter "a".."z">
ALPHA          = UPALPHA / LOALPHA
DIGIT          = <any US-ASCII digit "0".."9">
CTL            = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
CR             = <US-ASCII CR, carriage return (13)>
LF             = <US-ASCII LF, linefeed (10)>
SP             = <US-ASCII SP, space (32)>
HT             = <US-ASCII HT, horizontal-tab (9)>
<">            = <US-ASCII double-quote mark (34)>
CRLF           = CR LF
LWS            = [CRLF] 1*( SP / HT )
TEXT           = <any OCTET except CTLs, but including LWS>
COMMA          = <US-ASCII comma (44)>
      ]]>
</artwork>
   </section>
  </section>
  <section title="Data"
           anchor="data">
   <section title="OpenSocial-Boolean" anchor="OpenSocial-Boolean">
     <t>TODO</t>
   </section>
   <section title="OpenSocial-Collection"
            anchor="OpenSocial-Collection">
    <t>Many service operations return a list of OpenSocial resources. Lists are
    always returned in the "list" field of the result. Lists can either be the
    full set of resources or a pageable subset. If the operation supports
    random access indexing of the full list it will support the "startIndex"
    and "count" parameters which control what sublist of the full list is
    returned. The paging mechanisms described here are based on the OpenSearch
    standard with the additional requirement that all indexes are 0 based.</t>
    <artwork type="abnf"
         xml:space="preserve">
OpenSocial-Collection = "{"
                        "result : {"
                          [ "totalResults : " number "," ]
                          [ "startIndex : " number "," ]
                          [ "itemsPerPage : " number ", ]
                          [ "isFiltered : " ( "true" / "false" ) "," ]
                          [ "isUpdatedSince : " ( "true" / "false" ) "," ]
                          [ "itemsPerPage : " number "," ]
                          "list :" OpenSocial-Objects 
                        "}"
                      "}"
OpenSocial-Objects = "[" #<x:ref>OpenSocial-Object</x:ref> "]"
</artwork>
   </section>
   <section title="OpenSocial-Date" anchor="OpenSocial-Date">
     <t>TODO</t>
   </section>
   <section title="OpenSocial-Date-UTC-Offset" anchor="OpenSocial-Date-UTC-Offset">
     <t>TODO</t>
   </section>
   <section title="OpenSocial-Plural-Field" anchor="OpenSocial-Plural-Field">
     <texttable>
      <ttcol align="left" width="10%">Field Name</ttcol>
      <ttcol align="left" width="15%">Field Type</ttcol>
      <ttcol align="left">Description</ttcol>
      <c>value</c>
      <c><x:ref>OpenSocial-Object</x:ref></c>
      <c>The primary value of this field, e.g. the actual e-mail address, phone
      number, or URL. When specifying a sortBy field in the Query Parameters for
      a Plural Field, the default meaning is to sort based on this value
      sub-field. Each non-empty Plural Field value MUST contain at least the
      value sub-field, but all other sub-fields are optional.</c>
      <c>type</c>
      <c>string</c>
      <c>The type of field for this instance, usually used to label the
      preferred function of the given contact information. Unless otherwise
      specified, this string value specifies Canonical Values of work, home,
      and other.</c>
      <c>primary</c>
      <c><x:ref>OpenSocial-Boolean</x:ref></c>
      <c>A Boolean value indicating whether this instance of the Plural Field
      is the primary or preferred value of for this field, e.g. the preferred
      mailing address or primary e-mail address. Service Providers MUST NOT
      mark more than one instance of the same Plural Field as primary="true",
      and MAY choose not to mark any fields as primary, if this information is
      not available. For efficiency, Service Providers SHOULD NOT mark all
      non-primary fields with primary="false", but should instead omit this
      sub-field for all non-primary instances.</c>
     </texttable>
     <t>When returning Plural Fields, Service Providers SHOULD canonicalize the
     value returned, if appropriate (e.g. for e-mail addresses and URLs).
     Providers MAY return the same value more than once with different types
     (e.g. the same e-mail address may used for work and home), but SHOULD NOT
     return the same (type, value) combination more than once per Plural Field,
     as this complicates processing by the Consumer.</t>
   </section>
  </section>
  <section title="Rules for mapping JSON to XML"
           anchor="JSON-to-XML">
   <t>Singular fields are encoded as string key/value pairs in JSON and tags
   with text content in XML, e.g. "field": "value" and
   &lt;field&gt;value&lt;/field&gt; respectively.</t>
   <t>Plural fields are encoded as arrays in JSON and repeated tags in XML,
   e.g. "fields": [ "value1", "value2" ] and
   &lt;fields&gt;value1&lt;/field&gt;&lt;fields&gt;value2&lt;/field&gt;
   respectively.</t>
   <t>Nodes with multiple sub-nodes are represented as objects in JSON and tags
   with sub-tags in XML, e.g. "field": { "subfield1": "value1", "subfield2":
   "value2" } and
   &lt;field&gt;&lt;subfield1&gt;value1&lt;/subfield1&gt;&lt;subfield2&gt;value2&lt;/subfield2&gt;&lt;/field&gt;
   respectively.</t>
  </section>
 </middle>
 <back>
  <references>
   <reference anchor='RFC2119'>
    <front>
     <title>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.'
             surname='Bradner'
             fullname='Scott Bradner'>
      <organization abbrev='HarvardU'>Harvard University</organization>
     </author>
     <date month='March'
           year='1997' />
    </front>
    <seriesInfo name='RFC' value='2119' />
   </reference>
   <reference anchor='RFC2606'>
    <front>
     <title>Reserved Top Level DNS Names</title>
     <author initials='D.'
             surname='Eastlake'
             fullname='Donald E. Eastlake 3rd'>
      <organization abbrev='IBM'>IBM</organization>
     </author>
     <author initials='A.'
             surname='Panitz'
             fullname='Aliza R. Panitz'></author>
     <date month='June'
           year='1999' />
    </front>
    <seriesInfo name='RFC'
                value='2606' />
   </reference>
   <reference anchor='RFC2234'>
    <front>
     <title>Augmented BNF for Syntax Specifications: ABNF</title>
    </front>
    <seriesInfo name='RFC'
                value='2234' />
   </reference>
   <reference anchor='RFC20'>
    <front>
     <title>ASCII format for Network Interchange</title>
    </front>
    <seriesInfo name='RFC'
                value='20' />
   </reference>
   <reference anchor="Core-Gadget"
              target="./Core-Gadget.xml">
    <front>
     <title>OpenSocial Core Gadget Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
   <reference anchor="Core-API-Server"
              target="./Core-API-Server.xml">
    <front>
     <title>OpenSocial Core API Server Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
  </references>
 </back>
</rfc>
