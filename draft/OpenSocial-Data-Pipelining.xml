<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./rfc2629.xslt' ?>
<?rfc toc="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="opensocial-data-pipelining-specification-v0_9">
 <front>
  <title abbrev="OpenSocial Data Pipelining">OpenSocial Data Pipelining 
  Specification v0.9</title>
  <author surname="OpenSocial and Gadgets Specification Group"
          fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="April"
        year="2009" />
  <area>General</area>
  <keyword>OpenSocial</keyword>
  <keyword>social networking</keyword>
  <keyword>REST</keyword>
  <keyword>XML</keyword>
  <keyword>Extensible Markup Language</keyword>
  <keyword>JSON</keyword>
  <keyword>JavaScript Object Notation</keyword>
  <keyword>Atom</keyword>
 </front>
 <middle>
  <section title="Notation and Conventions">
   <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in 
   <xref target="RFC2119">RFC2119</xref>. Domain name examples use 
   <xref target="RFC2606">RFC2606</xref>.</t>
  </section>
  <section title="Overview">
   <t>Data Pipelining is a declarative syntax for defining the data you want
   the container to provide to you for processing. Examples would be
   &lt;os:DataRequest method="people.get" userId="@viewer"/&gt; or
   &lt;os:HttpRequest href="http://www.example.com/api"&gt;. The
   &lt;os:DataRequest&gt; element provides access to OpenSocial data, and the
   &lt;os:HttpRequest&gt; element provides access to content from any HTTP
   endpoint. Several convenience elements provide simplified access to
   OpenSocial data.</t>
   <t>The data that is retrieved will be available in three contexts: 
   <list style="numbers">
    <t>Proxied content requests. This data will be POSTed to the developer
    party server with requests for proxied content.</t>
    <t>OpenSocial Templates. The data will be available as named variables in
    OpenSocial templates.</t>
    <t>JavaScript. This data will be available in the JavaScript API.</t>
   </list>Developers will insert the following &lt;os:*&gt; namespaced tags
   within a &lt;Content&gt; block to specify what data should be provided to
   the gadget.</t>
   <t>RESTful call equivalents: 
   <list style="numbers">
    <t>&lt;os:DataRequest&gt; - request to OpenSocial data, including person
    data, activity data, and any container-specific endpoints</t>
    <t>&lt;os:HttpRequest&gt;, equivalent to gadgets.io.makeRequest 
    <list style="symbols">
     <t>This is a call to an arbitrary URL.</t>
    </list></t>
    <t>&lt;os:PeopleRequest&gt; - convenience element to get profile
    information for a group or list of people</t>
    <t>&lt;os:ViewerRequest&gt;, &lt;os:OwnerRequest&gt; - convenience elements
    to get the viewer or owner's profile</t>
    <t>&lt;os:ActivitiesRequest&gt; - convenience element to get activities</t>
   </list>
   <figure>
    <artwork xml:space="preserve">
  
&lt;Content type="html"&gt;&lt;![CDATA[
  &lt;script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data"&gt;
    &lt;os:DataRequest key="vwr" method="people.get" userId="@viewer" fields="name,birthday"/&gt;
    &lt;os:ViewerRequest key="vwr2" fields="name,birthday"/&gt;
    &lt;os:HttpRequest key="mydata" href="http://example.com/api"/&gt;
  &lt;/script&gt;
  ... HTML content here ...
]]&gt;&lt;/Content&gt;
</artwork>
   </figure>Note that we only have equivalents for REST calls that get data -
   calls that update data cannot be safely used in Data Pipelining.</t>
   <t>Data Pipelining creates a new feature name for use in the Gadgets
   Specification: opensocial-data. When data pipelining elements are embedded
   in type=@html, the Module must contain this XML: 
   <figure>
    <artwork xml:space="preserve">
  
&lt;ModulePrefs&gt;
 &lt;Require feature="opensocial-data"/&gt;
&lt;/ModulePrefs&gt;
</artwork>
   </figure></t>
  </section>
  <section title="Common request processing">
   <t>All XML tags MUST have an @key string attribute. This is used to identify
   the data in the response back.  The value of the @key attribute is case-sensitive.</t>
   <t>Calls with corresponding REST APIs have a 1:1 mapping between the XML
   attributes and the RESTful API parameters. See the OpenSocial RESTful
   Protocol for an overview of the REST calls.</t>
  </section>
  <section title="Tag: &lt;os:DataRequest&gt;"
           anchor="DataRequest">
   <t>Request to get OpenSocial data, including person data, activity data, and
   any container-specific endpoints.</t>
   <t>Attributes 
   <list style="symbols">
    <t>@key {string}</t>
    <t>@method {string} The name of the REST endpoint and operation called.
    Implementations MUST support "people.get" and "activities.get", and MUST
    NOT support ".update", ".create", or ".delete" operations.</t>
    <t>All other attributes will be passed as string parameters to the
    endpoint. See the OpenSocial RESTful protocol for information on the
    parameters available for each endpoint.</t>
   </list>Returns 
   <list style="symbols">
    <t>JSON object (typically, an array) representing the results of invoking
    the endpoint.</t>
   </list>
   <figure>
    <preamble>Example:</preamble>
    <artwork xml:space="preserve">
&lt;os:DataRequest key="PagedFriends" method="people.get" userId="@owner" groupId="@friends" startIndex="40" count="20"/&gt;
</artwork>
   </figure></t>
  </section>
  <section title="Tag: &lt;os:HttpRequest&gt;"
           anchor="HttpRequest">
   <t>Request for arbitrary URL data, equivalent to
   gadgets.io.makeRequest().</t>
   <t>This tag has additional attributes to match the functionality of 
   <xref target="GadgetsSpec">gadgets.io.makeRequest</xref>. Containers will
   typically cache the results of these requests; see the 
   <xref target="GadgetsSpec">Gadget section 4.2</xref> and 
   <xref target="osspec">OpenSocial section 4.2.6</xref> specifications for more
   information.</t>
   <t>Attributes 
   <list style="symbols">
    <t>@key {string}</t>
    <t>@href {string} The URL to send a request to.</t>
    <t>@params {string} Additional URL parameters, of format "a=b&amp;c=d".
    Optional.</t>
    <t>@method {string} HTTP method to use, one of "get" or "post". Defaults to
    "get". Optional. 
    <list style="symbols">
     <t>If method is "post", then the "@params" parameters are sent as POST
     content with a content type of "application/x-www-form-urlencoded". If
     method is "get", then the params are appended to the URL.</t>
     <t>There is no ability to set arbitrary POST content, this just determines
     whether the key/value pair parameters are sent as a POST body.</t>
    </list></t>
    <t>@format {string} Format data is returned in for processing, values are
    "json" or "text". Defaults to "json". Optional.</t>
    <t>@refreshInterval {int} Period of time for which the container can cache
    the data. If this parameter is set, it overrides the HTTP response header
    sent back from the makeRequest(). Optional.</t>
    <t>@authz. String, one of "none", "signed", "oauth", defaults to "none".
    This tells the gadget what authorization method to use when sending data to
    the remote server.</t>
    <t>@sign_viewer {boolean} Sign the request and include the current viewer
    id. Defaults to true.</t>
    <t>@sign_owner {boolean} Sign the request and include the current owner id.
    Defaults to true.</t>
    <t>@oauth_service_name {string} Identifies the service element in the
    gadget spec to use for this request. Default is "".</t>
    <t>@oauth_token_name {string} Identifies the OAuth token used to make a
    request to the service provider. Default is "".</t>
    <t>@oauth_request_token {string}. Identify a token that is pre-approved by
    the provider for access to the resource.</t>
    <t>@oauth_request_token_secret {string}. Secret associated with the
    pre-approved request token.</t>
    <t>@oauth_use_token {string}. Control whether an OAuth token should be used
    with the request. Allowed values are: "always" | "if_available" |
    "never"</t>
   </list>
   <figure>
    <preamble>Example:</preamble>
    <artwork xml:space="preserve">
&lt;os:HttpRequest key="Pets" href="http://example.com/api" authz="signed"/&gt;
</artwork>
   </figure></t>
   <t>os:HttpRequest produces a standard JSON-RPC object with "id", "error",
   and "result" properties. The "result" object is not available for 4xx or 5xx
   responses. When available, the "result" object in turn contains: 
   <list style="symbols">
    <t>content {object} If @format is "text", the string content of the
    response. If @format is "json", the parsed JSON object or array of the
    response. If a JSON response cannot be parsed, a 406 (Not Acceptable) error
    code will be produced.</t>
    <t>headers {object} An optional object with response header names as keys,
    and the header values as per-key arrays.</t>
    <t>status {int} The HTTP status code.</t>
   </list>For errors, the "message" property MUST NOT contain the response
   body, but SHOULD contain a descriptive message describing the HTTP error.
   The error MAY contain a data block providing the content and headers. 
   <figure>
    <preamble>Examples:</preamble>
    <artwork xml:space="preserve">
// @format='text' example
{result: {
 content: 'Hi there!',
 status: 200,
 headers: {'Content-Type': ['text/plain;charset=utf-8']}
}}
// @format='json' example
{result: {
 content: {'hi': 'there!'},
 status: 200,
 headers: {'Content-Type': ['application/json;charset=utf-8']}
}}
// 404 error
{error: {
 code: 404,
 message: 'Resource not found',
 // Optional data block
 data: {
  content : {'&lt;html&gt;&lt;body&gt;File not found... '},
   headers: {'Content-Type': ['text/html; charset=iso-8859-1']}
 }
}}
// Unparseable JSON
{error: {
 message: "JSON could not be parsed",
 code: 406,
 data: {
  content: {'This isn't JSON'}
 }
}}
</artwork>
   </figure></t>
  </section>
  <section title='Embedding in @type="html" content'>
   <t>When embedding data pipelining a HTML content (either in CDATA or content
   returned with Content-Type:text/html from a proxied request), data
   pipelining tags are enclosed in a &lt;script type="text/os-data"&gt; block. 
   <figure>
    <preamble>Example</preamble>
    <artwork xml:space="preserve">
&lt;Content type="html"&gt;&lt;![CDATA[ 
  &lt;script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data"&gt;
    &lt;os:PeopleRequest key="vf" userId="@viewer" groupId="@friends"/&gt;
  &lt;/script&gt;
  &lt;script type="text/os-template"&gt;
    &lt;div repeat="${vf}"&gt;${Name} is a friend.&lt;/div&gt;
  &lt;/script&gt;
]]&gt;
&lt;/Content&gt;
</artwork>
   </figure></t>
   <t>The first &lt;script&gt; block of type text/os-data must be processed by
   the data pipeline processor. Behavior is undefined with multiple script
   blocks.</t>
   <t>There is a general goal to be able to remove &lt;script&gt; blocks, but
   there are concerns in not having this &lt;script&gt; marker for processing,
   both in server and client-side implementations. We will experiment in the
   initial implementation and propose a streamlined syntax for the 1.0
   OpenSocial release if possible.</t>
  </section>
  <section title="Proxied content">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
  <section title="JavaScript API">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
  <section title="Handling of errors">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
  <section title="Handling of unrecognized tags">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
  <section title="Namespace">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
  <section title="Dynamic Parameters">
    <t>[ Moved to Core-Gadget.xml]</t>
  </section>
 </middle>
 <back>
  <references>
   <reference anchor='RFC2119'>
    <front>
     <title>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.'
             surname='Bradner'
             fullname='Scott Bradner'>
      <organization abbrev='HarvardU'>Harvard University</organization>
     </author>
     <date month='March'
           year='1997' />
    </front>
    <seriesInfo name='RFC'
                value='2119' />
   </reference>
   <reference anchor='RFC2606'>
    <front>
     <title>Reserved Top Level DNS Names</title>
     <author initials='D.'
             surname='Eastlake'
             fullname='Donald E. Eastlake 3rd'>
      <organization abbrev='IBM'>IBM</organization>
     </author>
     <author initials='A.'
             surname='Panitz'
             fullname='Aliza R. Panitz'></author>
     <date month='June'
           year='1999' />
    </front>
    <seriesInfo name='RFC'
                value='2606' />
   </reference>
   <reference anchor="GadgetsSpec"
              target="./Gadgets-API-Specification.xml">
    <front>
     <title>Gadgets API Specification 0.9</title>
     <author initials='o.'
             surname='social'
             fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='January'
           year='2009' />
    </front>
   </reference>
   <reference anchor="RPCProtocol"
              target="./RPC-Protocol.xml">
    <front>
     <title>OpenSocial RPC Protocol Specification v0.9</title>
     <author initials='o.'
             surname='social'
             fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='January'
           year='2009' />
    </front>
   </reference>
   <reference anchor='JSPEL'
              target="https://jsp.dev.java.net/spec/jsp-2_1-fr-spec-el.pdf">
    <front>
     <title>Java Server Pages Expression Language</title>
     <author initials='K.'
             surname='Chung'
             fullname='Kin-Man Chung'></author>
     <author initials='P.'
             surname='DeLisle'
             fullname='Pierre Delisle'></author>
     <author initials='M.'
             surname='Roth'
             fullname='Mark Roth'></author>
     <date month='May'
           year='2006' />
    </front>
   </reference>
   <reference anchor="osspec"
              target="./Opensocial-Specification.xml">
    <front>
     <title>OpenSocial Specification v0.9</title>
     <author initials='o.'
             surname='social'
             fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='January'
           year='2009' />
    </front>
   </reference>
  </references>
 </back>
</rfc>
