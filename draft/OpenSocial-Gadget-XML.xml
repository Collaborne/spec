<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<?rfc-ext allow-markup-in-artwork="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="opensocial-gadget-XML-specification-draft"
     xmlns:x="http://purl.org/net/xml2rfc/ext">
 <front>
  <title>OpenSocial Gadget XML Specification (draft)</title>
  <author fullname='OpenSocial and Gadgets Specification Group'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="November"
        year="2009" />
  <abstract>
   <t>This document defines the schema for gadget XML files.</t>
  </abstract>
 </front>
 <middle>
  <section title="Introduction">
   <section title="Notation and Conventions">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in 
    <xref target="RFC2119">RFC2119</xref>.</t>
    <t>XML tags and attributes are referenced using 
    <xref target="XPath">XPath</xref>abbreviated syntax. In particular,
    '@value' indicates that 'value' is an attribute of the current element, and
    'text()' refers to the child text node of the current element.</t>
   </section>
   <section title="Concepts and Terminology">
    <list style="hanging">
     <t hangText="Container">The OpenSocial Container. It is typically
     represented as a web page, but alternative forms that are capable of
     displaying a gadget, such as a personal computer desktop or a mobile
     device, are also accepted.</t>
     <t hangText="Developer">The entity that has authored the gadget.</t>
     <t hangText="User">This may refer to any OpenSocial Person, though in most
     contexts it is referring to the Viewer of the gadget at runtime.</t>
     <t hangText="Content">The primary entity in a gadget that will be
     displayed to an end user. Currently only two types of Content are
     supported by OpenSocial: HTML and URL.</t>
     <t hangText="Metadata">Any piece of information attached to a gadget, such
     as a title, author name, or description, that provides processing
     instructions to the Container, or otherwise does not directly impact
     gadget rendering.</t>
     <t hangText="Feature">A library or behavior that is provided by the
     Container and triggered by use of the 
     <xref target="RequireAndOptional">/ModulePrefs/Require or
     /ModulePrefs/Optional tags</xref>. For more detail, see 
     <xref target="Features">Features</xref>.</t>
     <t hangText="Message Bundles">XML documents containing localization
     information. For more detail, see 
     <xref target="Localization">Localization</xref>.</t>
     <t hangText="User Preferences">Referred to as "user prefs" or "prefs",
     these represent configuration values for a User of the gadget. For more
     detail, see 
     <xref target="UserPrefs">User Preferences</xref>.</t>
     <t hangText="Gadget Specification XML">Generally referred to as "gadget
     spec", or simply a "gadget", this is the XML document that contains all
     the Metadata, Features, Message Bundles, User Preferences, and Content
     necessary to display a gadget to an end user. A gadget spec is authored by
     a Developer and made available through a public web server at a
     well-defined URL so that Containers may use this URL as a canonical
     reference for retrieving updates to the gadget.</t>
     <t hangText="Formal Schema Directory">Any system used to hold a repository
     of gadgets that may be installed by Users.</t>
     <t hangText="View">A presentation mode for a gadget.</t>
    </list>
   </section>
  </section>
  <section title="XML Processing"
           anchor="XML-Processing">
   <section title="Retrieval"
            anchor="Retrieval">
    <t>XML documents SHOULD be retrieved from the source URL that the Developer
    has provided to the Container. Containers MAY fetch equivalent documents
    from alternate sources (such as caches or rewriting services) as long as
    those services are responsible for retrieving the document themselves.
    Containers SHOULD cache the gadget specification, as described in the 
    <xref target="HttpCaching">HTTP caching rules</xref>. Containers MAY use
    expired cache entries for XML documents to ensure that temporary network
    problems do not affect end users.</t>
   </section>
   <section title="Parsing"
            anchor="Parsing">
    <t>XML documents MUST be well-formed, and Containers MUST display an error
    to Users if they are asked to process a malformed document. Containers
    SHOULD provide meaningful error messages to Developers when the
    specification is malformed.</t>
    <t>Containers MUST NOT reject XML documents that are not valid (as mandated
    by the 
    <xref target="canonicalGadgetXSD">canonical</xref>and 
    <xref target="gadgetsExtendedXSD">extended</xref>schema definitions), as
    long as a valid document can be derived from the markup that exists. This
    means that Containers MUST ignore any attributes or tags that they can not
    interpret. This requirement is included to facilitate extensions to the
    schema for Container-specific uses. Containers MAY reject XML documents
    that do not provide all tags and attribute values required by the
    Container, but if they do so they MUST provide feedback to the Developer
    explaining the requirement.</t>
    <t>Containers MAY support non-standard tags and attributes, but they MUST
    be enclosed in a separate XML namespace. This namespace SHOULD reflect the
    name of the organization responsible for the Container to avoid conflicts
    with other Containers. Containers are encouraged to try to find a way to
    work within the base schema whenever possible. Whenever an equivalent
    syntax is introduced into the standard, the Container MUST deprecate the
    proprietary extension and encourage their users to migrate to the
    standardized solution.</t>
    <t>Containers MUST perform variable substitution according to the rules
    defined in 
    <xref target="VariableSubstitution">Variable Substitution</xref>.</t>
    <t>Containers MUST interpret any relative URLs found in XML attributes or
    values as relative to the gadget spec's URL. Containers MAY refuse to use
    or display the content referenced by these URLs at their discretion.</t>
   </section>
   <section title="Elements and Attributes"
            anchor="ElementsAndAttributes">
    <t>The following XML elements and attributes MUST be supported by the
    Container as mandated by the 
    <xref target="canonicalGadgetXSD">canonical</xref>and 
    <xref target="gadgetsExtendedXSD">extended</xref>schema definitions).
    Additional elements and attributes MAY be supported, but these elements are
    beyond the scope of this document.</t>
   </section>
   <section title="Module"
            anchor="Module">
    <t>The root node of a gadget XML specification is the Module element. It
    does not support any attributes and containers SHOULD NOT interpret child
    text nodes.</t>
    <section title="/ModulePrefs"
             anchor="ModulePrefs">
     <t>Serves as a container element for all Metadata, Features, and
     processing rules. For nested element descriptions, see their individual
     sections of this document.</t>
     <list style="hanging">
      <t hangText="@title">The gadget's title. Containers SHOULD use this value
      in any situation where a title bar or other identifying name for the
      gadget is required.</t>
      <t hangText="@title_url">Containers SHOULD use this value to provide a
      link target wherever @title is displayed.</t>
      <t hangText="@description">A verbose description of the gadget.
      Containers SHOULD use this value to provide a description of the gadget
      in any Directory.</t>
      <t hangText="@author">The name of the author of this gadget. Containers
      SHOULD display this value in any Directory.</t>
      <t hangText="@author_email">An email address to use as a point of contact
      for the author of the gadget. Containers MAY display this value on any
      Directory.</t>
      <t hangText="@screenshot">A link to an image of the gadget as it appears
      at run time. Containers SHOULD display this image on Directory pages to
      provide a preview of the gadget to Users.</t>
      <t hangText="@thumbnail">A link to an image representing the gadget. This
      SHOULD be smaller than @screenshot and larger than any 
      <xref target="Icons">/ModulePrefs/Link/@rel="icon"</xref>elements.</t>
      <t hangText="@height">The preferred default height of the gadget, in
      pixels. Containers SHOULD use this value to set an appropriate height for
      the gadget when it is first rendered.</t>
      <t hangText="@width">The preferred default width of he gadget, in pixels.
      Containers SHOULD use this value to set an appropriate width for the
      gadget when it is first rendered.</t>
      <t hangText="text()">This tag has child elements. Containers SHOULD NOT
      interpret child text nodes.</t>
     </list>
     <section title="/ModulePrefs/Require and /ModulePrefs/Optional"
              anchor="RequireAndOptional">
      <t>Declares Feature dependencies of the gadget. Features are defined in
      more detail at 
      <xref target="Features">Features</xref>. For /ModulePrefs/Require,
      Containers MUST display an error message if they do not support the
      feature. For /ModulePrefs/Optional, Containers MUST still render the
      gadget. Developers SHOULD use 
      <xref target="gadgets.util.hasFeature">gadgets.util.hasFeature</xref>for
      capability-based testing when using /ModulePrefs/Optional.</t>
      <list style="hanging">
       <t hangText="@feature">The name of the Feature. Containers MUST
       interpret this value as described in 
       <xref target="Features">Features</xref>. When the Container supports the
       feature, 
       <xref target="gadgets.util.hasFeature">
       gadgets.util.hasFeature(feature)</xref>MUST return true; otherwise it
       MUST return false.</t>
       <t hangText="text()">This tag has child elements. Containers SHOULD NOT
       interpret child text nodes.</t>
      </list>
      <section title="/ModulePrefs/Require/Param and /ModulePrefs/Optional/Param">
       <t>Provides configuration parameters for a Feature. Containers MUST
       populate these values in 
       <xref target="gadgets.util.getFeatureParameters">
       gadgets.util.getFeatureParameters</xref>, with @name representing the
       key, and the child text node representing the value. More details at 
       <xref target="Features">Features</xref>.</t>
       <list style="hanging">
        <t hangText="@name">The name of the parameter. Containers MUST use this
        as the key for inputs to 
        <xref target="gadgets.util.getFeatureParameters">
        gadgets.util.getFeatureParameters</xref>.</t>
        <t hangText="text()">The value for the parameter. Containers MUST use
        this as the value returned when a matching key is found in 
        <xref target="gadgets.util.getFeatureParameters">
        gadgets.util.getFeatureParameters</xref>.</t>
       </list>
      </section>
     </section>
     <section title="/ModulePrefs/Preload">
      <t>An HTTP request to pre-fetch. Containers MUST provide the results of
      HTTP fetches requested with this element in response to 
      <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>calls
      with matching inputs. For more details, see 
      <xref target="Preloading">Preloading</xref>.</t>
      <list style="hanging">
       <t hangText="@href">The URL of the request to prefetch.</t>
       <t hangText="@authz">The authentication type to use for making this
       request. Valid values are the same as for 
       <xref target="gadgets.io.AuthorizationType">
       gadgets.io.AuthorizationType</xref>, though the names are converted to
       lower case to appear more natural in XML.</t>
       <t hangText="@sign_owner">Indicates that the Owner should be passed to
       endpoints when using an authentication type that requires it. Containers
       MUST pass the owner id when this value is "true" (default).</t>
       <t hangText="@sign_viewer">Indicates that the Viewer should be passed to
       endpoints when using an authentication type that requires it. Containers
       MUST pass the viewer id when this value is "true" (default).</t>
       <t hangText="@views">A comma-separated list of Views to pre-fetch this
       request for. Containers SHOULD only perform 
       <xref target="Preloading">Preloading</xref>when an appropriate view is
       being rendered.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
     </section>
     <section title="/ModulePrefs/Icon"
              anchor="Icon">
      <t>Deprecated. Use 
      <xref target="Icons">/ModulePrefs/Link/@rel="icon"</xref>instead.</t>
      <t>A link or embedded image that serves as an icon for the gadget.</t>
      <list style="hanging">
       <t hangText="@mode">The encoding used for the icon when embedding an
       image in the Icon element's child text node. Currently, only 'base64' is
       the only supported value. Containers SHOULD treat child text nodes as a
       base64 encoded image when this attribute is provided. Otherwise, child
       text nodes should be interpreted as an image URL.</t>
       <t hangText="@type">The MIME type of the embedded icon text. Containers
       SHOULD interpret the encoded child text node using this MIME type.</t>
       <t hangText="text()">Developers MUST provide a value for the child text
       node appropriate to the @mode value. If @mode is "base64", the child
       text node MUST be a base64-encoded image in the format specified by
       @type. If @mode is missing, the child text node MUST be a valid URL
       pointing to an image file.</t>
      </list>
     </section>
     <section title="/ModulePrefs/Locale">
      <t>Provides localization information. Containers MUST honor localization
      rules as specified in 
      <xref target="Localization">Localization</xref>. Each Locale tag
      represents localization information for a single locale.</t>
      <list style="hanging">
       <t hangText="@lang">The language for this locale. Containers MUST
       interpret this as an ISO-639-1 language code, or the special (default)
       value "all", which Containers MUST interpret as applying to all
       languages, unless a more specific match is found.</t>
       <t hangText="@country">The language for this locale. Containers MUST
       interpret this as an ISO-3166-1 country code, or the special (default)
       value "all", which Containers MUST interpret as applying to all
       countries unless a more specific match is found.</t>
       <t hangText="@messages">A URL pointing to an XML document that contains
       nested 
       <xref target="msg">/ModulePrefs/Locale/msg</xref>elements. Containers
       MUST honor 
       <xref target="Retrieval">Retrieval</xref>and 
       <xref target="Parsing">Parsing</xref>rules for these files. Containers
       MUST treat all child elements of the root XML element in the document as
       though they are child nodes of /ModulePrefs/Locale</t>
       <t hangText="@language_direction">Specifies the direction to render the
       gadget in. Valid values are "rtl" (right to left) and "ltr" (left to
       right). Containers SHOULD use this value for determining the appropriate
       rendering direction for gadget content in this locale. This value
       controls language direction variables in 
       <xref target="Localization">Localization</xref>.</t>
       <t hangText="text()">This tag has child elements. Containers SHOULD NOT
       interpret child text nodes.</t>
      </list>
      <section title="/ModulePrefs/Locale/msg"
               anchor="msg">
       <t>A single localized value, keyed by @name, with the value coming from
       text().</t>
       <list style="hanging">
        <t hangText="@name">The name of the localized message. The Container
        MUST use this as the key for the JavaScript API method 
        <xref target="gadgets.Prefs.getMsg">gadgets.Prefs.getMsg</xref>and for
        MSG substitutions (see 
        <xref target="Localization">Localization</xref>).</t>
        <t hangText="text()">The value of the message. Containers MUST
        substitute this value for @name according to 
        <xref target="Localization">Localization</xref>rules, and provide this
        value for any key matching @name in 
        <xref target="gadgets.Prefs.getMsg">gadgets.Prefs.getMsg</xref>.</t>
       </list>
      </section>
     </section>
     <section title="/ModulePrefs/Link"
              anchor="Link">
      <t>Provides links to external documents or files to be used in different
      contexts. For details, see 
      <xref target="LifeCycleEvents">Life Cycle Events</xref>and 
      <xref target="Links">Links</xref>.</t>
      <list style="hanging">
       <t hangText="@rel">The relationship between this link and the document.
       Valid values are specified in <xref target="Links">Links</xref>. Containers MAY support additional
       values, but they MUST be namespaced to avoid collisions.</t>
       <t hangText="@href">The URL of the link.</t>
       <t hangText="@method">The HTTP method to use when requesting the URL. Default is GET.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
     </section>
     <section title="/ModulePrefs/OAuth"
              anchor="OAuthElement">
      <t>Supplies the Container with OAuth service configuration for the
      gadget. For details, see 
      <xref target="OAuth">OAuth</xref>. This tag has no attributes and has
      child elements. Containers SHOULD NOT interpret child text nodes.</t>
      <section title="/ModulePrefs/OAuth/Service">
       <t>A single OAuth service configuration.</t>
       <list style="hanging">
        <t hangText="@name">The name of the service, used for referencing OAuth
        services at runtime. This parameter is optional, and if unspecified
        defaults to an empty string. Gadget developers specify which OAuth
        service they wish to use by passing the service name as a parameter to 
        <xref target="gadgets.io.makeRequest">
        gadgets.io.makeRequest</xref>.</t>
        <t hangText="text()">Not used at this time.</t>
       </list>
       <section title="/ModulePrefs/OAuth/Service/Request">
        <t>Represents the OAuth request token URL. See 
        <xref target="OAuth">OAuth</xref>for details.</t>
        <list style="hanging">
         <t hangText="@url">The URL for the endpoint.</t>
         <t hangText="@method">The HTTP verb to use for making the request.
         Containers MUST use this HTTP method when sending the request to the
         service URL. This parameter is optional. If unspecified, it defaults
         to POST.</t>
         <t hangText="@param_location">One of 3 possible locations in the
         request to the service where the OAuth parameters may be passed.
         Developers MAY use this value to specify the location of OAuth-related
         parameters. The possible values are "uri-query", "auth-header", and
         "post-body", corresponding to the options described in 
         <xref target="OAuth-Core">Section 5.2 of the OAuth
         specification</xref>. The default value is "auth-header".</t>
         <t hangText="text()">Not used at this time.</t>
        </list>
       </section>
       <section title="/ModulePrefs/OAuth/Service/Access">
        <t>Represents the OAuth access token URLs. See 
        <xref target="OAuth">OAuth</xref>for details.</t>
        <list style="hanging">
         <t hangText="@url">The URL for the endpoint.</t>
         <t hangText="@method">The HTTP verb to use for making the request.
         Containers MUST use this HTTP method when sending the request to the
         service URL. This parameter is optional. If unspecified, it defaults
         to POST.</t>
         <t hangText="@param_location">One of 3 possible locations in the
         request to the service where the OAuth parameters may be passed.
         Developers MAY use this value to specify the location of OAuth-related
         parameters. The possible values are "uri-query", "auth-header", and
         "post-body", corresponding to the options described in 
         <xref target="OAuth-Core">Section 5.2 of the OAuth
         specification</xref>. The default value is "auth-header".</t>
         <t hangText="text()">Not used at this time.</t>
        </list>
       </section>
       <section title="/ModulePrefs/OAuth/Service/Authorization"
                anchor="Authorization">
        <t>The OAuth authorization URL. For details, see 
        <xref target="OAuth-Core">Section 6.2 of OAuth
        specification</xref>.</t>
       </section>
      </section>
     </section>
    </section>
    <section title="/UserPref"
             anchor="UserPref">
     <t>A User Preference specification. Containers MUST handle all default and
     required values as specified in 
     <xref target="UserPrefs">User Preferences</xref>, and they SHOULD handle
     all other values if they are appropriate for the type of container.</t>
     <list style="hanging">
      <t hangText="@name">The name of the preference. Containers MUST provide
      the current value of the preference under this key in the JavaScript API 
      <xref target="gadgets.Prefs.getPref">gadgets.Prefs.getPref</xref>and all
      variants. This is also the key used when performing UP substitutions (see
      
      <xref target="Localization">Localization</xref>).</t>
      <t hangText="@datatype">The data type for this preference. Valid values
      are "string", "hidden", "bool", "list", and "number". The default value
      is "string". Containers SHOULD interpret datatype as specified in 
      <xref target="UserPrefs">User Preferences</xref>when rendering any user
      interface components for Users.</t>
      <t hangText="@display_name">The name of the preference for use when
      rendering an editing interface for prefs. Developers SHOULD use this
      value to provide a localized name for the preference as described in 
      <xref target="Localization">Localization</xref>. Containers SHOULD use
      this value to render any editing interfaces for Users.</t>
      <t hangText="@default_value">A default value for this preference.
      Containers MUST provide this value for any calls to 
      <xref target="gadgets.Prefs.getPref">gadgets.Prefs.getPref</xref>and all
      variants whenever the key matches @name.</t>
      <t hangText="@required">Whether or not a valid value needs to be set for
      this preference in order for the gadget to function correctly. Valid
      values are "true" and "false" (default). If the value is "true",
      Containers SHOULD display an error message or a prompt if there is no
      valid value stored.</t>
      <t hangText="text()">This tag has child elements. Containers SHOULD NOT
      interpret child text nodes.</t>
     </list>
     <section title="/UserPref/EnumValue">
      <t>A single value that serves as a constraint on User Preferences when
      /UserPref/@datatype is "enum". Containers SHOULD use EnumValue elements
      to present Users with a menu when rendering a preferences interface. For
      details on handling enum preferences, see 
      <xref target="UserPrefs">User Preferences</xref>.</t>
      <list style="hanging">
       <t hangText="@value">The value for this enumeration element.</t>
       <t hangText="@display_value">A textual representation of @value.
       Defaults to the value of @value. Containers SHOULD display this value in
       place of @value when rendering a user interface for editing
       preferences.</t>
       <t hangText="text()">Not used at this time.</t>
      </list>
     </section>
    </section>
    <section title="/Content"
             anchor="ContentElement">
     <t>Contains the run time portion of the gadget.</t>
     <list style="hanging">
      <t hangText="@type">The type of content included in the body of this
      element. Valid values are "html" and "url". Containers MUST interpret the
      body of this element according to the specific processing rules for each
      type.</t>
      <t hangText="@href">A URL pointing to an external file containing the
      body of this element. If @type is "url", this value is REQUIRED. If @type
      is "url", this value represents an external document that SHOULD be
      presented directly to Users without filtering, typically by rendering an
      html IFRAME element with @href as the "src" attribute. If @type is
      "html", the external file is to be retrieved from the target URL and
      interpreted as though the contents were the body of this element.</t>
      <t hangText="@preferred_height">The suggested default height, in pixels,
      to use when rendering this gadget. Containers SHOULD use this value as
      the default height for a gadget in any environment that allows gadgets to
      have variable heights.</t>
      <t hangText="@preferred_width">The suggested default width, in pixels, to
      use when rendering this gadget. Containers SHOULD use this value as the
      default width for a gadget in any environment that allows gadgets to have
      variable widths.</t>
      <t hangText="@view">The view(s) to include this content for. See 
      <xref target="Views">Views</xref>for detailed processing
      instructions.</t>
      <t hangText="text()">Contains data in an appropriate format to satisfy
      the requirements for @type. When @type is "html", if no @href is
      specified, this value MUST be a block of html.</t>
     </list>
    </section>
   </section>
  </section>
  <section title="Variable Substitution"
           anchor="VariableSubstitution">
   <t>Variables may be substituted into a gadget by replacing special variable
   tokens with an appropriate value defined elsewhere in the spec. Tokens take
   the form __&lt;TYPE&gt;_&lt;key&gt;__. For all substitutions, the full token
   is to be replaced by a value for the following values of &lt;TYPE&gt;:</t>
   <list style="hanging">
    <t hangText="MSG">See 
    <xref target="Localization">Localization</xref>BIDI See 
    <xref target="Localization">Localization</xref>MODULE Currently only one
    &lt;key&gt; is supported; "ID". Containers SHOULD provide a unique value
    for ID for each instance of a gadget displayed simultaneously.</t>
    <t hangText="UP">See 
    <xref target="UserPrefs">User Preferences</xref>. Whenever there is no
    value for a token declared in the gadget, Containers SHOULD still replace
    the token with an empty string. Containers MUST NOT replace tokens with an
    unknown TYPE with an empty string. Instead, the token should be left in the
    gadget in it's original form.</t>
   </list>
   <t>Containers MUST perform substitution on all elements and attributes
   defined in 
   <xref target="ElementsAndAttributes">Elements and Attributes</xref>, with
   the exceptions of /ModulePrefs/Locale (and children), or any element with an
   explicit enumeration. Containers MUST NOT perform substitution on the raw
   text of the XML. Containers SHOULD perform substitution on any custom
   elements or fields that they support.</t>
   <t>Containers MUST perform MSG substitutions in the order listed above.
   Containers MUST substitute BIDI, MODULE, and UP tokens after substituting
   MSG values, but they MUST NOT recursively substitute any other tokens.</t>
  </section>
  <section title="Localization"
           anchor="Localization">
   <t>Localization of a gadget is achieved primarily through 
   <xref target="VariableSubstitution">Variable Substitution</xref>, using the
   MSG token.</t>
   <t>To determine appropriate keys and values for substitution, Containers
   MUST select an appropriate /ModulePrefs/Locale based on the following
   rules:</t>
   <list style="numbers">
    <t>An exact match for the language and country of the User viewing the
    gadget.</t>
    <t>An exact match for language, country = "all".</t>
    <t>Language = "all", country = "all'.</t>
   </list>
   <t>Containers MAY provide their own translations or use a third-party
   translation service if there is no appropriate Locale defined in the
   gadget.</t>
   <t>After selecting a Locale, Containers MUST replace all MSG tokens by using
   /ModulePrefs/Locale/msg/@name for keys and /ModulePrefs/Locale/msg/text()
   for values.</t>
   <t>Containers MUST perform BIDI token substitution with the following values
   if /ModulePrefs/Locale/@language_direction is "rtl":</t>
   <artwork type="example"
         xml:space="preserve">
START_EDGE: "right"
END_EDGE: "left"
DIR: "rtl"
REVERSE_DIR: "ltr"
</artwork>
   <t>Otherwise:</t>
   <artwork type="example"
         xml:space="preserve">
START_EDGE: "left"
END_EDGE: "right"
DIR: "ltr"
REVERSE_DIR: "rtl"
</artwork>
  </section>
  <section title="Preloading"
           anchor="Preloading">
   <t>Containers SHOULD pre-fetch all HTTP resources specified by
   /ModulePrefs/Preload elements. When honoring the preloading mechanism,
   Containers MUST convert the results of the prefetching operation into a
   temporary object that is stored and accessed at runtime via 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>.
   Containers MUST only consider a makeRequest call to map to a Preload when
   all of the following conditions are met: 
   <t>/ModulePrefs/Preload/@href matches the "url" parameter of 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>.</t>
   <t>/ModulePrefs/Preload/@authz matches one of the valid parameters for 
   <xref target="gadgets.io.AuthorizationType">
   gadgets.io.AuthorizationType</xref>, converted to lower case.</t>
   <t>/ModulePrefs/Preload/@sign_owner matches the value passed for 
   <xref target="gadgets.io.RequestParameters.SIGN_OWNER">
   gadgets.io.RequestParameters.SIGN_OWNER</xref></t>
   <t>/ModulePrefs/Preload/@sign_viewer matches the value passed for 
   <xref target="gadgets.io.RequestParameters.SIGN_VIEWER">
   gadgets.io.RequestParameters.SIGN_VIEWER</xref></t>
   <t>/ModulePrefs/Preload/@views matches the current view (the views attribute
   is a comma-separated list of matching views).</t></t>
  </section>
  <section title="Views"
           anchor="Views">
   <t>A View represents a presentation mode for a gadget. Containers SHOULD
   select a view that matches the current display context as closely as
   possible. For example, if a Gadget has a View named "profile", Containers
   SHOULD use this View when rendering the gadget on a page that displays
   information about a User.</t>
   <t>In order to assemble a View, Containers MUST concatenate all elements
   with the same value for /Content/@view together (in source order). If
   /Content/@view is a comma-separated list, each item in the list is to be
   interpreted as a unique value for @view, and grouped accordingly.</t>
   <t>Containers MUST NOT concatenate together any Views where /Content/@type
   is "url".</t>
   <t>When /Content/@type is "html" and /Content/@href is provided, Containers
   MUST make an HTTP GET request to the URL specified by @href, and interpret
   the response body as though it were /Content/text().</t>
   <t>When /Content/@type is "url", Containers MUST display a direct view of
   the value for /Content/@href (for a web context, this SHOULD be an HTML
   iframe). The Container MUST append 3 query string parameters to the URL: 
   <list>
    <list style="hanging">
     <t hangText="lang">The language of the User viewing the gadget (valid
     values are the same as for /ModulePrefs/Locale/@lang).</t>
     <t hangText="country">The country of the User viewing the gadget. (valid
     values are the same as for /ModulePrefs/Locale/@country).</t>
     <t hangText="libs">A relative URL that points to any JavaScript files
     necessary to satisfy the 
     <xref target="Features">Features</xref>referenced by the Gadget.</t>
    </list>
   </list></t>
   <t>Containers MAY apply transformations to the final view before rendering
   it to a User.</t>
   <t>Containers MUST perform 
   <xref target="VariableSubstitution">Variable Substitution</xref> on the final
   assembled content section when @type is "html".</t>
     <t>Containers may define their own views, but the specification defines
     the following standard views in the gadgets.views.View Type object: 
     <list style="symbols">
      <t>Profile - A gadget on the profile view is rendered alongside other
      applications in the user's profile, so it will be smaller and can't
      support passing URL parameters from the container to the gadget.</t>
      <t>Canvas - A gadget in the canvas view is rendered by itself, so it will
      have lots of real estate and URL parameters passed to the container page
      can be forwarded to the gadget.</t>
      <t>Home - A gadget in the home view is rendered on a private "homepage"
      where the OWNER is always the same person as the VIEWER. There may be
      multiple gadgets present in this view.</t>
      <t>Preview - A gadget in the preview view does not have access to either
      the OWNER or VIEWER objects. This view is intended to provide "test
      drive" functionality so that gadgets can demonstrate functionality for
      potential users</t>
     </list>
    </t>
  </section>
  <section title="User Preferences"
           anchor="UserPrefs">
   <t>Containers MUST interpret 
   <xref target="UserPref">/UserPref</xref>elements by making each preference
   available to the Gadget through the 
   <xref target="gadgets.Prefs">gadgets.Prefs</xref>library. Containers MUST
   treat 
   <xref target="UserPref">/UserPref/@name</xref>as the keys for indexing into
   stored preference values when invoking 
   <xref target="gadgets.Prefs.getPref">gadgets.Prefs.getPref</xref>or any of
   its variants.</t>
   <t>Containers MUST perform 
   <xref target="VariableSubstitution">Variable Substitution</xref>for user
   preferences by treating /UserPref/@name as the key in the token and the
   stored value for the preference as the replacement value.</t>
   <t>Containers MUST provide /UserPref/@default_value as the value for the
   preference when the User or Gadget has not set a value explicitly.</t>
   <t>Containers SHOULD support the following datatypes: 
   <list>
    <list style="hanging">
     <t hangText="string">A string accessed by gadgets.Prefs.getString. Default
     data type.</t>
     <t hangText="bool">Evaluates to true or false when accessed by
     gadgets.Prefs.getBool()</t>
     <t hangText="enum">a list of values specified by /UserPref/EnumValue
     elements. Current value is accessed by gadgets.Prefs.getString()</t>
     <t hangText="hidden">a non-visible string that is not user editable but
     can be accessed by gadgets.Prefs.getString()</t>
     <t hangText="list">a pipe-delimited (|) string of values, returned as a
     JavaScript array when accessed by gadgets.Prefs.getArray().</t>
    </list>
   </list></t>
   <t>Containers SHOULD provide a user interface so that all visible User
   Preferences (any type other than "hidden") may be modified by the User of
   the Gadget.</t>
  </section>
  <section title="Features"
           anchor="Features">
   <t>A Feature is a set of processing instructions and JavaScript libraries
   that provides some specific functionality for a Gadget. They are declared in
   the gadget spec using 
   <xref target="RequireAndOptional">/ModulePrefs/Require and
   /ModulePrefs/Optional</xref>.</t>
   <t>Containers MUST honor the feature-specific rules for any Feature that
   they claim to support. Any Feature not specified in this document SHOULD
   provide an external specification for processing so that implementations
   will be correct.</t>
   <t>Containers MUST display an error message for any "required" feature
   requested by the Gadget that is not supported.</t>
   <t>Containers MUST only return true for 
   <xref target="gadgets.util.hasFeature">gadgets.util.hasFeature</xref>if they
   actually support the given feature name. Containers MAY only return true for
   this function if the feature was also requested in the Gadget spec.</t>
   <section title="Core Features">
    <t>In addition to explicitly requested features, there is one implicit
    feature (referred to as "core") that is always present in every Gadget.
    This "core" feature MUST make the following JavaScript libraries available
    to Gadgets at runtime without any additional requirements:</t>
    <list style="symbols">
     <t>
      <xref target="gadgets.io">gadgets.io</xref>
     </t>
     <t>
      <xref target="gadgets.util">gadgets.util</xref>
     </t>
     <t>
      <xref target="gadgets.Prefs">gadgets.Prefs</xref>
     </t>
     <t>
      <xref target="gadgets.json">gadgets.json</xref>
     </t>
    </list>
   </section>
   <section title="Optional Features">
    <t>Containers claiming support for the following Features MUST provide the
    Gadget with the JavaScript library from the table below. See the JavaScript
    documentation for each feature for any additional requirements. Containers
    SHOULD support as many of these features as possible.</t>
    <texttable align="left">
     <ttcol>Feature name</ttcol>
     <ttcol>JavaScript library</ttcol>
     <c>opensocial-X.Y</c>
     <c>
     <xref target="opensocial">opensocial</xref>(where X.Y indicates the
     desired version of OpenSocial)</c>
     <c>rpc</c>
     <c>
      <xref target="gadgets.rpc">gadgets.rpc</xref>
     </c>
     <c>pubsub</c>
     <c>
      <xref target="gadgtes.pubsub">gadgets.pubsub</xref>
     </c>
     <c>views</c>
     <c>
      <xref target="gadets.views">gadgets.views</xref>
     </c>
     <c>flash</c>
     <c>
      <xref target="gadgets.flash">gadgets.flash</xref>
     </c>
     <c>skins</c>
     <c>
      <xref target="gadgets.skins">gadgets.skins</xref>
     </c>
     <c>dynamic-height</c>
     <c>
     <xref target="gadgets.window.adjustHeight">
     gadgets.window.adjustHeight</xref>and 
     <xref target="gadgets.window.getViewPortDimensions">
     gadgets.window.getViewportDimensions</xref></c>
     <c>settitle</c>
     <c>
      <xref target="gadgets.window.setTitle">gadgets.window.setTitle</xref>
     </c>
     <c>minimessage</c>
     <c>
      <xref target="gadgets.MiniMessage">gadgets.MiniMessage</xref>
     </c>
     <c>tabs</c>
     <c>
      <xref target="gadgets.Tabs">gadgets.Tabs</xref>
     </c>
    </texttable>
   </section>
  </section>
  <section title="Links"
           anchor="Links">
   <t>Gadgets MAY specify any number of 
   <xref target="Link">/ModulePrefs/Link</xref> elements, which the Container
   SHOULD process according to rules specific to the value of
   /ModulePrefs/Link/@rel. Containers MAY support additional links, but they
   should pick an appropriate namespace for the rel attribute so as to not
   conflict with the standard. Containers MUST NOT support non-standard rel
   attributes with any of the following prefixes: "opensocial", "gadgets", or
   "events".</t>
   <section title="Icons"
            anchor="Icons">
    <t>When the value for 
    <xref target="Link">/ModulePrefs/Link/@rel</xref> is "icon", Containers
    SHOULD treat the link as a reference to an image that represents an
    application icon for the Gadget. This is preferred over using 
    <xref target="Icon">/ModulePrefs/Icon</xref>, which is deprecated.</t>
   </section>
   <section title="Life Cycle Events"
            anchor="LifeCycleEvents">
    <t>Certain types of events may occur during the lifecycle of a gadget that
     are desirable yet difficult for developers to track. Such events include
     installs, uninstalls, rate limiting, directory listing changes, and
     blacklist/whitelist notifications. Whenever an "event" 
    occurs on a Container, and the Gadget has specified a value for a matching
    event name (either as the catch-all "events", or a specific event, named
    "event.eventtype", the Container MUST make an HTTP request to the specified
    URL.</t>
    <t>The request sent to the specified endpoint MUST be signed according to
    the rules in 
    <xref target="SignedFetch">Signed Fetch</xref>. Additionally, one extra
    parameter named "eventtype" MUST be passed. This value MUST be the same as
    the event name part of the 'rel' attribute.</t>
     <t>If the rel attribute is "event",
     then all events are sent to that endpoint. If the rel attribute matches
     "event.TYPE", then events of TYPE are sent to that endpoint. An
     optional method attribute can be set to POST or GET to specify how the
     request should be sent. The default is GET. 
     <figure>
      <preamble>Here are some examples:</preamble>
      <artwork xml:space="preserve">
&lt;Link rel="event" href="http://www.example.com/pingme" method="POST/&gt;
&lt;Link rel="event.addapp" href="http://www.example.com/add" /&gt;
&lt;Link rel="event.removeapp" href="http://www.example.com/remove" /&gt;
</artwork>
     </figure></t>
     <t>The following event types are defined. Container custom events SHOULD
     be designated with a domain name prefix to avoid namespace collisions. 
     <texttable align="left">
      <ttcol align="left">Event</ttcol>
      <ttcol align="left">Description</ttcol>
      <c>addapp</c>
      <c>Sent when a user adds an app.  Supports the following parameters:
         <list style="symbols">
          <t>id - identifies user(s) who have installed the app. May be repeated.</t>
          <t>from - designates how the user added this app. Values are "invite",
      "gallery", "external". Optional.</t>
       </list>
      </c>
      <c>removeapp</c>
      <c>Sent when a user removes an app. Supports the following parameters:
       <list style="symbols">
        <t>id - identifies user(s) who have removed the app. May be repeated.</t>
       </list>
      </c>
      <c>app</c>
      <c>Sent when the container changes the status of the app. Supports the following parameters:
       <list style="symbols">
        <t>action - designates the action performed on the app. Values
      are "enabled", "disabled", and "approved".</t>
        <t>reason - identifies the reason for the action. Values are "policy", "quota", "maintenance".
      Optional.</t>
       </list>
      </c>
      <c>invite</c>
      <c>Sent when a user invites other users to add the app. Supports the following parameters:
       <list style="symbols">
        <t>id - indicates users who have been invited.</t>
        <t>from_id - indicates the user who sent the invitation.</t>
       </list>
      </c>
     </texttable></t>
    </section>
  </section>

  <section title="Signed Fetch"
           anchor="SignedFetch">
   <t>Containers MUST support signing of HTTP requests for 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>, 
   <xref target="LifeCycleEvents">Life Cycle Events</xref>, and 
   <xref target="Preloading">Preloading</xref>. The container does this by
   doing the following: 
   <list style="numbers">
    <t>Removing any request parameters with names that begin with oauth,
    xoauth, or opensocial (case insensitive).</t>
    <t>Adding the following parameters to the request query string:</t>
    <list style="hanging">
     <t hangText="opensocial_viewer_id">Optional. The ID of the current viewer,
     which matches the getId() value on the viewer person object.</t>
     <t hangText="opensocial_owner_id">Required. The ID of the current owner,
     which matches the getId() value on the owner person object.</t>
     <t hangText="opensocial_app_url">Required. The URL of the application
     making the request. Containers may alias multiple application URLs to a
     single canonical application URL in the case where an application changes
     URLs.</t>
     <t hangText="opensocial_instance_id">Optional. An opaque identifier used
     to distinguish between multiple instances of the same application in a
     single container. If a container does not allow multiple instances of the
     same application to coexist, this parameter may be omitted. The
     combination of opensocial_app_url and opensocial_instance_id uniquely
     identify an instance of an application in a container.</t>
     <t hangText="opensocial_app_id">Optional. An opaque identifier for the
     application, unique to a particular container. Containers that wish to
     maintain backwards compatibility with the opensocial-0.7 specification may
     include this parameter.</t>
     <t hangText="xoauth_public_key">Optional. An opaque identifier for the
     public key used to sign the request. This parameter may be omitted by
     containers that do not use public keys to sign requests, or if the
     container arranges other means of key distribution with the target of the
     request.</t>
    </list>
    <t>Signing the resulting request according to section 9 of the 
    <eref target="http://oauth.net/core/1.0/#signing_process">OAuth
    specification</eref>.</t>
   </list></t>
   <t>If a container uses public keys to sign requests, the container may
   choose to use either self-signed certificates or certificates signed by a
   well-known certificate authority. If a container does not distribute its
   OAuth signing key over HTTPS, it should use a certificate signed by a
   well-known certificate authority.</t>
   <t>The commonName attribute of the certificate should match the hostname of
   the container server, and should also match the value of the
   oauth_consumer_key parameter specified in the request.</t>
   <t>The container should make its public key available for download at a
   well-known location. The location
   https://[container-hostname]/opensocial/certificates/xoauth_public_keyvalue
   is recommended.</t>
   <t>Recipients of signed requests must verify that the signature on the
   request is correct, and that the timestamp on the request is within a
   reasonable time window. A time window of 5 minutes before and after the
   current time is recommended.</t>
   <t>Recipients of signed requests may use the oauth_consumer_key and
   xoauth_public_key parameters to automatically detect when a container
   deploys new certificates. If the container deploys certificates at a
   well-known location, the recipient may automatically download the new
   certificate. Recipients that automatically download new certificates should
   cache the resulting certificates.</t>
   <t>If a container's certificate is not downloaded from
   https://[container-hostname], the recipient should verify that the
   certificate is signed by a well-known certificate authority before trusting
   the certificate.</t>
  </section>
  <section title="OAuth"
           anchor="OAuth">
   <t>Containers MUST support OAuth requests for 
   <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>. When
   proxying a Gadget's request, Containers SHOULD use an OAuth token specific
   to the gadget making the request, and specific to either the Viewer or the
   Owner of the container page. Furthermore, when proxying a gadget's request,
   Containers MAY use an OAuth Consumer key and secret specific to the gadget
   making the request, or they MAY alternatively use the container's OAuth
   consumer key and secret. For more details, see the 
   <xref target="OAuth-Core">OAuth spec</xref>.</t>
   <section title="Consumer Secrets">
    <t>It is beyond the scope of this document to specify how a Container
    obtains consumer keys and secrets for Gadgets that it may proxy requests
    for. As explained above, a Container MAY instead use its own consumer key
    and secret when making OAuth requests. A Container could even use the
    RSA_SHA1 signature method, effectively using the same consumer key and
    secret for all gadgets, and for all OAuth service providers it is proxying
    requests to.</t>
   </section>
   <section title="OAuth Tokens">
    <t>When proxying a 
    <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>of 
    <xref target="gadgets.io.AuthorizationType">
    gadgets.io.AuthorizationType</xref>'OAUTH', the container SHOULD do the
    following:</t>
    <list style="numbers">
     <t>If the container finds an appropriate OAuth access token and secret for
     the request, the Container signs the outgoing request according to the
     OAuth specification.</t>
     <t>If the container finds no appropriate OAuth access token, but an
     appropriate OAuth request token for the request, the container accesses
     the access token endpoint of the target service provider, and attempts to
     exchange the request token for an access token. If successful, the
     container then immediately uses the access token to sign the request made
     by the gadget.</t>
     <t>If the container finds neither an appropriate OAuth access token or
     request token, it accesses the request token endpoint of the target
     service provider to obtain a request token. It then returns an error
     message to the Gadget that contains, among other things, the user
     authorization URL at the target service provider. The Gadget is expected
     to redirect the User Agent to that authorization URL and re-attempt the 
     <xref target="gadgets.io.makeRequest">gadgets.io.makeRequest</xref>once
     the user has approved the OAuth access.</t>
    </list>
   </section>
  </section>
  <section title="HTTP Caching"
           anchor="HttpCaching">
   <t>Any HTTP documents retrieved by the Container on behalf of the Developer
   or User MAY be cached. If the Container caches a document, it MUST implement
   the caching policy as defined by RFC2616. Additionally, containers that
   cache documents SHOULD provide a mechanism to bypass the caching policy
   entirely to facilitate development, such as a "nocache" query string
   parameter passed to the page that the gadget is rendered on.</t>
  </section>
 </middle>
 <back>
  <references>
   <reference anchor='RFC2119'>
    <front>
     <title>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.'
             surname='Bradner'
             fullname='Scott Bradner'>
      <organization abbrev='HarvardU'>Harvard University</organization>
     </author>
     <date month='March'
           year='1997' />
    </front>
    <seriesInfo name='RFC'
                value='2119' />
   </reference>
   <reference anchor='XPath'
              target='http://www.w3.org/TR/xpath'>
    <front>
     <title>XML Path Language</title>
     <author initials='J.'
             surname='Clark'
             fullname='James Clark'>
      <organization abbrev='W3C'>World Wide Web Consortium</organization>
     </author>
     <date month='November'
           year='1999' />
    </front>
   </reference>
   <reference anchor='OAuth-Core'
              target='http://oauth.net/core/1.0a'>
    <front>
     <title>OAuth Core 1.0 Revision A</title>
     <author fullname='OAuth Core Workgroup'>
      <organization abbrev='OAuth'>OAuth Core Workgroup</organization>
     </author>
     <date month='November'
           year='1999' />
    </front>
   </reference>
  </references>
 </back>
</rfc>
