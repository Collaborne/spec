<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<?rfc-ext allow-markup-in-artwork="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="opensocial-social-api-server-specification-draft"
     xmlns:x="http://purl.org/net/xml2rfc/ext">
 <front>
  <title abbrev="Social-API-Server">OpenSocial Social API Server Specification (draft)</title>
  <author fullname='OpenSocial and Gadgets Specification Group'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="December"
        year="2009" />
  <abstract>
   <t>This document describes a method for making social network information
   and services programatically available on the internet.</t>
  </abstract>
 </front>
 <middle>
  <section title="Introduction">
   <section title="Requirements">
    <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
    document are to be interpreted as described in 
    <xref target="RFC2119">RFC2119</xref>.</t>
    <t>An implementation is not compliant if it fails to satisfy one or more of
    the MUST or REQUIRED level requirements for the protocols it
    implements.</t>
   </section>
   <section title="Terminology">
    <t>This specification uses a number of terms to refer to the roles played
    by participants in, and objects of, an OpenSocial implementation.</t>
    <list style="hanging">
     <t hangText="container">An implementor of the 
     <xref target="Gadget-Specification">Gadget specification</xref> </t>
    </list>
   </section>
  </section>
  <section title="Notational Conventions and Generic Grammar">
   <section title="Conventions">
    <t>Domain name examples use 
    <xref target="RFC2606">RFC2606</xref>.</t>
   </section>
   <section title="Augmented BNF">
    <t>The grammatical rules in this document are to be interpreted as
    described in <xref target="RFC2234">RFC4234</xref> (Augmented Backus-Naur 
    Form).</t>   
    <t>The following constructs are introduced in this document to augment 
    RFC4234:</t>
    <list style="hanging">
     <t hangText="{rule1 rule2}">
      <t>Elements enclosed in braces (squiggly brackets) are treated as a
      single, UNORDERED element. Its contents may occur in any order. Hence: 
      <artwork type="abnf" xml:space="preserve">{elem foo} bar</artwork>
      would match (elem foo bar) and (foo elem bar).</t>
      <t>NOTE: Specifying alternatives is quite different from specifying set
      grouping. Alternatives indicate the matching of exactly one (sub-)rule
      out of the total grouping. The set mechanism indicates the matching of a
      string which contains all of the elements within the group; however the
      elements may occur in any order.</t>
     </t>
     <t hangText="#rule">A construct "#" is defined, similar to "*", for
     defining lists of elements. The full form is "&lt;n&gt;#&lt;m&gt;element"
     indicating at least &lt;n&gt; and at most &lt;m&gt; elements, each
     separated by one or more commas (",") and OPTIONAL linear white space
     (LWS). This makes the usual form of lists very easy; a rule such as 
     <artwork type="inline" xml:space="preserve">( *LWS element *( *LWS "," *LWS element ))</artwork>
     can be shown as 
     <artwork type="inline" xml:space="preserve">1#element</artwork>
     Wherever this construct is used, null elements are allowed, but do
     not contribute to the count of elements present. That is, "(element), ,
     (element) " is permitted, but counts as only two elements. Therefore, 
     where at least one element is required, at least one non-null element MUST 
     be present.  Default values are 0 and infinity so that "#element" allows 
     any number, including zero; "1#element" requires at least one; and 
     "1#2element" allows one or two.</t>
     <t hangText="&amp;rule">A construct "&amp;" is defined, similar to "#",
     which uses an ampersand (&amp;) instead of commas, and MUST NOT include
     linear white space between elements.</t>
     <t hangText="implied *LWS">The grammar described by this specification is
     word-based. Except where noted otherwise, linear white space (LWS) can be
     included between any two adjacent words (token or quoted-string), and
     between adjacent words and separators, without changing the interpretation
     of a field. At least one delimiter (LWS and/or separators) MUST exist
     between any two tokens, since they would otherwise be interpreted as a
     single token.</t>
    </list>
   </section>
   <section title="Basic Rules">
    <t>The following rules are used throughout this specification to describe
    basic parsing constructs. The US-ASCII coded character set is defined by 
    <xref target="RFC20" /> </t>
    <artwork type="abnf"
         xml:space="preserve">
<![CDATA[
OCTET          = <any 8-bit sequence of data>
CHAR           = <any US-ASCII character (octets 0 - 127)>
UPALPHA        = <any US-ASCII uppercase letter "A".."Z">
LOALPHA        = <any US-ASCII lowercase letter "a".."z">
ALPHA          = UPALPHA / LOALPHA
DIGIT          = <any US-ASCII digit "0".."9">
CTL            = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
CR             = <US-ASCII CR, carriage return (13)>
LF             = <US-ASCII LF, linefeed (10)>
SP             = <US-ASCII SP, space (32)>
HT             = <US-ASCII HT, horizontal-tab (9)>
<">            = <US-ASCII double-quote mark (34)>
CRLF           = CR LF
LWS            = [CRLF] 1*( SP / HT )
TEXT           = <any OCTET except CTLs, but including LWS>
COMMA          = <US-ASCII comma (44)>
      ]]>
</artwork>
   </section>
  </section>
  <section title="Protocols">
   <t>A Social API Server MUST follow the protocols defined in <xref target="Core-API-Server"/></t>
   <section title="Additional Request Parameters"
            anchor="additional-request-parameters">
    <section title="Network Distance" anchor="Request-Parameter-NetworkDistance-Value">
      <artwork type="abnf"><x:highlight>Request-Parameter-NetworkDistance-Value</x:highlight> = number</artwork>
      <t>Modifies group-relative requests (@friends,  
      etc.) to include the transitive closure of all friends up to the specified
      distance away. MAY NOT be honored by the container.</t>
    </section>
   </section>
  </section>
  <section title="Services"
           anchor="services">
   <section title="People"
            anchor="People-Service">
    <section title="Retrieve a Person"
             anchor="People-Service-RetrievePerson">
     <t>Requests and responses for retrieving a person use the following values:</t>
     <artwork type="abnf"
         xml:space="preserve">
<x:ref>REST-HTTP-Method</x:ref>       = "GET"
<x:ref>REST-URI-Fragment</x:ref>      = ( "/people/" <x:ref>OpenSocial-User-ID</x:ref> "/@self" ) |
                         ( "/people/" <x:ref>OpenSocial-User-ID</x:ref> "/" <x:ref>OpenSocial-Group-ID</x:ref> "/" <x:ref>OpenSocial-User-ID</x:ref> )
<x:ref>REST-Query-Parameters</x:ref>  = {
                          [ <x:ref>ENCODE-REST-PARAMETER</x:ref>("fields", <x:ref>Request-Parameter-Fields-Value</x:ref>) ]
                          [ <x:ref>ENCODE-REST-PARAMETER</x:ref>("format", <x:ref>Request-Parameter-Format-Value</x:ref>) ]
                         }
<x:ref>REST-Request-Payload</x:ref>   = null
<x:ref>RPC-Method</x:ref>             = "people.get"
<x:ref>RPC-Request-Parameters</x:ref> = { 
                            <x:ref>ENCODE-RPC-PARAMETER</x:ref>("userId", <x:ref>OpenSocial-User-ID</x:ref>) 
                            <x:ref>ENCODE-RPC-PARAMETER</x:ref>("groupId", "@self")
                          [ <x:ref>ENCODE-RPC-PARAMETER</x:ref>("fields", <x:ref>Request-Parameter-Fields-Value</x:ref>) ] 
                         }
<x:ref>OpenSocial-Object</x:ref>      = <x:ref>OpenSocial-Person</x:ref></artwork>
     <t>Here's an example of a REST request to retrieve a person, and the
     associated response. Note that 'format=xml' is used to specify that the response should contain XML.
     <t>HTTP Request</t>
     <artwork type="example"
         xml:space="preserve">
GET /rest/people/34KJDCSKJN2HHF0DW20394/@self?fields=name,gender&amp;format=xml HTTP/1.1
HOST api.example.org
Authorization: hh5s93j4hdidpola</artwork>
     <t>HTTP Response</t>
     <artwork type="example"
         xml:space="preserve">
HTTP/1.1 200 OK
Content-Type: text/xml
&lt;response xmlns="http://ns.opensocial.org/2008/opensocial"&gt;
  &lt;person&gt;
    &lt;id&gt;34KJDCSKJN2HHF0DW20394&lt;/id&gt;
    &lt;name&gt;
      &lt;unstructured&gt;Jane Doe&lt;/unstructured&gt;
    &lt;/name&gt;
    &lt;gender&gt;female&lt;/gender&gt;
  &lt;/person&gt;
&lt;/response&gt;</artwork>
     </t>
     <t>Here's an example of a RPC request to retrieve a person, and the
     associated response.
     <t>HTTP Request</t>
     <artwork type="example"
         xml:space="preserve">
POST /rpc HTTP/1.1
Host: api.example.org
Authorization: hh5s93j4hdidpola
Content-Type: application/json
{
  "method" : "people.get",
  "id" : "somePerson"
  "params" : {
    "userId" : "34KJDCSKJN2HHF0DW20394",
    "groupId" : "@self",
    "fields" : [ "name", "gender" ]
  }
}</artwork>
     <t>HTTP Response</t>
     <artwork type="example"
         xml:space="preserve">
HTTP/1.x 207 Multi-Status
Content-Type: application/json
{
   "id" : "somePerson"
   "result" : {
     "id" : "34KJDCSKJN2HHF0DW20394",
     "name" : { "unstructured" : "Jane Doe"},
     "gender" : "female"
   }
}</artwork>
     </t>
    </section>
    <section title="Retrieve a list of People"
             anchor="People-Service-RetrievePeople">
     <t>Requests and responses for retrieving a list of people use the following values:</t>
     <artwork type="abnf"
         xml:space="preserve">
<x:ref>REST-HTTP-Method</x:ref>       = "GET"
<x:ref>REST-URI-Fragment</x:ref>      = "/people/" <x:ref>OpenSocial-User-ID</x:ref> "/" <x:ref>OpenSocial-Group-ID</x:ref>
<x:ref>REST-Query-Parameters</x:ref>  = {
                          [( "fields=" <x:ref>Query-Parameter-Fields</x:ref> )]
                          [( "format=" <x:ref>Query-Parameter-Format</x:ref> )]
                         }
<x:ref>REST-Request-Payload</x:ref>   = null
<x:ref>RPC-Method</x:ref>             = "people.get"
<x:ref>RPC-Request-Parameters</x:ref> = { 
                          <x:ref>RPC-Request-Parameter</x:ref>("userId", <x:ref>OpenSocial-User-ID</x:ref>) 
                          <x:ref>RPC-Request-Parameter</x:ref>("groupId", <x:ref>OpenSocial-Group-ID</x:ref>)
                          [ <x:ref>RPC-Request-Parameter</x:ref>("fields", <x:ref>Query-Parameter-Fields</x:ref>) ] 
                         }
<x:ref>OpenSocial-Object</x:ref>      = <x:ref>OpenSocial-Collection</x:ref>&lt;<x:ref>OpenSocial-Person</x:ref>&gt;</artwork>
    <t>Note that the OpenSocial-Group-ID can't be '@self' in these requests or only a single OpenSocial-Person will be returned.</t>  
    <t>The RPC protocol also supports retrieving a list of users by specifying a comma-separated list of user IDs in the request.  In this case, the request uses the following values:</t>
    <artwork type="example">
<x:ref>RPC-Method</x:ref>             = "people.get"
<x:ref>RPC-Request-Parameters</x:ref> = { 
                          <x:ref>RPC-Request-Parameter</x:ref>("userId", <x:ref>OpenSocial-User-ID-List</x:ref>) 
                          <x:ref>RPC-Request-Parameter</x:ref>("groupId", "@self")
                          [ <x:ref>RPC-Request-Parameter</x:ref>("fields", <x:ref>Query-Parameter-Fields</x:ref>) ] 
                         }
<x:ref>OpenSocial-Object</x:ref>      = <x:ref>OpenSocial-Collection</x:ref>&lt;<x:ref>OpenSocial-Person</x:ref>&gt;</artwork>    
    <t>Here's an example of a REST request to retrieve the list of a user's friends, and the associated response. Note that 'format=xml' is used to specify that the response should contain XML.
     <t>HTTP Request</t>
     <artwork type="example"
         xml:space="preserve">
GET /rest/people/92WEGDFEWSS2GS0DW274EQ/@friends?fields=name,gender&amp;format=xml HTTP/1.1
HOST api.example.org
Authorization: hh5s93j4hdidpola</artwork>
     <t>HTTP Response</t>
     <artwork type="example"
         xml:space="preserve">
HTTP/1.1 200 OK
Content-Type: text/xml
&lt;response xmlns="http://ns.opensocial.org/2008/opensocial"&gt;
  &lt;startIndex&gt; 1 &lt;/startIndex&gt;
  &lt;itemsPerPage&gt; 2 &lt;/itemsPerPage&gt;
  &lt;totalResults&gt; 100 &lt;/totalResults&gt;
  &lt;entry&gt;
    &lt;person&gt;
      &lt;id&gt;34KJDCSKJN2HHF0DW20394&lt;/id&gt;
      &lt;name&gt;
        &lt;unstructured&gt;Jane Doe&lt;/unstructured&gt;
      &lt;/name&gt;
      &lt;gender&gt;female&lt;/gender&gt;
    &lt;/person&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;person&gt;
      &lt;id&gt;VMK92BFH3DNWRYX39673DF&lt;/id&gt;
      &lt;name&gt;
        &lt;unstructured&gt;John Smith&lt;/unstructured&gt;
      &lt;/name&gt;
      &lt;gender&gt;male&lt;/gender&gt;
    &lt;/person&gt;
  &lt;/entry&gt; 
&lt;/response&gt;</artwork>
     </t>
     <t>Here's an example of a RPC request to retrieve the list of a user's friends, and the associated response.
     <t>HTTP Request</t>
     <artwork type="example"
         xml:space="preserve">
POST /rpc HTTP/1.1
Host: api.example.org
Authorization: hh5s93j4hdidpola
Content-Type: application/json
{
  "method" : "people.get",
  "id" : "someFriends"
  "params" : {
    "userId" : "92WEGDFEWSS2GS0DW274EQ",
    "groupId" : "@friends",
    "fields" : "name, gender"
  }
}</artwork>
     <t>HTTP Response</t>
     <artwork type="example"
         xml:space="preserve">
HTTP/1.x 207 Multi-Status
Content-Type: application/json
{
   "id" : "someFriends"
   "result" : {
     "startIndex" : 1
     "itemsPerPage" : 2
     "totalResults" : 100
     "entry" : [
       {
         "id" : "34KJDCSKJN2HHF0DW20394",
         "name" : { "unstructured" : "Jane Doe"},
         "gender" : "female"
       },
       {
         "id" : "VMK92BFH3DNWRYX39673DF",
         "name" : { "unstructured" : "John Smith"},
         "gender" : "female"
       }
     ]
   }
}</artwork>
     </t>
    </section>
    <section title="Retrieve a list of supported Person fields" anchor="People-Service-GetSupportedFields">
    </section>
    <section title="Retrieve a list of deleted friends" anchor="People-Service-GetDeletedFriends">
    </section>
    <section title="Create a Person"
             anchor="People-Service-CreatePerson"></section>
    <section title="Update a Person"
             anchor="People-Service-UpdatePerson"></section>
    <section title="Delete a Person"
             anchor="People-Service-DeletePerson"></section>
    <section title="Create a list of Friends"
             anchor="People-Service-CreateFriends"></section>
    <section title="Update a list of Friends"
             anchor="People-Service-UpdateFriends"></section>
    <section title="Delete a list of Friends"
             anchor="People-Service-DeleteFriends"></section>
   </section>
   <section title="Groups"
            anchor="Groups-Service">
    <section title="Create a list of Groups"
             anchor="Groups-Service-CreateGroups"></section>
    <section title="Retrieve a list of Groups"
             anchor="Groups-Service-RetrieveGroups"></section>
    <section title="Update a list of Groups"
             anchor="Groups-Service-UpdateGroups"></section>
    <section title="Delete a list of Groups"
             anchor="Groups-Service-DeleteGroups"></section>
   </section>
   <section title="Activities"
            anchor="Activities-Service">
   </section>
   <section title="AppData"
            anchor="AppData-Service">
   </section>
   <section title="Albums"
            anchor="Albums-Service">
   </section>
   <section title="MediaItems"
            anchor="MediaItems-Service">
   </section>
  </section>
 </middle>
 <back>
  <references>
   <reference anchor='RFC2119'>
    <front>
     <title>Key words for use in RFCs to Indicate Requirement Levels</title>
     <author initials='S.'
             surname='Bradner'
             fullname='Scott Bradner'>
      <organization abbrev='HarvardU'>Harvard University</organization>
     </author>
     <date month='March'
           year='1997' />
    </front>
    <seriesInfo name='RFC' value='2119' />
   </reference>
   <reference anchor='RFC2606'>
    <front>
     <title>Reserved Top Level DNS Names</title>
     <author initials='D.'
             surname='Eastlake'
             fullname='Donald E. Eastlake 3rd'>
      <organization abbrev='IBM'>IBM</organization>
     </author>
     <author initials='A.'
             surname='Panitz'
             fullname='Aliza R. Panitz'></author>
     <date month='June'
           year='1999' />
    </front>
    <seriesInfo name='RFC'
                value='2606' />
   </reference>
   <reference anchor="Core-Data"
              target="./Core-Data.xml">
    <front>
     <title>OpenSocial Core Data Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
   <reference anchor="Core-API-Server"
              target="./Core-API-Server.xml">
    <front>
     <title>OpenSocial Core API Server Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
   <reference anchor="Social-Data"
              target="./Social-Data.xml">
    <front>
     <title>OpenSocial Social Data Specification</title>
     <author fullname='OpenSocial and Gadgets Specification Group &lt;opensocial-and-gadgets-spec@googlegroups.com&gt;'>
     </author>
     <date month='December'
           year='2009' />
    </front>
   </reference>
  </references>
 </back>
</rfc>
