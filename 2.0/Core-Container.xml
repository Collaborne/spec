<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc ipr="full3978"
     docName="core-container-specification-2-0-INCUBATING"
     xmlns:x="http://purl.org/net/xml2rfc/ext">
 <front>
  <title abbrev="Core-Container">Core Container Specification 2.0 INCUBATING</title>
  <author fullname='OpenSocial and Container Specification Group'>
   <address>
    <email>opensocial-and-gadgets-spec@googlegroups.com</email>
   </address>
  </author>
  <date month="March" year="2011" />
  <area>General</area>
  <keyword>OpenSocial</keyword>
  <keyword>Core Container</keyword>
 </front>
 <middle>
  <section title="Definitions">
   <section title="Gadget">
    <t>
     A web-based software component based on HTML, CSS and JavaScript. It allows
     developers to write modularized, reusable web applications that work
     anywhere on the web without modification.
    </t>
   </section>
   <section title="Container">
    <t>
     A context into which a gadget is embedded into. This is typically an HTML
     page, served by an arbitrary web-service, viewable by a browser.
    </t>
   </section>
   <section title="Security token">
    <t>
     A security mechanism to allow gadgets to make secure connections to server
     end points for data that may be valid only for the current user's context.
     This commonly appears as a query/fragment param st= in the iframe URL.
    </t>
   </section>
  </section>

  <section title="Overview">
   <t>
    Common container is a lightweight gadget-and-container framework, based on
    JavaScript and server-driven end-point. Its mission is to simplify container
    and gadget integration model. It allow container developers to easily
    transform their page into a gadget-compliant container that can properly
    embed gadgets rendered by a gadget service. It does not address
    container-specific business-logic and layout.
   </t>
   <t>
    This document acts as a starting point for a formal specification, to be
    proposed for OpenSocial 2.0. It is determined to be needed at the
    OpenSocial 2.0 kick-off meeting. The goal is to compile requirements,
    describe use cases, identify original authors, and paves way for future
    developments.
   </t>
  </section>

  <section title="Compliance">
   <t>
    To be a gadget-compliant container, a container must be able to satisfy
    requirements defined in this section.
   </t>
   <section title="Lightweight">
    <t>
     The framework is installed in a container page by a script tag, with its
     source pointing to the common container JS. This also provides a near-zero
     barrier to entry for new container clients.
    </t>
   </section>
   <section title="Gadget navigation" anchor="GadgetNavigation">
    <t>
     The framework lives in the container page to provide API to container
     developers to navigate/open and close gadgets on the page, in a way that
     ensures opened gadgets continue to work, until they are closed.
    </t>
   </section>
   <section title="Setup gadgets.rpc">
    <t>
     Sets up container for gadget-to-container, container-to-gadget and
     gadget-to-gadget communication via gadgets.rpc. This involves setting up
     relay files and registering callbacks/hooks, to ensure the wiring is
     all setup to receive all gadgets.rpc mediated commands. Increasing height
     of gadget is a common example.
    </t>
   </section>
   <section title="Track latency">
    <t>
     The framework allows container developers to track the latency times
     required to do a gadget navigation. This involves starting a timer when a
     gadget navigation is requested and stopping the timer when a gadget is
     fully rendered. Latency times can be broadcasted to the container for
     container-specific consumption.
    </t>
   </section>
   <section title="Auto-refresh security tokens">
    <t>
     Its lifespan starts from time when it is instantiated to time when the
     page is navigated away. AJAX-y pages will tend to have longer lifespan.
     To avoid expired security tokens, the framework will fetch for new tokens
     at a regular interval and have the new token pushed to the gadget that
     requires tokens to be updated.
    </t>
   </section>
   <section title="Promote coherent changes">
    <t>
     Changes in a gadget render may require simultaneous change on the container
     implementation. This framework will allow new container changes to be
     picked up at the same time when a gadget render service is updated,
     avoiding version-skew. Additionally, it will also promote all common-
     container-enabled pages to become updated at the same time.
    </t>
   </section>
  </section>

  <section title="Javascript API Reference">
   <section title="container" anchor="container">
    <t>Namespace for top level container functions.</t>
   </section>
   <section title="container.Container" anchor="container.Container">
    <t>
     This represents the container. This provides top-most-level set of APIs for
     container developers, to accomplish functionalities defined in
     <xref target="GadgetNavigation">GadgetNavigation</xref> and more.
     Internally, this manages work required to ensure that navigated gadgets
     continue to work. There MUST be not more than one instance of this in a
     pages, due to usage of global resources and possible race conditions.
    </t>
    <section title="constructor" anchor="Container-Constructor">
      <t>container.Container(opt_config)</t>
      <t>Constructs the container object.</t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>opt_config</c>
          <c>Object</c>
          <c>
            A bag-style JSON object with configuration parameters.  See 
            <xref target="Configuring-The-Container"></xref>
          </c>
        </texttable>
      </t>
    </section>
    <section title="preloadGadget" anchor="container.Container.preloadGadget">
      <t>container.Container.preloadGadget(gadgetUrl, opt_callback)</t>
      <t>Description: Pre-load one gadget metadata information.
        <t>See also:
          <xref target="container.Container.preloadGadgets">preloadGadgets</xref> 
        </t>
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>gadgetUrl</c>
          <c>String</c>
          <c>A URL to the gadget definition.</c>
          <c>opt_callback</c>
          <c>function</c>
          <c>
            A callback function to be called when the gadget metdata is returned.
            The callback function should have one parameter called response.
          </c>
        </texttable>
      </t>
    </section>
    <section title="preloadGadgets" anchor="container.Container.preloadGadgets">
      <t>container.Container.preloadGadgets(gadgetUrls, opt_callback)</t>
      <t>
        Pre-load gadgets metadata information.
        This will not render the gadget.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>gadgetUrls</c>
          <c>Array</c>
          <c>Gadget URLs to preload.</c>
          <c>opt_callback</c>
          <c>function</c>
          <c>
            A callback function to be called when the gadget metdata is returned.
            The callback function should have one parameter called response.
          </c>
        </texttable>
      </t>    
    </section>
    <section title="unloadGadget" anchor="container.Container.unloadGadget">
      <t>container.Container.unloadGadget(gadgetUrl)</t>
      <t>
        Unloads a single gadget.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>gadgetUrl</c>
          <c>String</c>
          <c>Gadget URL to unload.</c>
        </texttable>
      </t>     
    </section>
    <section title="unloadGadgets" anchor="container.Container.unloadGadgets">
      <t>container.Container.unloadGadgets(gadgetUrls)</t>
      <t>
        Unload preloaded gadgets.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>gadgetUrls</c>
          <c>Array</c>
          <c>Gadget URLs to unload.</c>
        </texttable>
      </t>    
    </section>
    <section title="navigateGadget" anchor="container.Container.navigateGadget">
      <t>container.Container.navigateGadget(site, gadgetUrl, viewParams, 
      renderParams, opt_callback)</t>
      <t>
        Renders (navigates) to the specified gadget.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>site</c>
          <c>container.GadgetSite</c>
          <c>The gadget site to use to render the gadget</c>
          <c>gadgetUrl</c>
          <c>string</c>
          <c>The gadget URL to render (navigate) to.</c>
          <c>viewParams</c>
          <c>Object</c>
          <c>
            View parameters to pass to the view being specified in the 
            renderParams.
          </c>
          <c>renderParams</c>
          <c>Object</c>
          <c>
            Contains parameters on how the container wants to render this 
            gadget see <xref target="ConfiguringGadgetRender"></xref>.
          </c>
          <c>opt_callback</c>
          <c>function</c>
          <c>Callback function called after the gadget has been rendered.</c>
        </texttable>
      </t>
    </section>
    <section title="closeGadget" anchor="container.Container.closeGadget">
      <t>container.Container.nloseGadget(site)</t>
      <t>
        Closes the gadget in the site.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>site</c>
          <c>container.GadgetSite</c>
          <c>The site containing the gadget to close.</c>
        </texttable>
      </t>
    </section>
    <section title="getGadgetMetadata" anchor="container.Container.getGadgetMetadata">
     <t>container.Container.getGadgetMetadatat(gadgetUrl, callback)</t>
      <t>
        Gets the metadata for a gadget.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>gadgetUrl</c>
          <c>container.GadgetSite</c>
          <c>
            The URL pointing to the gadget definition to get the metadta
            for.
          </c>
          <c>callback</c>
          <c>function</c>
          <c>
            Function called when the metadata has been retrieved.
            The callback function should have a single response parameter.
          </c>
        </texttable>
      </t>
    </section>
    <section title="rpcRegister" anchor="container.Container.rpcRegister">
     <t>container.Container.rpcRegister(service, callback)</t>
      <t>
        Registers a function to call for a specified RPC service.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>service</c>
          <c>String</c>
          <c>The name of the RPC service.</c>
          <c>callback</c>
          <c>function</c>
          <c>The function to call when the service is envoked.</c>
        </texttable>
      </t>
    </section>
   </section>
   <section title="container.GadgetSite" anchor="container.GadgetSite">
    <t>
     This represent the gadget context. Container developers refer a gadget as
     a GadgetSite.
    </t>
    <section title="setHeight" anchor="container.GadgetSite.setHeight">
     <t>container.GadgetSite.setHeight(height)</t>
      <t>
        Sets the height of the gadget site.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>height</c>
          <c>Number</c>
          <c>
            Value to set the gadget site height to.
          </c>
        </texttable>
      </t>
    </section>
    <section title="setWidth" anchor="container.GadgetSite.setWidth">
     <t>container.GadgetSite.setWidth(width)</t>
      <t>
        Sets the width of the gadget site.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>width</c>
          <c>Number</c>
          <c>
            Value to set the gadget site width to.
          </c>
        </texttable>
      </t>
    </section>
    <section title="rpcCall" anchor="container.GadgetSite.rpcCall">
     <t>container.GadgetSite.rpcCall(serviceName, callback, var_args)</t>
      <t>
        Sends the RPC call to the current/visible gadget.
      </t>
      <t>Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>serviceName</c>
          <c>String</c>
          <c>
            The name of the service to call.
          </c>
          <c>callback</c>
          <c>function</c>
          <c>
            Function to call upon RPC completion.
          </c>
          <c>var_args</c>
          <c>{....number}</c>
          <c>
            Arguments to pass to the recipient.
          </c>
        </texttable>
      </t>
    </section>
   </section>
  </section>

  <section title="Configuring The Container" anchor="Configuring-The-Container">
   <t>
    Configuring common container is done at instantiation, by passing a
    bag-style JSON, with keys defined under container.ContainerConfig.
    All of these are optional.
   </t>
   <t>
    These affect all gadgets renders, unless overridden by
    <xref target="ConfiguringGadgetRender">GadgetRenderConfiguration</xref>.
   </t>
   <list style="hanging">
    <t hangText="ALLOW_DEFAULT_VIEW">
     Allow gadgets to render in unspecified view. Default is true.
    </t>
    <t hangText="RENDER_CAJOLE">
     Whether cajole mode is turned on. Default is true.
    </t>
    <t hangText="RENDER_DEBUG">
     Whether debug mode is turned on. Default is false.
    </t>
    <t hangText="RENDER_TEST">
     Whether test mode is turned on. Default is false.
    </t>
   </list>
   <t>
    These are not gadget render related.
   </t>
   <list style="hanging">
    <t hangText="RENDER_DEBUG_PARAM">
     The debug param name to look for in container URL for per-request debugging.
    </t>
    <t hangText="TOKEN_REFRESH_INTERVAL">
     Security token refresh interval (in ms) for debugging. Default is 30 * 60 * 1000.
    </t>
    <t hangText="NAVIGATE_CALLBACK">
     Globally-defined callback function upon gadget navigation. Useful to
     broadcast timing and stat information back to container.
    </t>
    <t hangText="PRELOAD_REF_TIME">
     Provide server reference time for preloaded data. This time is used
     instead of each response time in order to support server caching of results.
    </t>
    <t hangText="PRELOAD_METADATAS">
     Contains preloaded hash of gadgets metadata.
    </t>
    <t hangText="PRELOAD_TOKENS">
     Contains preloaded hash of gadgets tokens.
    </t>
   </list>
  </section>

  <section title="Configuring gadget render" anchor="ConfiguringGadgetRender">
   <t>
    Requesting for a gadget render with specifics (like view, visual appearance
    and debug mode) can be made by passing a bag-style JSON, with keys defined
    under container.RenderParam into
    container.Container.prototype.navigateGadget().
    All of these are optional.
   </t>
   <list style="hanging">
    <t hangText="ALLOW_DEFAULT_VIEW">
     Allow gadgets to render in unspecified view
    </t>
    <t hangText="CAJOLE">
     Whether to enable cajole mode.
    </t>
    <t hangText="CLASS">
     Style class to associate to iframe.
    </t>
    <t hangText="DEBUG">
     Whether to turn on debugging mode. Default is false.
    </t>
    <t hangText="HEIGHT">
     The starting gadget iframe height (in pixels). Default is 200.
    </t>
    <t hangText="NO_CACHE">
     Whether to disable cache.
    </t>
    <t hangText="TEST_MODE">
     Whether to enable test mode. Default is false.
    </t>
    <t hangText="USER_PREFS">
     The gadget user prefs to render with.
    </t>
    <t hangText="VIEW">
     The view of gadget to render.
    </t>
    <t hangText="WIDTH">
     The starting gadget iframe width (in pixels). Default is 320.
    </t>
   </list>
  </section>
  <section title="Highly Recommended Features">
    <section title="container.Container.ee">
    </section>
    <section title="container.Container.openSearch">
        <x:draft note="OpenSearch Gadget Contributions"
          href="http://docs.opensocial.org/display/OSD/OpenSearch+Gadget+Contributions">
        <t>
        The contain APIs for OpenSearch allow containers to access 
        OpenSearch description information contained within the 
        gadgets which it has loaded or is currently showing on the
        page.  Containers can use this information in order to allow
        users of the container to search accross multiple gadgets
        at the same time.  
        </t>
        <section title="getOpenSearchURLs" anchor="container.Container.opensearch.getOpenSearchURLs">
        <t>Type: {Array} container.Container.opensearch.getOpenSearchURLs(mimeType)</t>
          <t>
            Description: Retrieves all gadget search URLs based on the 
            data type parameter.  Containers may support zero or more of 
            the data types.
          </t>
          <t>Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              <c>mimeType</c>
              <c>String</c>
              <c>
                The type of OpenSearch URLs you want to be returned.  
                This should be a valid MIME type.
              </c>
            </texttable>
            </t>
            <t>Returns:
              <texttable align="left">
                <ttcol>Type</ttcol>
                <ttcol>Description</ttcol>
                <c>Array</c>
                <c>
                  An array of name and URL pairs, where name
                  is the display name, and URL is the OpenSearch template
                  URL.
                </c>
              </texttable>
            </t>
          </section>
          <section title="getOpenSearchDescriptions" anchor="container.Container.opensearch.getOpenSearchDescriptions">
            <t>Type: {Array} container.Container.opensearch.getOpenSearchDescriptions(mimeType)</t>
              <t>
                Description: Retrieves all OpenSearch descriptions from gadgets
                which have OpenSearch feature in their gadget definition.
              </t>
              <t>Parameters:
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>mimeType</c>
                  <c>String</c>
                  <c>
                    The MIME for the OpenSearch template URL within the 
                    OpenSearch description.
                  </c>
                </texttable>
              </t>
              <t>Returns:
                <texttable align="left">
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>Array</c>
                  <c>
                    An array of OpenSearch definitions.  The 
                    definitions should be the JSON representation of the 
                    OpenSearch definition represented in XML.
                  </c>
                </texttable>
              </t>
              <t>Example Array Returned By container.opensearch.getOpenSearchDesription
                <figure>
                  <artwork xml:space="preserve">
[ 
  {
    "mimeType" : "application/atom+xml",
    "OpenSearchDescription : {
      "ShortName" : "Example Search",
      "Description" : "Realtime Example Search",
      "Url" : {
        "@type" : "application/atom+xml",
        "@method" : "get",
        "@template" : "http://search.example.com/search.atom?q={searchTerms}"      
      },
      "Image" : {
        "@width" : "16",
        "@height" : "16",
        "#text" : "http://search.example.com/favicon.png"
      },
      "InputEncoding" : "UTF-8",
      "SearchForm" : "http://example.search.com/"
   }
  }
]
                  </artwork>
                </figure>
               </t>
             </section>
          </x:draft>
    </section>
    <section title="container.Container.actions">
    </section>
    <section title="container.Cotainer.selection">
    </section>
    <section title="container.Container.views">
    </section>
  </section>
  <section title="Extensibility">
   <t>
    The framework is developed with extensibility in mind.
   </t>
   <section title="Namespace Overrides">
    <t>This is done by namespace assignment and augmenting custom methods.</t>
    <artwork xml:space="preserve">
// ensure container is defined here.
foo.container = container;
foo.container.prototype.newMethod = function() { ... }
    </artwork>
   </section>
   <section title="Method Overrides">
    <t>This is done by re-defining overridable methods.</t>
    <artwork xml:space="preserve">
foo.container.Container.prototype.onConstructed = function(opt_config) { ... }
foo.container.GadgetSite.prototype.onConstructed = function() { ... }
foo.container.GadgetSite.prototype.onNavigateTo = function(data) { ... }
foo.container.GadgetHolder.prototype.onConstructed = function() { ... }
foo.container.Service.prototype.onConstructed = function(opt_config) { ... }
    </artwork>
   </section>
   <section title="Mixins">
    <t>This is done by calling static function addMixin.</t>
    <artwork xml:space="preserve">
container.Container.addMixin('foo', function() { ... });
    </artwork>
   </section>
  </section>
 </middle>
</rfc>

