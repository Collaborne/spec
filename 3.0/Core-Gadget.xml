<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type='text/xsl' href='./OpenSocial.xslt' ?>
<?rfc toc="yes"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
  <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'> 
  <!ENTITY rfc2606 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2606.xml'> 
  <!ENTITY rfc2616 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'> 
  <!ENTITY rfc5234 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml'>
  <!ENTITY rfc3986 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'> 
  <!ENTITY rfc3987 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml'>
  <!ENTITY rfc5849 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5849.xml'>
  <!ENTITY rfc5988 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml'>
  <!ENTITY rfc2617 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml'>
  <!ENTITY oauth2 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-25.xml'>
  <!ENTITY infoset PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xml-infoset-20040204.xml'> 
  <!ENTITY xmlbase PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-xmlbase-20090128.xml'>
  
  <!ENTITY relaxng PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/relaxng.xml'>
  
  <!ENTITY opensocial PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/opensocial.xml'>
  <!ENTITY coreapi PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/coreapi.xml'>
  <!ENTITY socialapi PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/socialapi.xml'>
  <!ENTITY templating PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/opensocial-templating.xml'>
  <!ENTITY bearer PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-bearer-18.xml'>
  <!ENTITY mac PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-http-mac-01.xml'>
  
  <!ENTITY jspel PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/jspel.xml'>
  <!ENTITY oahub PUBLIC '' 'http://docs.opensocial.org/download/attachments/4358254/oahub.xml'>
  
]>
<rfc ipr="full3978" docName="opensocial-core-gadget-specification-3-0" xmlns:x="http://purl.org/net/xml2rfc/ext">
  <front>
    <title abbrev="Core-Gadget">OpenSocial Application Specification 3.0</title>
    <author fullname='OpenSocial and Gadgets Specification Group'>
      <address>
        <email>opensocial-and-gadgets-spec@googlegroups.com</email>
      </address>
    </author>
    <date month="August" year="2011" />
    <area>General</area>
    <keyword>OpenSocial</keyword>
    <keyword>social networking</keyword>
    <keyword>REST</keyword>
    <keyword>XML</keyword>
    <keyword>Extensible Markup Language</keyword>
    <keyword>JSON</keyword>
    <keyword>JavaScript Object Notation</keyword>
    <keyword>Atom</keyword>
  </front>
  <middle>
    <section title="Overview">
    
      <t>OpenSocial Applications are Web-based software components 
      that are based on HTML, CSS and JavaScript. Such applications 
      can be used independently or composed together in a variety of 
      ways. For instance, several individual applications can be 
      embedded within a single Web page and can either operate independently 
      of one another or can interact and communicate with each other.</t>

      <t>Each OpenSocial Application is defined by a declarative XML syntax known 
      commonly as an "Application Specification". These documents contain 
      the meta-data, content and code necessary for the application to function.
      It is the responsibility of an OpenSocial Application Container to parse 
      and process specification documents in order to render the application's 
      content for a user. In the course of doing so, containers provide a 
      range of capabilities and features the application can leverage.
      Examples of such capabilities include providing access to data, 
      facilitating communication with other applications, or allowing an 
      application to extend the capabilities of the container itself.</t>

      <t>This specification describes the XML-document format used to define 
      OpenSocial Applications as well as the capabilities and core features 
      provided to application instances by the container.</t>
      
      <section title="Notation and Conventions">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in
        <xref target="RFC2119" />.</t>
        <t>Domain name examples use <xref target="RFC2606">RFC2606</xref>.</t>
        
        <t>Some sections of this specification are illustrated with fragments
        of a <xref target="RFC5234">Augmented Backus-Naur Form</xref> (ABNF) grammar.
        The rules specified are normative.</t>
        
        <t>The following core rules are included by reference, as defined in
        <xref target="RFC5234"/>, Appendix B.1: ALPHA (letters), DIGIT (decimal 0-9), 
        HTAB (horizontal tab), and SP (space).</t>
        
        <figure><preamble>The following additional ABNF rules are defined:</preamble>
        <artwork>
  OWS = *( SP / HTAB )
        </artwork></figure>
        
        <t>Some sections of this specification are illustrated with fragments 
        of a non-normative <xref target="RNC">RELAX-NG Compact Schema</xref>. 
        However, the text of the specification provides the definition of 
        conformance. In several cases, portions of the non-normative RELAX-NG 
        schema will reference ABNF rules.</t>
        
        <figure><preamble>For example, the following example ABNF rule:</preamble>
        <artwork>
  abc = "a" "b" "c"
        </artwork></figure>
 
        <figure><preamble>Can be referenced within the RELAX-NG schema fragment
        to define the acceptable value of an XML attribute:</preamble><artwork>
  foo = element foo {
    attribute a { abc }?
  }
        </artwork></figure>
  
        <figure><preamble>Within the RELAX-NG grammar, the rules "undefinedAttribute" and 
        "extensionElement" are defined as follows:</preamble><artwork>
  namespace local = ""
  
  undefinedAttribute =
    attribute * - (xml:base | xml:lang) { text }

  anyElement =
    element * {
      (attribute * { text }
       | text
       | anyElement)*
      }
    
  simpleExtensionElement =
    element * {
      text
    }

  structuredExtensionElement =
    element * {
      (attribute * { text }+,
      (text|anyElement)*)
      | (attribute * { text }*,
      (text?, anyElement+, (text|anyElement)*))
    }

  extensionElement =
    simpleExtensionElement | 
    structuredExtensionElement
        </artwork></figure>
  
        <t>This specification allows the use of <xref target="RFC3987">IRIs</xref>. 
        Every <xref target="RFC3986">URI</xref> is also an IRI, so a URI may be 
        used wherever an IRI is named. There are two special considerations: 
        (1) when an IRI that is not also a URI is given for dereferencing, 
        it MUST be mapped to a URI using the steps in Section 3.1 of RFC 3987.
        and (2) when an IRI is serving as an identifier, it MUST NOT be 
        so mapped.</t>
      </section>
      
      <section title="Versioning" anchor="Versioning">
      
        <t>Both the overall OpenSocial specification and individual features
        are versioned. Application specification documents SHOULD specify the version 
        of the OpenSocial specification to which they conform by including the 
        "specificationVersion" attribute on the root &lt;Module&gt; element, as well
        as the versions of any optional or required features used by including the 
        "version" attribute on &lt;Require&gt; and &lt;Optional&gt; elements.</t>
       
        <t>Version identifiers are composed of a series of up to three non-negative
        integers separated by the dot (.) character. For example, "1.0.0", "1.2.1",
        etc.</t>
       
        <figure><artwork>
  major = 1*DIGIT
  minor = 1*DIGIT
  patch = 1*DIGIT
      
  version = major [ "." minor [ "." patch ] ]
        </artwork></figure>
       
        <t>The first number in the sequence represents a "major version". Changes 
        in the major version signify possible backward-incompatible changes from
        previous versions. For instance, when the methods are removed from the 
        JavaScript API provided by a feature, or when the definitions of XML 
        elements or attributes used within an application specification document are 
        changed, or when the processing requirements for any feature or capability
        are modified, the major version MUST be incremented.</t>
       
        <t>The second number in the sequence is a "minor version" that is 
        interpreted relative to the preceding major version number. When the 
        major version is incremented, the "minor version" MUST be reset to 0. Changes 
        in the minor version signify backward-compatible but forward-incompatible
        changes from previous versions. For example, when new methods are added
        to the JavaScript API provided by a feature, or when new elements or 
        attributes are added to the application specification document format, the 
        minor version SHOULD be incremented and the major version SHOULD NOT be 
        incremented.</t>
          
        <t>The third and final number in the sequence is the "patch version" that
        is interpreted relative to the preceding minor version. When the minor
        version is incremented, the "patch version" MUST be reset to 0. Changes
        in the patch version signify changes that are both backward- and forward-
        compatible with previous versions. For example, when making minor clarifications,
        fixing errors in the description of a method or element, or making other 
        small changes that neither affect existing functionality or introduce new
        functionality that would be incompatible with existing versions, the patch 
        version MUST be incremented but the minor and major versions SHOULD NOT
        change.</t>
       
        <t>Version identifiers are hierarchical and can either reference a 
        specific individual version by specifying all three elements (e.g. "1.2.3") or
        can identify all versions at a particular major or minor level. For instance,
        the identifier "2.4" would apply to all combinations of versions specifying a 
        major version of "2" and a minor version of "4" (e.g. "2.4", "2.4.0", "2.4.1",
        "2.4.2", and so on) but not any other minor version (e.g. "2.3", "2.5.2", etc).</t>
    
        <t>When processing application specification documents and determining the 
        appropriate method of processing the application itself as well as determining
        the correct features to enable, containers are required to 
        appropriately match the version identifiers specified within the application
        specification to those provided by the container. For instance, if the 
        application requires version "2.3" of a particular feature, the container MUST
        provide an implementation of the feature whose version matches the given 
        major and minor value (e.g. "2.3.1", "2.3.2", etc).</t>
    
        <t>It is RECOMMENDED that developers specify the most general version
        that will satisfy the requirements of the application. Usually, major and minor
        versions will suffice. The patch version MAY be omitted from application 
        specification documents.</t>
       
        <t>When a version identifier is omitted from various locations within
        the application specification, the value is assumed to be "1.0". As 
        described above, this value will match any version beginning with "1.0", 
        including 1.0.0, 1.0.1, 1.0.22, etc., but not 1.1.0, 2.0.0, etc. This 
        default value will not change in future versions of the specification, 
        ensuring that Applications that omit these values will not have sudden, 
        unexpected changes in behavior when containers adopt new versions of the 
        OpenSocial specification or features.</t>
      </section>
      
      <section title="Application Roles" anchor="Application-Roles">
      
        <t>Before developing OpenSocial applications it is important to understand
        the roles and relationships between the various key elements.</t>
        
        <t>The basic elements of an OpenSocial application are:
          <list style="hanging">
            <t hangText="Application">A reusable software component, defined using
            the syntax established by this document, that can be generally  
            deployed and utilized across multiple OpenSocial implementations.</t>
            
            <t hangText="Source">The entity from which the application originated. 
            This may be the author of the application or a company that publishes 
            the application, etc.</t>
            
            <t hangText="Instance">A specific instance of an Application that has
            been provisioned for use by one or more users within a given context
            or for a specific purpose.</t>
            
            <t hangText="Context">The context within which an application instance
            is being used. For instance, a website that represents a work project
            might utilize an instance of an application that lists the names of 
            everyone involved with the project. The "Context" within which the 
            application instance is being used is the work project.</t>
            
            <t hangText="Container">Is the software component that is directly
            responsible for hosting and managing instances of one or more applications
            within their respective contexts.</t>
            
            <t hangText="Viewer">Is the entity that is currently interacting with
            the instance of an application within a given context.</t>
            
            <t hangText="Instance Owner">Is the entity that is responsible for 
            the application instance.</t>
            
            <t hangText="Context Owner">Is the entity that is responsible for 
            the context within which an application instance is being used.</t>
          </list>
        </t>
        
        <t>To understand the relationships between each of these elements, 
        consider the following example scenario:
          <list style="symbols">
            <t>A company deploys an internal project management system
            that is to be used by multiple teams to manage individual projects.</t>
            <t>Each project within this system is "owned" by a single individual 
            project manager, and is worked on by any number of other people.</t>
            <t>When a project is created, the project manager creates a webpage
            representing the project and selects the members of the project.</t>
            <t>On each project page, the application automatically creates an 
            instance of two separate application components: one that lists the 
            names of the current members of the project and another that lists the
            current schedule and master task list for the entire project.</t>
            <t>When each project member views the page, they are asked to login 
            and are given the opportunity to customize the page by selecting 
            from a list of available application components that will display 
            information relevant to their participation in the project. Examples
            include a component that lists only the current task items assigned
            to them; or a component that shows the most recent tasks completed
            by other users.</t>
          </list>
        </t>
                
        <t>Within this scenario:
          <list style="symbols">
            <t>The project management system is the Container;</t>
            <t>Each individual project is a Context;</t>
            <t>The project manager is the Context Owner;</t>
            <t>Each of the components added to each project's page is an 
            individual Instance of an Application;</t>
            <t>For the components that list the project members and master 
            task list, the project manager is the Instance Owner;</t>
            <t>For each of the components added to the page by individual 
            project members, the Instance Owner is the user that added it
            to the page;</t>
            <t>When a user logs in to view a project's page, they are the 
            current Viewer.</t>
          </list>
        </t>
        
        <t>Each instance of an Application will be generally configurable 
        only by the Instance or Context Owner. That is, while the instance
        can store and access information about the current Viewer, the 
        Viewer typically is not permitted to modify configuration options 
        that affect the operation of the application unless the Viewer 
        happens to also be the owner of the Instance or the Context.</t>
        
        <t>Further, when an Application requires access to secure or private
        data hosted by the container or a third party, authentication 
        and authorization might be required for not only the current viewer, 
        but also for the Application Instance, Context and Application 
        Source. That is, containers MUST NOT assume that simply because a 
        particular Viewer has been authorized to access some secure piece 
        of data within one Application Instance, that the same authorization 
        applies to all instances of that same Application, or Instances of 
        other Applications that happen to be used by the same Viewer.</t>
        
      </section>
      
    </section>
    
    <section title="The Application Specification Document" anchor="ElementsAndAttributes">
   
      <t>An OpenSocial Application Specification is an XML document that 
      contains the meta-data and content for an application.</t>
    
      <section title="Conventions and Notes">
      
        <t>The document format is specified in terms from the 
        <xref target="W3C.REC-xml-infoset-20040204">XML Infoset </xref>. 
        However, this specification uses the term "element" when referring to 
        "Element Information Items" as defined by the XML Infoset specification, 
        and the term "attribute" when referring to "Attribute Information Items".</t>
        
        <t>Currently, no XML Namespace is defined for any of the elements 
        defined by this specification. Neither is there a MIME Media Type
        specific for Gadget Specification Documents.</t>
        
        <t>All relative IRI and URI references contained within the 
        Application Specification document, including those contained within 
        the the textual content of &lt;Content&gt; elements, are relative to
        the Application Specification Document's URL as known by the 
        container.</t>
        
      </section>
 
      <section title="Document Structure">

        <section title="The &lt;Module&gt; Element">
        
          <t>The root of the Application Specification Document is the 
          &lt;Module&gt; element. At a minimum, it's children MUST consist 
          of no more than one &lt;ModulePrefs&gt; element, no more than one 
          &lt;UserPref&gt; element, and one or more &lt;Content&gt; elements.</t>
      
          <figure><artwork>
  Module = element Module {
    attribute specificationVersion { version }?,
    undefinedAttribute*,
    ModulePrefs?,
    UserPref*,
    Content+,
    extensionElement*
  }
          </artwork></figure>
      
          <t>The <spanx style="verb">specificationVersion</spanx> attribute 
          identifies the version of the OpenSocial specification the container 
          MUST use to process and render the Application Specification. The value 
          is a string conforming to the version identifier described in 
          <xref target="Versioning"/>. If absent, the default value is 
          assumed to be "1.0".</t>
      
          <t>Text nodes included as children of the &lt;Module&gt; element 
          will be ignored by the container.</t>
          
          <t>The &lt;Module&gt; element MAY contain an <spanx style="verb">xml:base</spanx>
          attribute as specified by <xref target="W3C.REC-xmlbase-20090128" /> 
          whose value establishes a base for all relative IRI's and URI's
          contained within the specification document. If specified, containers
          are required to use the base to resolve all relative IRI and URI 
          references.</t>
    
        </section>
       
        <section title="The &lt;ModulePrefs&gt; Element">
      
          <t>The &lt;ModulePrefs&gt; element serves as a container for all
          metadata, features and processing rules dealing with the application.
          The children of the element consist of a variety of optional 
          attributes and elements.</t>
        
          <figure><artwork>
  ModulePrefs = element ModulePrefs {
    attribute title { text }?,
    attribute title_url { IRI }?,
    attribute description { text }?,
    attribute author { text }?,
    attribute author_email { text }?,
    attribute screenshot { IRI }?,
    attribute thumbnail { IRI }?,
    attribute height { text }?,
    attribute width { text }?,
    attribute doctype { "quirksmode" | text },
    undefinedAttribute*,
    (Require* 
     & Optional*
     & Preload*
     & Icon* 
     & Locale*
     & Link*
     & OAuth? 
     & OAuth2?,
     extensionElement*)
  }
          </artwork></figure>
        
          <t>The &lt;ModulePrefs&gt; element MAY contain zero or more 
          &lt;Require&gt;, &lt;Optional&gt;, &lt;Preload&gt;, &lt;Icon&gt;, 
          &lt;Locale&gt; and &lt;Link&gt; elements and MAY contain no more 
          than one each of the &lt;OAuth&gt; and &lt;OAuth2&gt; elements.</t>
        
          <t>The <spanx style="verb">title</spanx> attribute specifies the 
          application's title. If provided, a container SHOULD use this value 
          in any situation where a title bar or other identifying name 
          is required. The value MAY be localized as described in 
          <xref target="Localization" />.</t>
        
          <t>If provided, containers SHOULD use the value of the 
          <spanx style="verb">title_url</spanx> attribute to provide 
          a link target whenever the value of the 
          <spanx style="verb">title</spanx> attribute is displayed.</t>
        
          <t>The <spanx style="verb">description</spanx> attribute provides 
          an optional, human-readable description of the application. 
          The value MAY be localized as described in <xref target="Localization" />.</t>
        
          <t>The <spanx style="verb">author</spanx> attribute optionally 
          provides the name of the author of the application.</t>
        
          <t>The <spanx style="verb">author_email</spanx> attribute optionally 
          provides an email address to serve as a point of contact for the 
          author of the application.</t>
      
          <t>The <spanx style="verb">screenshot</spanx> attribute provides an 
          optional IRI of a visual representation of the application. Typically
          such images depict an image of the application that reflects a typical
          user's experience. The referenced resource MUST be an image on a 
          publicly-accessible web site that is not blocked by a robots.txt file. 
          The preferred format is PNG, though GIF and JPG are also acceptable. 
          Gadget screenshots SHOULD be 280 pixels wide. The height of the 
          screenshot SHOULD be the "natural" height of the application, in pixels, 
          when it is in use.</t>
      
          <t>The <spanx style="verb">thumbnail</spanx> attribute provides an 
          optional IRI of a smaller visual representation of the application. 
          The referenced resource MUST be an image on a publicly-accessible 
          web site that is not blocked by a robots.txt file. The preferred 
          format is PNG, though GIF and JPG are also acceptable. Thumbnails 
          SHOULD be 120x60 pixels and SHOULD be smaller than images 
          referenced using the <spanx style="verb">screenshot</spanx> attribute
          but larger than any images linked to using &lt;Link&gt; elements that
          specify <spanx style="verb">rel="icon"</spanx>.</t>
      
          <t>The optional <spanx style="verb">height</spanx> and 
          <spanx style="verb">width</spanx> attributes respectively define, 
          in pixels, the preferred default display height and width of the 
          application. Container's SHOULD use these values when establishing the
          appropriate display dimensions for the application.</t>
      
          <t>The optional <spanx style="verb">doctype</spanx> attribute is a 
          string that identifies the preferred rendering model for the application. 
          When set to the literal value <spanx style="verb">quirksmode</spanx>, 
          the application SHOULD be rendered using the so-called "browser 
          quirks mode". Additional values MAY be used to support other 
          rendering modes but only <spanx style="verb">quirksmode</spanx> is 
          defined by this specification.</t>
      
        </section>
       
        <section title="The &lt;Require&gt; and &lt;Optional&gt; Elements">
      
          <t>The &lt;Require&gt; and &lt;Optional&gt; elements share a 
          common structure and are each used to declare OpenSocial features
          that are either required or optional for the application to operate.
          Each element consists of a feature identifier, a version, a 
          list of specific application views the feature dependency applies to, 
          and zero or more &lt;Param&gt; elements that provide specific 
          feature-dependent detail.</t>
        
          <figure><artwork>
  Param = element Param {
    attribute name { text },
    undefinedAttribute*,
    text?
  }   
        
  dependency = 
    attribute feature { text },
    attribute version { version },
    attribute views { viewnames },
    undefinedAttribute*,
    Param*,
    extensionElement,
        
  Optional = element Optional { dependency }
  Require = element Require { dependency }   
          </artwork></figure>
      
          <t>Features are collections of processing rules and JavaScript
          Library APIs that provide specific functionality to a application. A 
          feature might also place various constraints and rules on the 
          container and application when in use. Containers are required to honor 
          the constraints and rules of any feature it claims to support.</t>
        
          <t>The <spanx style="verb">feature</spanx> attribute on the 
          &lt;Optiona&gt; and &lt;Require&gt; elements specifies the unique 
          identifier of a Feature.</t>
        
          <t>The <spanx style="verb">version</spanx> attribute specifies the 
          specific version of the identified Feature, using the syntax 
          described in <xref target="Versioning"/>.</t>
        
          <t>The <spanx style="verb">views</spanx> attribute specifies a 
          comma separated list of <xref target="content-processing-model">views</xref> 
          for which the Feature is either optional or required. Containers 
          SHOULD only load features when an appropriate view is being rendered.</t>
        
          <t>For every feature identified using a &lt;Require&gt; element, 
          the container to required to provide an implementation that matches the 
          version specified by the <spanx style="verb">version</spanx> attribute. 
          The container is required to display an error if it is incapable of 
          providing an appropriate implementation for a required Feature.</t>
        
          <t>For every feature identified using a &lt;Optional&gt; element,
          the container MAY provide an implementation of the feature. If an
          implementation is provided, it MUST match the version specified by
          the <spanx style="verb">version</spanx> attribute.</t>
        
          <t>Containers MUST NOT substitute versions of features that do not 
          match that which is requested by the application.</t>
        
          <t>Containers SHOULD support as many versions of a feature as is 
          practical to facilitate backwards compatibility with existing applications.</t>
      
          <t>Containers are permitted to refuse to support features or specific 
          versions of features that are known or assumed to be incompatible 
          with the specification version required by the Gadget, or that are 
          known to be incompatible with other Features or versions of Features 
          required by the Gadget. For example, a container MAY not support the 
          combination of a &lt;ModulePrefs&gt; element using 
          <spanx style="verb">specificationVersion="1.0"</spanx> and a 
          &lt;Require feature="opensocial" version="2.0"&gt;; or the combination
          of &lt;Require feature="opensocial" version="1.0"&gt; and
          &lt;Require feature="opensocial-data" version="1.1"&gt;. In cases 
          where such combinations are requested, the Features are said to be 
          conflicting. Conflicting features are to be treated by Containers as 
          if they were unsupported. Containers SHOULD provide an error message 
          describing conflicts to developers when a conflict is detected.  If 
          one or more of the conflicting Features is specified as Optional by 
          a Gadget, and the set of Required features and specification version 
          do not conflict, Containers SHOULD attempt to render the application 
          by removing the conflicting optional Features. Containers SHOULD 
          include the largest set of Optional Features that do not produce 
          conflicts.</t>
          
          <t>It is possible for there to be feature version conflicts when two 
          valid feature dependencies exist for the same feature.  This situation 
          can occur when the same feature is declared at a global scope 
          (no <spanx style="verb">views</spanx> attribute specified on the 
          &lt;Require&gt; or &lt;Optional&gt; element) and at a view scope 
          (<spanx style="verb">views</spanx> attribute specified) but with 
          differing <spanx style="verb">version</spanx> values; for example, 
          if we are rendering an Application's "home" view and the specification
          document contains both &lt;Require feature="myfeature" version="1"&gt; 
          and &lt;Require feature="myfeature" version="2" views="home"&gt;.
          In such cases, containers SHOULD use the Feature version from the
          element that explicitly matches the view being rendered over other
          feature references. Developers can easily correct such conflicts 
          by always using the <spanx style="verb">views</spanx> attribute in 
          applications that use mixed Feature versions.</t>
      
          <section title="The &lt;Param&gt; Element">
       
            <t>The &lt;Param&gt; element provides configuration details for a 
            feature dependency. The element consists of a single 
            <spanx style="verb">name</spanx> attribute and text content. The 
            element MUST NOT contain un-escaped markup. If the value of the 
            parameter being specified contains markup such as XML or HTML
            tags, the value MUST either be properly escaped using appropriate
            XML entity tags or wrapped within a CDATA section.</t>
            
            <figure><preamble>For instance:</preamble><artwork>
  &lt;Require feature="my-feature" version="1.0"&gt;
    &lt;Param name="foo"&gt;&lt;![CDATA[
      &lt;a&gt;bar&lt;/a&gt;
    ]]&gt;&lt;/Param&gt;
  &lt;/Require&gt;
            </artwork></figure>
            
            <figure><preamble>Or, alternatively:</preamble><artwork><![CDATA[
  <Require feature="my-feature" version="1.0">
    <Param name="foo">&lt;a&gt;bar&lt;/a&gt;</Param>
  </Require>
            ]]></artwork></figure>
            
            <t>Each &lt;Require&gt; and &lt;Optional&gt; element can contain
            any number of &lt;Param&gt; elements. The specific parameter
            names allowed are specific to each individual feature.</t>
            
            <t>When specified, each parameter will be made 
            available by the container to the application code using the 
            <spanx style="verb">gadgets.util.getFeatureParameters</spanx>
            API, with the value of the <spanx style="verb">name</spanx> 
            attribute serving as the parameter key and the text value of the 
            element serving as the parameter value.</t>
            
            <t>When a feature dependency for a specific view has been defined, 
            the container SHOULD make only the parameters from the view-specific 
            dependency available to the application using the getFeatureParameters
            API.</t>
       
          </section>
      
        </section>

        <section title="The &lt;Preload&gt; Element">
      
          <t>The &lt;Preload&gt; element is used to identify resources that
          a container SHOULD load automatically an application view is 
          processed and rendered.</t>
        
          <figure><artwork>
  Preload = element Preload {
    SignedFetch,
    attribute href { IRI },
    attribute views { viewnames }?
  }
          </artwork></figure>
        
          <t>The <spanx style="verb">href</spanx> attribute specifies the IRI 
          of the resource to fetch.</t>
        
          <t>&lt;Preload&gt; elements MAY use the Signed Fetch mechanism defined
          by <xref target="SignedFetch"/> and MAY contain the same optional 
          attributes used to configure &lt;Content&gt; elements for signed 
          fetch as described in <xref target="signed-fetch"/>.</t>
        
          <t>The <spanx style="verb">views</spanx> attribute provides a 
          comma-separated list of <xref target="content-processing-model">views</xref> 
          for which this &lt;Preload&gt; element applies. Containers SHOULD NOT 
          preload resources that are not specified for the view being rendered. 
          If no <spanx style="verb">views</spanx> attribute is specified, 
          then the content SHOULD be preloaded for all views.</t>
          
          <t>The container will process all of the &lt;Preload&gt; elements
          defined for a particular view when it begins rendering the view 
          by sending an HTTP GET request to the location specified in the
          <spanx style="verb">href</spanx> attribute. The responses to 
          these requests will then be cached by the container as described
          in <xref target="caching"/></t>
        
          <t>When an HTTP GET request for the same IRI is submitted using 
          either the <spanx style="verb">gadgets.io.makeRequest</spanx> or
          <spanx style="verb">osapi.http.get</spanx> APIs, the container 
          will use any cached responses previously generated as a result
          of processing the &lt;Preload&gt; elements.</t>
          
        </section>
             
        <section title="The &lt;Link&gt; Element">
      
          <t>The &lt;Link&gt; element is used to associate a variety of additional
          resources with the specification document. At a minimum, the element MUST
          contain the <spanx style="verb">rel</spanx> and 
          <spanx style="verb">href</spanx> attributes.</t>
        
          <figure><artwork>
  Link = element Link {
    SignedFetch,
    attribute rel { text },
    attribute href { IRI },
    attribute method { "GET" | "POST" }?,
    undefinedAttribute*,
    text
  }
          </artwork></figure>
        
          <t>The <spanx style="verb">href</spanx> attribute specifies the IRI 
          of the resource being linked to. The value MUST be usable for 
          dereferencing and therefore MUST be mapped to a URL following the 
          rules specified in <xref target="RFC3987"/>.</t>
        
          <t>The specific relationship between the specification document and the 
          referenced resource is specified by the value of the 
          <spanx style="verb">rel</spanx> attribute. The value of the 
          <spanx style="verb">rel</spanx> attribute MUST be a Link Relation
          Type as defined by <xref target="RFC5988"/>.</t>
           
          <t>This specification defines a number of <spanx style="verb">rel</spanx> 
          attribute values that are significant. Implementations MUST NOT use 
          any <spanx style="verb">rel</spanx> attribute value prefixed with 
          the characters <spanx style="verb">opensocial</spanx>, 
          <spanx style="verb">gadgets</spanx>, or <spanx style="verb">events</spanx> 
          that are not defined by this specification.</t>
        
          <t>The <spanx style="verb">rel</spanx> attribute values currently 
          supported by this specification are:</t>
        
          <texttable>
            <ttcol align="left" width="15%">rel</ttcol>
            <ttcol align="left">Description</ttcol>
            
            <c><spanx style="verb">icon</spanx></c>
            <c>Used to link an image resource to the specification document that 
            serves as a representative icon for the application.</c>
            
            <c><spanx style="verb">license</spanx></c>
            <c>Used to reference the license under which the code and content
            of an application specification document is being provided. For 
            example, the JavaScript code contained within the specification
            document can be considered to be "open source" and distributed 
            using a common "open source license" such as the 
            <eref target="http://www.apache.org/licenses/LICENSE-2.0.html">Apache Software License, v2</eref>
            or a <eref target="http://creativecommons.org/">Creative Commons License</eref>, etc.
            Multiple &lt;Link&gt; elements using the "license" link relation
            MAY be used within a specification document with each representing 
            an alternative distribution license.</c>
            
            <c><spanx style="verb">privacy-policy</spanx></c>
            <c>Used to reference a document describing the privacy policy 
            associated with the application. Such documents SHOULD disclose
            what personal information is collected by the application and how
            that information is stored, used, managed and disclosed to other
            parties. A specification document SHOULD contain no more than one
            &lt;Link&gt; element using the "privacy-policy" link relation.</c>
            
            <c><spanx style="verb">terms-of-service</spanx></c>
            <c>Used to reference a document describing the the rules to which
            a user of the application agree to follow when using the 
            application. Note that such "Terms of Service" carry no legal 
            weight and can be ignored with impunity in the absence of an
            explicit, legally enforceable contract. A specification document 
            SHOULD contain no more than one &lt;Link&gt; element using the 
            "terms-of-service" link relation.</c>
            
          </texttable>
          
          <t>Additional link relations specific to the Application Lifecycle
          Events capability are described in <xref target="gadget-lifecycle-events"/>.</t>
          
          <t>The &lt;ModulePrefs&gt; element can contain any number of &lt;Link&gt;
          elements but MUST NOT contain more than one with the same combination
          of <spanx style="verb">rel</spanx> and <spanx style="verb">href</spanx>
          attribute values.</t>
          
          <t>The optional <spanx style="verb">method</spanx> attribute can be 
          used with certain links to specify the HTTP method that is to be used 
          when dereferencing the link's <spanx style="verb">href</spanx>.</t>
          
        </section>
      
        <section title="The &lt;Locale&gt; Element">
      
          <t>The &lt;Locale&gt; element is used to provide localization 
          information for an application. Containers are required to honor 
          localization rules as specified in <xref target="Localization">
          Localization</xref>. Each Locale tag represents localization
          information for a single locale.</t>
        
          <figure><artwork>
  Msg = element msg {
    attribute name { text },
    undefinedAttribute*,
    text
  }
 
  CommonLocale = {
    attribute lang { "all" | text }?,
    attribute country { "all" | text }?,
    attribute language_direction { "rtl" | "ltr" }?,
    attribute views { viewnames },
    undefinedAttribute*
  }
  
  RemoteLocale = element Locale {
    CommonLocale,
    attribute messages { IRI }
  }
  
  InLineLocale = element Locale {
    CommonLocale,
    Msg*
  }
        
  Locale = RemoteLocale | InLineLocale
          </artwork></figure>
        
          <t>The <spanx style="verb">lang</spanx> attribute specifies the 
          language for the locale specified as an ISO-639-1 Language Code, 
          or the special value <spanx style="verb">all</spanx>, which containers 
          MUST interpret as applying to all languages unless a more specific 
          match is found. If the lang attribute is not specified, the default 
          is considered to be <spanx style="verb">all</spanx>.</t>
        
          <t>The <spanx style="verb">country</spanx> attribute specifies the 
          country code for the locale specified as an ISO-3166-1 Country code, 
          or the special value <spanx style="verb">all</spanx>, which containers 
          MUST interpret as applying to all countries unless a more specific 
          match is found. If the country attribute is not specified, the default 
          is considered to be <spanx style="verb">all</spanx>.</t>
        
          <t>The optional <spanx style="verb">language_direction</spanx> 
          attribute is used to specify the default text rendering direction. 
          Valid values are <spanx style="verb">ltr</spanx>, to indicate 
          "Left-to-Right" ordering, or <spanx style="verb">rtl</spanx> to 
          indicate "Right-to-Left" ordering. If not specified, the default text
          rendering direction is determined by the container. Directional 
          rendering of text is discussed in detail in <xref target="Localization"/>.</t>
      
          <t>The optional <spanx style="verb">views</spanx> attribute specifies 
          a comma-separated list of <xref target="content-processing-model">views</xref>
          for which the Locale information applies. Containers SHOULD only use 
          the information provided by the containing &lt;Locale&gt; element when 
          an appropriate view is being rendered.</t>
        
          <t>The optional <spanx style="verb">messages</spanx> attribute 
          specifies the IRI of an XML document conforming to the 
          <xref target="message-bundle-document"> Message Bundle Document</xref> 
          format. The IRI specified MUST be suitable for dereferencing. The 
          container MUST fetch the referenced resource and treat all 
          child elements of the root XML element in the document as though
          they are child nodes of the containing &lt;Locale&gt; element.</t>
        
          <t>Unless the <spanx style="verb">messages</spanx> attribute is 
          specified, the &lt;Locale&gt; element MAY contain zero or more &lt;msg&gt;
          elements, each of which provide a singular localized value. The 
          key used to identify the value is specified using the "name" attribute.
          The text content of the &lt;msg&gt; element provides the localized
          value. If the <spanx style="verb">messages</spanx> attribute is
          specified, the &lt;Locale&gt; element MUST NOT contain any &lt;msg&gt;
          elements.</t>
        
          <figure><preamble>An example &lt;Locale&gt; that uses a referenced
          Message Bundle Document:</preamble><artwork><![CDATA[
  <Locale language="en" country="US"
    messages="http://example.org/i18n/en/messages.xml" />
          ]]></artwork></figure>
        
          <figure><preamble>An example &lt;Locale&gt; that uses contained
          &lt;msg&gt; elements:</preamble><artwork><![CDATA[
  <Locale language="en" country="US">
    <msg name="foo">This is the American English Version</msg>
    <msg name="bar">Hello From My Gadget</msg>
  </Locale>
          ]]></artwork></figure>
      
        </section>
      
        <section title="The &lt;OAuth&gt; Element">
      
          <t>The &lt;OAuth&gt; element supplies the container with OAuth 1.0
          specific configuration details for the application. For details see
          <xref target="OAuth"/>.</t>
        
          <figure><artwork>        
  OAuth = element OAuth {
    undefinedAttribute*,
    Service*,
    extensionElement*
  }
          </artwork></figure>
        
          <t>The &lt;OAuth&gt; element contains zero or more &lt;Service&gt;
          elements, each of which detail a specific OAuth 1.0 service associated
          with the application.</t>
        
          <figure><artwork>        
  Service = element Service {
    attribute name { text }?,
    attribute view { text }?,
    attribute realm { text }?,
    undefinedAttribute*,
    element Request { OAuthResourceType }?,
    element Access { OAuthResourceType }?,
    element Authorization {
      attribute url { IRI },
      undefinedAttribute*,
      extensionElement*
    }?,
    extensionElement*
  }
  
  OAuthResourceType = {
    attribute url { IRI },
    attribute method { "GET" | "POST" }?,
    attribute param_location { 
      "auth-header" | "uri-query" | "post-body" }?,
    extensionElement*
  }
          </artwork></figure>
        
          <t>The optional <spanx style="verb">name</spanx> attribute on the 
          &lt;Service&gt; element specifies a name used to reference the 
          service at runtime. If unspecified, the value is assumed to be an 
          empty string. Gadget developers specify which OAuth Service they 
          wish to use by passing the service name, for example, as a parameter 
          to the <spanx style="verb">gadgets.io.makeRequest</spanx> and 
          <spanx style="verb">osapi.http</spanx> APIs.</t>
          
          <t>The optional <spanx style="verb">view</spanx> attribute on the 
          &lt;Service&gt; element specifies the name of a View the container 
          SHOULD display to the Viewer when the container determines that an 
          OAuth Access Token needs to be acquired. If the specified view does
          not exist within the Application specification document, the attribute
          MUST be ignored.</t>
          
          <t>The optional <spanx style="verb">realm</spanx> attribute specifies
          a realm-value as specified by <xref target="RFC2617" />. The given 
          realm-value is used to select an appropriate &lt;Service&gt; element 
          to use when authenticating a request for a remote resource should the 
          container receive a 401 Unauthenticated response. See 
          <xref target="401-unauthorized"/> for additional detail.</t>
        
          <t>The child elements of the &lt;Service&gt; element consist of the 
          &lt;Request&gt;, &lt;Access&gt; and &lt;Authorization&gt; elements,
          each of which are optional but MUST NOT appear more than once within
          a single &lt;Service&gt; element.</t>
        
          <t>The &lt;Request&gt; element identifies the endpoint for acquiring
          OAuth request tokens. The <spanx style="verb">url</spanx> attribute 
          specifies the IRI of the endpoint. This IRI MUST be suitable for 
          dereferencing. The <spanx style="verb">method</spanx> attribute 
          specifies the HTTP verb to use when sending the request, valid values 
          are either <spanx style="verb">GET</spanx> or <spanx style="verb">POST</spanx>. 
          If not specified, the value is assumed to be <spanx style="verb">POST</spanx>. 
          The <spanx style="verb">param_location</spanx> attributes specifies
          how OAuth parameters are to be passed in the request. Valid options 
          are either <spanx style="verb">uri-query</spanx>, <spanx style="verb">auth-header</spanx>,
          and <spanx style="verb">post-body</spanx>, corresponding to the options 
          described in <xref target="OAuth-Core">Section 5.2 of the OAuth 
          specification</xref>. If not specified, the value is assumed to be 
          <spanx style="verb">auth-header</spanx>.</t>
        
          <t>The &lt;Access&gt; element identifies the endpoint for acquiring
          OAuth access tokens. The &lt;Access&gt; element shares the same 
          attribute definitions as the &lt;Request&gt; element.</t>
      
          <t>The &lt;Authorization&gt; element is used to acquire authorization.
          The <spanx style="verb">url</spanx> attribute specifies the IRI of the 
          endpoint. This IRI MUST be suitable for dereferencing. For details, 
          refer to <xref target="OAuth-Core">Section 6.2 of the OAuth specification.</xref></t>
      
        </section>
      
        <section title="The &lt;OAuth2&gt; Element">
      
          <t>The &lt;OAuth2&gt; element supplies the container with OAuth 2.0
          specific configuration details for the application. For details see
          <xref target="OAuth"/>.</t>
        
          <figure><artwork>        
  OAuth2 = element OAuth2 {
    undefinedAttribute*,
    Service*,
    extensionElement*
  }
          </artwork></figure>
        
          <t>The &lt;OAuth2&gt; element contains zero or more &lt;Service&gt;
          elements, each of which detail a specific OAuth 2.0 service associated
          with the application.</t>
        
          <figure><artwork>        
  Service = element Service {
    attribute name { text }?,
    attribute view { text }?,
    attribute realm { text }?,
    attribute scope { text }?,
    undefinedAttribute*,
    element Authorization {
      attribute url { IRI },
      attribute method { "GET" | "POST" }?,
      undefinedAttribute*,
      extensionElement* 
    }?,
    element Token {
      attribute url {IRI},
      undefinedAttribute*,
      extensionElement*
    }?,
    extensionElement*
  }
          </artwork></figure>
        
          <t>The optional <spanx style="verb">name</spanx> attribute on the 
          &lt;Service&gt; element specifies a name used to reference the 
          service at runtime. If unspecified, the value is assumed to be an 
          empty string. Gadget developers specify which OAuth Service they 
          wish to use by passing the service name as a parameter, for example,
          to the <spanx style="verb">gadgets.io.makeRequest</spanx> or 
          <spanx style="verb">osapi.http</spanx> APIs.</t>
          
          <t>The optional <spanx style="verb">view</spanx> attribute on the 
          &lt;Service&gt; element specifies the name of a View the container 
          SHOULD display to the Viewer when the container determines that an 
          OAuth Access Token needs to be acquired. If the specified view does
          not exist within the Application specification document, the attribute
          MUST be ignored.</t>
          
          <t>The optional <spanx style="verb">realm</spanx> attribute specifies
          a realm-value as specified by <xref target="RFC2617" />. The given 
          realm-value is used to select an appropriate &lt;Service&gt; element 
          to use when authenticating a request for a remote resource should the 
          container receive a 401 Unauthenticated response. See 
          <xref target="401-unauthorized"/> for additional detail.</t>
        
          <t>OAuth2 Service elements MAY also specify an optional 
          <spanx style="verb">scope</spanx> attribute providing the scope 
          used by default in all requests. Access Token Scope
          is defined in Section 3.3 of the <xref target="OAuth2-Core">OAuth 2.0
          specification.</xref></t>
        
          <t>The child elements of the &lt;Service&gt; element consist of the 
          &lt;Authorization&gt;, &lt;Token&gt; elements,
          each of which are optional but MUST NOT appear more than once within
          a single &lt;Service&gt; element.</t>
        
          <t>The &lt;Authorization&gt; element identifies the endpoint for acquiring
          OAuth authorization tokens. The <spanx style="verb">url</spanx> 
          attribute specifies the IRI of the endpoint. This IRI MUST be 
          suitable for dereferencing. The <spanx style="verb">method</spanx>
          attribute specifies the HTTP verb to use when sending the request, 
          valid values are either <spanx style="verb">GET</spanx> or 
          <spanx style="verb">POST</spanx>. If not specified, the value
          is assumed to be <spanx style="verb">GET</spanx>.</t>
        
          <t>The &lt;Token&gt; element is used to acquire OAuth 2.0 access tokens.
          The <spanx style="verb">url</spanx> attribute specifies the IRI of the 
          endpoint. This IRI MUST be suitable for dereferencing. For details, 
          refer to <xref target="OAuth2-Core">Section 3.2 of the OAuth 2.0 
          specification.</xref></t>
      
        </section>
      
        <section title="The &lt;UserPref&gt; Element">
      
          <t>The &lt;UserPref&gt; element is used within a specification document
          to define a "user preference" for use within instances of the application. 
          Each instance of the &lt;UserPref&gt; element defines exactly one 
          preference value. Multiple &lt;UserPref&gt; elements MAY be used within 
          a specification document.</t>
        
          <t>Containers MUST process each &lt;UserPref&gt; by making each 
          available to the application via the <spanx style="verb">gadgets.Prefs</spanx>
          API, using the value of &lt;UserPref&gt; element's required 
          <spanx style="verb">name</spanx> attribute as the index key for 
          storing and retrieving preferences using the API.</t>
        
          <figure><artwork>
  BaseUserPref = {
    attribute name { text },
    attribute display_name { text }?,
    attribute default_value { text }?,
    attribute required { "true" | "false" }?,
    undefinedAttribute*,
    extensionElement*
  }
        
  SimpleUserPref = element UserPref {
    BaseUserPref,
    attribute datatype { 
      "string" | 
      "hidden" | 
      "bool" |
      "list" | 
      "number" }?
  }
        
  EnumUserPref = element UserPref {
    BaseUserPref,
    attribute datatype { "enum" },
    element EnumValue {
      attribute value { text },
      attribute display_value { text }?,
      undefinedAttribute*,
      extensionElement*
    }*
  }
  
  UserPref = element SimpleUserPref | EnumUserPref
          </artwork></figure>
        
          <t>The <spanx style="verb">datatype</spanx> attribute specifies the 
          data type for the instances of the preference value at runtime. 
          Valid values are <spanx style="verb">string</spanx>, 
          <spanx style="verb">hidden</spanx>, <spanx style="verb">bool</spanx>, 
          <spanx style="verb">list</spanx> and <spanx style="verb">number</spanx>. 
          If not specified, the value is assumed to be <spanx style="verb">string</spanx>. 
          For more information on <spanx style="verb">datatype</spanx>, refer to 
          <xref target="datatypes-values"/> below.</t>
        
          <t>The <spanx style="verb">display_name</spanx> attribute specifies 
          a preferred display name for the preference. The value SHOULD be 
          localized as described in <xref target="Localization" />.</t>
        
          <t>The <spanx style="verb">default_value</spanx> attribute specifies 
          the default value for instances of the preference. The value of the 
          attribute depends on the value of the <spanx style="verb">datatype</spanx> 
          attribute. Container's are required to provide the value of the 
          <spanx style="verb">default_value</spanx> attribute as the value of 
          the preference when using the <spanx style="verb">gadgets.Prefs</spanx> 
          API and a stored value for the preference does not yet exist.</t>
        
          <t>The <spanx style="verb">required</spanx> attribute specifies 
          whether instances of the preference require a valid value in order 
          for the application to function correctly. Valid values are either 
          <spanx style="verb">true</spanx> or <spanx style="verb">false</spanx>. 
          If not specified, the value is assumed to be <spanx style="verb">false</spanx>. 
          If the value is <spanx style="verb">true</spanx>, Containers are
          required to display an error message or a prompt if there is no value 
          stored.</t>
        
          <section title="User Preference Data Types" anchor="datatypes-values">
        
            <t>The default data type for all user preference values is 
            <spanx style="verb">string</spanx>, represented either by omitting 
            the <spanx style="verb">datatype</spanx> attribute on the &lt;UserPref&gt; 
            element or by explicitly specifying <spanx style="verb">datatype="string"</spanx>. 
            When datatype is <spanx style="verb">string</spanx>, The value of 
            the <spanx style="verb">default_value</spanx> attribute and the 
            stored value of the user preference at runtime MUST be a String.</t>
          
            <figure><preamble>An example <spanx style="verb">string</spanx> 
            preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="string" default_value="foo"
            display_name="Foo" required="true" />
          ]]></artwork></figure>
          
            <t>When datatype equals <spanx style="verb">number</spanx>, the 
            value of the <spanx style="verb">default_value</spanx> attribute 
            and the stored value of the user preference at runtime MUST be 
            a numeric value. The value MAY be any integer, decimal or floating
            point value.</t>
          
            <figure><preamble>An example <spanx style="verb">number</spanx> preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="number" default_value="123"
            display_name="Foo" required="true" />
            ]]></artwork></figure>
          
            <t>When datatype equals <spanx style="verb">bool</spanx>, the value 
            of the <spanx style="verb">default_value</spanx> attribute and the 
            stored value of the user preference MUST evaluate to either True 
            or False when accessed via the <spanx style="verb">gadgets.Prefs.getBool</spanx> 
            API.</t>
          
            <figure><preamble>An example <spanx style="verb">bool</spanx> preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="bool" default_value="true"
            display_name="Foo" required="true" />
            ]]></artwork></figure>
          
            <t>When datatype equals <spanx style="verb">list</spanx>, the value 
            of the <spanx style="verb">default_value</spanx> attribute and the 
            stored value of the user preference MUST be a pipe-delimited (|) 
            string of values, returned as a JavaScript array when accessed via 
            the <spanx style="verb">gadgets.Prefs.getArray</spanx> API.</t>
          
            <figure><preamble>An example <spanx style="verb">list</spanx> preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="list" default_value="foo|bar|baz"
            display_name="Foo" required="true" />
            ]]></artwork></figure>
          
            <t>When datatype equals <spanx style="verb">hidden</spanx>, the 
            value of the <spanx style="verb">default_value</spanx> attribute 
            and the stored value of the user preference MUST be a String. 
            The difference between <spanx style="verb">hidden</spanx> and 
            <spanx style="verb">string</spanx> is that <spanx style="verb">hidden</spanx> 
            user preferences are not visible and are not editable by users by 
            can be accessible via the <spanx style="verb">gadgets.Prefs.getString</spanx> 
            API.</t>
          
            <figure><preamble>An example <spanx style="verb">hidden</spanx> preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="hidden" default_value="foo"
            display_name="Foo" required="true" />
            ]]></artwork></figure>
          
            <t>When datatype equals <spanx style="verb">enum</spanx>, the 
            &lt;UserPref&gt; element SHOULD contain one or more &lt;EnumValue&gt; 
            elements, each of which define a single possible value for the 
            preference. Each &lt;EnumValue&gt; element contains a required 
            <spanx style="verb">value</spanx> attribute that specifies a
            string value, and an optional <spanx style="verb">display_value</spanx> 
            attribute that specifies a textual representation of the 
            <spanx style="verb">value</spanx>. If unspecified, the 
            <spanx style="verb">display_value</spanx> defaults to the 
            <spanx style="verb">value</spanx>. Containers SHOULD display
            the <spanx style="verb">display_value</spanx> in place of 
            <spanx style="verb">value</spanx> when rendering a user 
            interface for editing purposes. The value of the 
            <spanx style="verb">default_value</spanx> attribute and the 
            stored value of the user preference MUST equal one of the supplied 
            &lt;EnumValue&gt; <spanx style="verb">value</spanx> attributes.</t>
        
            <figure><preamble>An example <spanx style="verb">enum</spanx> 
            preference:</preamble>
            <artwork><![CDATA[
  <UserPref name="foo" datatype="string" default_value="foo"
            display_name="Foo" required="true">
    <EnumValue value="foo" display_value="Foo" />
    <EnumValue value="bar" display_value="Bar" />
    <EnumValue value="baz" display_value="Baz" />
  </UserPref>
            ]]></artwork></figure>
   
          </section>        
      
        </section>
      
        <section title="The &lt;Data&gt; Element">
      
          <t>The &lt;Data&gt; element contains data pineline elements as 
          defined by <xref target="DataPipelining"/>. All data pipeline
          elements defined in this block are registered globlly for all
          views by default. Individual data pipeline elements MAY be specified
          for particular views by adding the <spanx style="verb">view</spanx> 
          attribute to the tag.</t>
        
          <figure><artwork>
  Data = element Data {
    undefinedAttribute*,
    extensionElement*
  }
          </artwork></figure>
        
          <t>See <xref target="DataPipelining"/> for complete information
          on the data pipelining mechanism and element definitions.</t>
      
        </section>
      
        <section title="The &lt;ExternalServices&gt; Element">
      
          <t>The &lt;ExternalServices&gt; element contains zero or more
          &lt;ServiceTag&gt; elements used to establish an "alias"
          for container-managed external services utilized by the application.</t>
        
          <figure><artwork>
  ExternalServices = element ExternalServices {
    undefinedAttribute*,
    element ServiceTag {
      attribute alias { text },
      text
    }*
  }
          </artwork></figure>
        
          <t>The &lt;ServiceTag&gt; element has a single <spanx style="verb">alias</spanx>
          attribute whose value is a string and textual content that provides 
          an application-specific plain-text label for the alias. Additional markup 
          within the &lt;ServiceTag&gt; is not allowed.</t>
       
          <t>Currently, when making a remote request from within an application using
          either the <spanx style="verb">osapi.http</spanx> or 
          <spanx style="verb">gadgets.io.makeRequest</spanx> APIs, 
          the full URL of the remote service that is being invoked must be known
          to the application and specified within the request, along with all other 
          details of the request. Often, however, it is desirable to offload the 
          responsibility of managing access to external services to the container,
          for instance, when multiple services are available that implement the
          same protocol and it would be difficult for a single application to keep 
          track of all instances; or when a potentially untrusted application needs to be given
          access to secure backend systems. In such cases, a container can choose
          to manage all of the details involved with connecting to and communicating
          with the service and expose that service to the application via an "alias".</t>
        
          <t>Once an alias for a service is established, a specification document
          can use the &lt;ServiceTag&gt; element within &lt;ExternalServices&gt;
          to declare an application-specific reference label for the alias that can be 
          used when invoking the <spanx style="verb">osapi.http</spanx> or 
          <spanx style="verb">gadgets.io.makeRequest</spanx> APIs in place of 
          the URL.</t>

          <t>For example, suppose that an application requires access to a backend 
          enterprise application that implements a proprietary communications 
          protocol. Software is added to the container that allows it to 
          communicate with the backend system. All of the details including the
          URL, authentication details, authorization, and so forth are configured
          within the container by an administrator and an alias is assigned to
          the service: "opensocial:service://example.com/api?version=1".</t>
        
          <t>The developer then creates the specification document and adds
          a &lt;ServiceTag&gt; element referencing the alias and created a lobel
          for the alias that can be used within the application's Javascript:</t>
        
          <figure><artwork><![CDATA[
  <Module>
    ...
    <ExternalServices>
      <ServiceTag alias="opensocial:service://example.com/api?version=1">
        EnterpriseService
      </ServiceTag>
    </ExternalServices>
    <Content>
      ...
      <script>
        ...
        var params = {
          'alias' : 'EnterpriseService',
          'href'  : '/files',
          'format': 'json',
        };
        osapi.http.get(params).execute(
          function(result) {
            ...
          }
        );
        ...
      </script>
      ...
    </Content>
  </Module>
          ]]></artwork></figure>
        
          <t>When the application is installed, the container will attempt to match
          the alias specified in the &lt;ServiceTag&gt; to any known configured
          services -- in this case, our backend enterprise service -- and will 
          automatically proxy all requests to the "EnterpriseService" label
          to the backend service.</t>
        
          <t>It is possible for multiple service instances managed by a
          single container to share the same alias; for instance, when there are 
          multiple servers available that implement the same communication protocols. 
          In such cases, when the application is installed, the container can either 
          automatically select an appropriate service instance to map the &lt;ServiceTag&gt;
          to or provide a choice to the user installing the application to select 
          which service instance to use.</t>
        
          <t>If a &lt;ServiceTag&gt; specifies an alias that is not currently 
          known to the container, installation of the application SHOULD fail and 
          an error reported.</t>
      
        </section>

        <section title="The &lt;Content&gt; Element">
      
          <t>The &lt;Content&gt; element provides the user interface and 
          runtime code for the application. A specification document MUST have 
          at least one &lt;Content&gt; element.</t>
        
          <figure><artwork>
  CommonContent = {
    attribute preferred_height { text }?,
    attribute preferred_width { text }?,
    attribute view { text }?,
    undefinedAttribute*
  }
        
  RedirectedContent = element Content {
    CommonContent,
    SignedFetch,
    attribute type { "url" },
    attribute href ( IRI )
  }
  
  ProxiedContent = element Content {
    CommonContent,
    SignedFetch,
    attribute type { "html" }?,
    attribute href { IRI },
    extensionElement*
  }
  
  HtmlContent = element Content {
    CommonContent,
    attribute type { "html" }?,
    text
  }
  
  Content = RedirectedContent | HtmlContent | ProxiedContent
          </artwork></figure>
       
          <t>The required <spanx style="verb">type</spanx> attribute specifies 
          the type of content provided by the &lt;Content&gt; element. Valid 
          values are either <spanx style="verb">html</spanx> or 
          <spanx style="verb">url</spanx>. Containers MUST process the 
          &lt;Content&gt; element according to the specific rules for each type.</t>

          <t>The &lt;Content&gt; element MUST conform to the following rules:</t>
        
          <list style="numbers">
            <t>If the value of <spanx style="verb">type</spanx> is 
            <spanx style="verb">html</spanx> and the <spanx style="verb">href</spanx> 
            attribute is specified, the content of &lt;Content&gt; MAY contain 
            one or more Data Pipeline elements as defined in <xref target="DataPipelining"/>.
            The &lt;Content&gt; element MAY also contain any combination of the
            "Signed Fetch" attributes defined by <xref target="signed-fetch" />.</t>
            <t>If the value of <spanx style="verb">type</spanx> is <spanx style="verb">html</spanx>,
            and the <spanx style="verb">href</spanx> attribute is not specified,
            the content of &lt;Content&gt; MUST NOT contain child elements and 
            SHOULD be suitable for handling as HTML markup.  The HTML markup 
            SHOULD be wrapped within a CDATA tag otherwise it MUST be escaped 
            in order to prevent the HTML from being interpreted by the XML parser; 
            for example, <spanx style="verb">&lt;br></spanx> as <spanx style="verb">&amp;lt;br></spanx>.</t>
            <t>If the value of <spanx style="verb">type</spanx> is <spanx style="verb">url</spanx>,
            the &lt;Content&gt; element MUST contain the <spanx style="verb">href</spanx> 
            attribute and MUST NOT contain child elements or text. Containers 
            SHOULD ignore any elements or text contained within the &lt;Content&gt;.
            The element MAY contain any combination of the "Signed Fetch" 
            attributes defined by <xref taret="signed-fetch"/>.</t>
            <t>Any &lt;Content&gt; element MAY contain <spanx style="verb">preferred_height</spanx> 
            and <spanx style="verb">preferred_width</spanx> attributes that 
            specify the preferred dimensions, in pixels, the container SHOULD 
            use when rendering the content.</t>
            <t>Any &lt;Content&lt; element MAY contain a <spanx style="verb">view</spanx> 
            attribute that specifies a comma-separated list of views. A single 
            application can support multiple views. Each view is associated 
            with at least one &lt;Content&gt; element. When the container 
            renders an application with multiple &lt;Content&gt; elements, it will 
            use the view name to select the appropriate content.</t>    
          </list>

          <t>When a &lt;Content&gt; element uses the <spanx style="verb">href</spanx> 
          attribute, the view names listed in it's <spanx style="verb">view</spanx> attribute MUST NOT 
          be used in any other &lt;Content&gt; element. A single view name MAY
          appear within multiple &lt;Content&gt; elements that specify
          a <spanx style="verb">type</spanx> attribute value of <spanx style="verb">html</spanx>
          and do not include an <spanx style="verb">href</spanx> attribute.
          How multiple &lt;Content&gt; elements sharing the same view name are 
          processed to provide the rendered content for a view is defined in 
          <xref target="content-processing-model"/>.</t>
      
          <section title="Processing Model" anchor="content-processing-model">
            
            <t>The full collection of &lt;Content&gt; elements contained within
            a single application specification document belong to one or more 
            abstract Views. A View consists of all the stylesheets, script, and
            markup that comprise the application's visual interface to a 
            user and can be constructed from one or more individual &lt;Content&gt;
            elements either from markup contained directly within the application
            specification document or from external documents and resources 
            referenced by IRI.</t>
            
            <t>All applications have a single unnamed default view and zero
            or more named views.</t>
            
            <t>View names are Strings consisting of one or two groups of one or 
            more ASCII alpha-numeric characters, with each group optionally 
            separated by the ASCII period (".") character, e.g. "home", "canvas", 
            "foo", "home.About", etc. View names are case-sensitive such that 
            "Home", "home", and "HOME" are NOT considered to be equivalent.</t>
            
            <figure><artwork>
  name = 1*(ALPHA / DIGIT)
  viewname = name *["." name]
  viewnames = viewname *[ OWS "," OWS name]
            </artwork></figure>
            
            <t>Containers MAY assign specific meaning to particular view names.
            In particular, this specification assigns the following special 
            meanings to each of the given view names:
              <texttable>
                <ttcol>Name</ttcol>
                <ttcol>Description</ttcol>
                
                <c>about</c>
                <c>Identifies a View that provides descriptive information 
                about the application.</c>
                
                <c>canvas</c>
                <c>Identifies a View that is typically rendered by the container
                in a large area that is generally not shared with other 
                application views.</c>
                
                <c>embedded</c>
                <c>Identifies a View that is intended for use primarily with 
                <xref target="EmbeddedExperiences">Embedded Experiences</xref>.
                When a container displays an application View using the 
                <spanx style="verb">gadgets.views.openEmbeddedExperience</spanx>
                API, it will, by default, render the "embedded" View.</c>
                
                <c>home</c>
                <c>Identifies a View that is typically rendered by the container
                on a page with other application views. These are typically 
                assigned relatively small areas of the available display 
                area for the page.</c>
                
                <c>preferences</c>
                <c>Identifies a View that is typically used to allow the user
                to view and modify user preferences for the application.</c>
                
                <c>preview</c>
                <c>Identifies a View that is typically used to provide a 
                demonstration view of the application.</c>
                
                <c>profile</c>
                <c>Identifies a View that, like "home", is typically rendered by
                the container on a page with other application views. The 
                difference with PROFILE, however, is that the page into which
                the View is included will typically represent a "Profile" view
                of an individual person or entity. For example, when displayed 
                on the profile page for a person, an application View might 
                provide an interface for scheduling a meeting with that person
                or initiating a Voice-over-IP call, and so forth.</c>
                
                <c>support</c>
                <c>Identifies a View that provides details about where 
                users can acquire support information for the application,
                typically including contact information and links to 
                product documentation, etc.</c>
                
              </texttable>
            </t>
            
            <t>Individual &lt;Content&gt; elements are associated with one 
            or more distinct views through the use of the <spanx style="verb">view</spanx>
            attribute.</t>
            
            <figure><preamble>For example, the following &lt;Content&gt; element
            is associated with two separate Views: "home" and "foo". When the 
            container receives a request to render either the "home" or "foo" 
            Views, it will use the markup provided by this &lt;Content&gt; 
            element:</preamble><artwork><![CDATA[
  <Content type="html" view="home,foo">
    ABC
  </Content>
            ]]></artwork></figure>
            
            <t>When a &lt;Content&gt; element is used without a <spanx style="verb">view</spanx>
            attribute, it automatically becomes associated with the unnamed
            default view.</t>
            
            <t>How any given View is constructed by the container for the application
            depends largely on which kinds of &lt;Content&gt; elements are used.
            There are three distinct kinds of &lt;Content&gt; elements:
              <list style="symbols">
                <t>"HTML Content" refers to &lt;Content&gt; elements that 
                directly contain HTML markup, scripts and stylesheets;</t>
                <t>"Proxied Content" refers to &lt;Content&gt; elements that
                use an IRI to reference HTML markup that is external to the 
                application specification document but that is to be retrieved
                and processed by the container prior to display as if it were
                contained directly within the &lt;Content&gt; element; and</t>
                <t>"Redirected Content" refers to &lt;Content&gt; elements that
                use an IRI to reference HTML markup that is displayed directly
                to the use without any processing performed by the container.</t>
              </list>
            </t>

            <t>The unnamed default View is rendered automatically by the 
            Container when a request to display an application is received 
            and either a specific view name is not specified in the render 
            request or the view name that is specified does not exist within 
            the application specification. If there are no &lt;Content&gt;
            elements within the application specification  
            associated with the unnamed default (i.e. no &lt;Content&gt;
            elements that do not have a <spanx style="verb">view</spanx>
            attribute), then the container will attempt to render the 
            "home" view as the default. If there are no &lt;Content&gt;
            elements associated with either the "home" view or the unnamed
            default view, the container SHOULD report an error to the user 
            and abort the attempt to display the application.</t>
            
            <figure><preamble>For example, by default, a container rendering
            the following application will display the characters "AB":</preamble>
            <artwork><![CDATA[
  <Module>
    <ModulePrefs title="foo" />
    <Content type="html">AB</Content>
    <Content type="html" view="home">CD</Content>
  </Module>
            ]]></artwork></figure>
            
            <figure><preamble>However, a container rendering
            the following application will, by default, display the 
            characters "CD":</preamble>
            <artwork><![CDATA[
  <Module>
    <ModulePrefs title="foo" />
    <Content type="html" view="foo">AB</Content>
    <Content type="html" view="home">CD</Content>
  </Module>
            ]]></artwork></figure>
            
            <t>The specific considerations for View construction relative to 
            each type of &lt;Content&gt; is outlined in the sections that 
            follow.</t>

            <section title="HTML Content">
          
              <figure><preamble>The simplest form of content provided by an application is HTML 
              associated with the unnamed default view:</preamble><artwork>
  &lt;Content type="html">&lt![CDATA[
    &lt;div>Hello World!&lt;/div>
  ]]&gt;&lt;/Content>
              </artwork></figure>
            
              <t>When the container renders the default view for the application, it 
              will select this &lt;Content&gt; element and display the HTML 
              "&lt;div>Hello World!&lt;/div>" to the user.</t>
            
              <figure><preamble>An equivalent example can be provided by using the 
              "home" view in the element's <spanx style="verb">view</spanx> attribute:</preamble>
              <artwork>
  &lt;Content type="html" view="home">&lt![CDATA[
    &lt;div>Hello World!&lt;/div>
  ]]&gt;&lt;/Content>
              </artwork></figure>
            
              <t>If an application provides multiple type "html" &ltContent&gt; elements that
              specify the same view, the content is concatenated together when 
              rendered in the order those &lt;Content&gt; elements appear within
              the specification document:</t>
            
              <figure><preamble>For instance, given two "html" Content elements 
              for the "home" view:</preamble><artwork>
  &lt;Content type="html" view="home">&lt![CDATA[
    &lt;div>Hello World!&lt;/div>
  ]]&gt;&lt;/Content>
  &lt;Content type="html" view="home,greeting">&lt![CDATA[
    &lt;div>How are you?&lt;/div>
  ]]&gt;&lt;/Content>
              </artwork></figure>
            
              <figure><preamble>When rendering the "home" view, the container 
              would generate the following:</preamble><artwork>
  &lt;div>Hello World!&lt;/div>
  &lt;div>How are you?&lt;/div>
              </artwork></figure>
            
              <figure><preamble>However, when rendering the "greeting" view, 
              the container would only select the &lt;Content&gt; element 
              that lists the "greeting" view, producing:</preamble><artwork>
  &lt;div>How are you?&lt;/div>
              </artwork></figure>
            
              <t>Once the HTML content for a view has been assembled from the 
              appropriate &lt;Content&gt; elements, the container MUST perform
              Variable Substitution on the resulting content as defined by
              <xref target="variable-substitution"/>.</t>
              
              <t>Only type "html" &lt;Content&gt; elements can be concatenated
              together in this fashion.</t>
            
            </section>
          
            <section title="Proxied Content">
          
              <t>As an alternative to including HTML markup directly within 
              the specification document, a &lt;Content&gt; element that uses
              type="html" MAY reference an external resource containing 
              HTML markup using the "href" attribute. When the View is 
              rendered, the container will fetch the external resource and 
              process it's HTML content as if it were included directly 
              within the &lt;Content&gt; element. This is commonly referred
              to as "Proxied Content".</t>
              
              <figure><preamble>An example of proxied content 
              associated with the unnamed default view:</preamble><artwork>
  &lt;Content type="html" href="http://example.org/hello.html"/>
              </artwork></figure>
              
              <t>When rendering the default view for an application containing
              the above &lt;Content&gt; element, the container will issue an 
              HTTP request to the address provided by the 
              <spanx style="verb">href</spanx> attribute to retrieve the content.</t>
              
              <t>The container MUST add the following additional query 
              string parameters to the address provided by the 
              <spanx style="verb">href</spanx> attribute:
                <list style="hanging">
                  <t hangText="lang">The preferred language of the user for which
                  the content is being rendered, specified as an ISO-639-1 
                  language code.</t>
                  <t hangText="country">The country of the user for which the 
                  content is being rendered, specified as an ISO-3166-1 
                  country code.</t>
                  <t hangText="opensocial_proxied_content">MUST be specified 
                  using the value "1". Servers can use this to identify
                  proxied content renders from other types of requests.</t>
                </list>
              </t>
            
              <t>When the remote service returns the HTML content back to the 
              container, the container will process it as if the HTML had been 
              directly included within the application specification.</t>
              
              <t>Note that, whereas multiple HTML Content elements MAY share a 
              common view name, the view names associated with Proxied Content MUST be 
              unique to that &lt;Content&gt; element, thereby making concatentation 
              unnecessary. The container MUST, however, still perform 
              Variable Substitution on the returned HTML content.</t>
  
              <t>If the response to the proxied request returns an unsuccessful 
              HTTP status code, the container SHOULD present a meaningful error 
              message to the end user. Containers SHOULD obtain a suitable error 
              message for display by displaying the content specified for a view 
              named as "{view-name}.error", where {view-name} matches the name 
              of the view that the proxied request was being processed for. If an 
              exact match can not be found, the special view name "default.error" should 
              be used. If content for the "default.error" is not present, the 
              container SHOULD display a generic message indicating that a 
              problem occurred.</t>
            
              <figure><preamble>For instance, A Proxied Content for the "greeting"
              view with a specific "greeting.error" view to display error responses:</preamble><artwork>
  &lt;Content type="html" href="http://example.org/hello.html" views="greeting"/>
  &lt;Content type="html" views="greeting.error">
    There was an error retrieving the greeting content.
  &lt;/Content>
              </artwork></figure>
            
              <figure><preamble>An alternative Proxied Content for the "greeting"
              view that uses the "default.error" view to display error responses:</preamble><artwork>
  &lt;Content type="html" href="http://example.org/hello.html" views="greeting"/>
  &lt;Content type="html" views="default.error">
    There was an error retrieving the content.
  &lt;/Content>
              </artwork></figure>
              
              <t>Typically, the container will issue an HTTP GET request to 
              retrieve the content referenced by the <spanx style="verb">href</spanx>
              attribute. However, there are times when additional information 
              beyond that provided by the request URI of an HTTP GET is required.
              In such cases, proxy type &lt;Content&gt; elements MAY contain 
              <xref target="data-pipeline-proxy">Data Pipeline</xref> elements
              that define the payload of an HTTP POST request to fetch the 
              remote content.</t>
              
              <t>Containers are permitted to cache proxied content following 
              the requirements specified in <xref target="caching"/>.</t>
            
            </section>
          
            <section title="Redirected Content">
            
              <t>When using Proxied Content, the container is responsible for
              sending the HTTP request to the remote server and processing the
              content while the view is being rendered. Alternatively, by 
              using <spanx style="verb">type="url"</spanx> within the &lt;Content&gt; 
              element, the container can be instructed to provide a "direct view" 
              of the content retrieved from the remote source without additional 
              processing. When the view is being rendered for display within 
              a Web Browser, this can be achieved by using an HTML IFrame whose 
              src attribute is set to the value of the &lt;Content&gt; element's 
              <spanx style="verb">href</spanx> attribute. This is commonly 
              referred to as "Redirected Content".</t>
            
              <figure><preamble>An example of redirected content 
              associated with the unnamed default view:</preamble><artwork>
  &lt;Content type="url" href="http://example.org/hello.html"/>
              </artwork></figure>
              
              <t>The container MUST add the following additional query 
              string parameters to the address provided by the 
              <spanx style="verb">href</spanx> attribute:
                <list style="hanging">
                  <t hangText="lang">The preferred language of the user for which
                  the content is being rendered, specified as an ISO-639-1 
                  language code.</t>
                  <t hangText="country">The country of the user for which the 
                  content is being rendered, specified as an ISO-3166-1 
                  country code.</t>
                  <t hangText="libs">An absolute URL reference that points to 
                  any JavaScript resources necessary to satisfy the optional 
                  or required features listed within the specification document's
                  &lt;ModulePrefs&gt;. This URL MUST be suitable for setting as
                  the value of an HTTP script tags src attribute and MUST return
                  a JavaScript resource when dereferenced.</t>
                </list>
              </t>
            
              <figure><preamble>When rendering the default view for an application containing
              the above Redirected Content element, a Web-browser based container 
              would generate the following:</preamble><artwork>
  ...
  &gt;iframe src="http://example.org/hello.html?language=en&amp;country=US&amp;libs=http://container.example.com/js/core:rpc:blah.js"
  ...
              </artwork></figure>
              
              <t>Like Proxied Content, view names associated with Redirected
              Content MUST not be shared with any other &lt;Content&gt; elements
              making concatenation unnecessary. Additionally, because Redirected
              Content is rendered exactly as it is provided by the remote service,
              Variable Substitution is not required. </t>
            
            </section>
          
            <section title="Authentication for Proxied and Redirected Content" anchor="signed-fetch">
            
              <t>For Proxied and Redirected Content, the Signed Fetch mechanism 
              described in <xref target="SignedFetch"/> MAY be used to specify 
              the type of authentication used in the request sent to the remote 
              service.</t>
            
              <figure><preamble>The Signed Fetch attributes defined below MAY
              be used on any Proxied and Redirected Content elements:</preamble><artwork>
            
  NoAuth = {
    attribute authz { "none" }?
  }
  
  AuthCommon = {
    attribute refresh_interval { text }?,
    attribute sign_owner { "true" | "false" }?,
    attribute sign_viewer { "true" | "false" }?
  }
  
  OAuth1 = {
    AuthCommon,
    attribute authz { "oauth" },
    attribute oauth_received_callback { text }?,
    attribute oauth_request_token { text }?,
    attribute oauth_request_token_secret { text }?,
    attribute oauth_service_name { text }?,
    attribute oauth_token_name { text }?,
  }
            
  OAuth2 = {
    AuthCommon,
    attribute authz { "oauth2" },
    attribute oauth_received_callback { text }?,
    attribute oauth_request_token { text }?,
    attribute oauth_request_token_secret { text }?,
    attribute oauth_service_name { text }?,
    attribute oauth2_scope { text }?,
    attribute oauth_token_name { text }?,
  }
  
  SignedAuth = {
    AuthCommon,
    attribute authz { "signed" },
  }
  
  SignedFetch = NoAuth | OAuth1 | OAuth 2 | SignedAuth
              </artwork></figure>
            
              <t>The <spanx style="verb">authz</spanx> attribute identifies the 
              authentication type used when submitting the request to fetch the 
              resource. The valid values are <spanx style="verb">none</spanx>, 
              <spanx style="verb">oauth</spanx>, <spanx style="verb">oauth2</spanx> 
              or <spanx style="verb">signed</spanx>.
              When not specified, the default is assumed to be 
              <spanx style="verb">none</spanx> indicating that no 
              authentication mechanism is to be used.</t>
          
              <t>When <spanx style="verb">authz</spanx> is equal to 
              <spanx style="verb">oauth</spanx>, requests sent to the 
              remote service MUST be authenticated using the OAuth 1.0 
              protocol as described in <xref target="auth.oauth1" />.</t>
              
              <t>When <spanx style="verb">authz</spanx> is equal to 
              <spanx style="verb">oauth2</spanx>, requests sent to the 
              remote service MUST be authenticated using the OAuth 2.0 
              protocol as described in <xref target="auth.oauth2" />.</t>
              
              <t>When <spanx style="verb">authz</spanx> is either 
              <spanx style="verb">oauth</spanx> or <spanx style="verb">oauth2</spanx>, 
              the following additional optional attributes MAY be included, each 
              with identical semantics as the similarly named request parameters
              discussed in <xref target="declaring-oauth"/>:
                <list style="symbols">
                  <t>oauth_received_callback,</t>
                  <t>oauth_request_token,</t>
                  <t>oauth_request_token_secret,</t>
                  <t>oauth_service_name,</t>
                  <t>oauth_token_name,</t>
                  <t>oauth_use_token</t>
                </list>
              </t>
              
              <t>Further, when <spanx style="verb">authz</spanx> is equal to
              <spanx style="verb">oauth2</spanx>, the optional <spanx style="verb">oauth2_scope</spanx>
              attribute MAY be included as defined by <xref target="OAuth"/>.</t>
          
              <t>When <spanx style="verb">authz</spanx> is equal to 
              <spanx style="verb">signed</spanx>, the "Signed Fetch" mechanism
              described by <xref target="SignedFetch"/> is to be used.</t>
          
              <t>The <spanx style="verb">sign_owner</spanx> attribute indicates 
              whether the identity of the <xref target="Application-Roles">Instance 
              Owner</xref> needs to be included in the request sent to fetch the resource. 
              If the value of this attribute is "true", the container MUST 
              include the identity of the Instance Owner.</t>
              
              <t>The <spanx style="verb">sign_viewer</spanx> attribute indicates 
              whether the identity of the current <xref target="Application-Roles">Viewer</xref> 
              needs to be included in the request sent to fetch the resource.
              If the value of this attribute is <spanx style="verb">true</spanx>, 
              the container MUST include the identity of the Viewer.</t>

            </section>
          
          </section>
        </section>

        <section title="Extensibility">

          <t>This specification defines the complete XML vocabulary 
          of the OpenSocial Application Specification document. Markup
          from other vocabularies ("foreign markup") can be used within
          an Application Specification.</t>
          
          <t>Note that future versions of this specification can add
          elements and attributes to the Application Specification
          vocabulary. Software written to conform to this version of the 
          specification will be unable to process such markup correctly
          and will not be able to distinguish it from markup error. For
          the purposes of this discussion, all unrecognized markup from 
          the Application Specification vocabulary will be considered
          to be "foreign markup".</t>
          
          <t>This vocabulary allows foreign markup anywhere in an Application
          Specification document, except where it is explicitly forbidden. 
          Containers that encounter foreign markup in a location that is
          legal according to this specification MUST NOT stop processing or
          signal an error.  It might be the case that the container is
          able to process the foreign markup correctly and does so.  Otherwise,
          such markup is termed "unknown foreign markup".</t>

          <t>When unknown foreign markup is encountered as a child of any 
          element, containers MAY bypass the markup and any textual content 
          and MUST NOT change their behavior as a result of the markup's presence.</t>

        </section>

      </section> <!-- END DOCUMENT STRUCTURE -->
  
    </section>
  
  <section title="Container-Provided Capabilities">
 
    <section title="Authentication" anchor="authentication">
    
      <t>Many applications require the ability to access content and 
      resources that are external to the container currently hosting 
      instances of the application. Such information and resources are often
      sensitive in nature and requests need to include authentication
      and authorization details.</t>
      
      <t>All containers are required to provide at least three basic mechanisms 
      for authenticating requests to remote endpoints:
        <list style="hanging">
          <t hangText="OAuth 1.0a">Is a variation of the original OAuth 1.0
          specification described by <xref target="RFC5849"/>. Within the OAuth 
          model, the owner's of protected resources grant third parties 
          (in this case the OpenSocial Container) authority to access 
          the resource for a specific purpose and a limited period of time.</t>
          <t hangText="OAuth 2.0">Is an as-yet unfinished update to the 
          original OAuth protocol that simplifies the communication between the 
          various parties but maintains the same fundamental authorization 
          model.</t>
          <t hangText="Signed Fetch">Is a simplified mechanism based on a subset of the 
          OAuth 1.0a protocol that allows a container to "sign" requests sent
          to a remote endpoint. Such signatures provide only a reasonable 
          assurance that certain content contained within the request has not been
          modified by a malicious party. Once the receiving endpoint determines that it
          is able to trust the signed request, it can decide to provide 
          limited access to certain protected resources without having to
          walk through the entire typical OAuth protocol.</t>
        </list>
      </t>
      
      <t>These authentication mechanisms are available for use whenever 
      access to a remote resource is required, including:
        <list style="symbols">
          <t>Processing &lt;Preload&gt; and &lt;Link&gt; elements within 
          the specification document's &lt;ModulePrefs&gt;,</t>
          <t>Processing Data Pipeline &ls;os:HttpRequest&gt; elements,</t>
          <t>Processing proxy and redirect type &lt;Content&gt; elements,</t>
          <t>All uses of the <spanx style="verb">osapi</spanx> JavaScript APIs, and </t>
          <t>All uses of the <spanx style="verb">gadgets.io.makeRequest</spanx> JavaScript API</t>
        </list>
      </t>
      
      <t>It is important to note that for authentication and authorization 
      purposes, regardless of whether the application is accessing remote content 
      or social data provided by the container itself, every individual 
      instance of an application MUST be considered a distinct entity for which 
      authentication credentials and authorized permissions MUST be individually 
      established. Containers MUST NOT assume that authorization given to one 
      instance of an application applies to all instances of that same 
      application. Nor MUST the container assume that authorization extends to any 
      other applications provided by the same developer.</t>
      
      <t>Authentication and authorization for an application instance is further 
      constrained by the Viewer for whom an application is currently being rendered.
      That is, for example, if a single application instance can be rendered
      for more than one Viewer, the container is required to authorize each 
      individual Viewer prior to displaying potentially sensitive content.
      Such authorization MUST be obtained for each individual application instance
      rendered for a particular Viewer.</t>
    
      <t>Specific considerations for each of the three types of request
      authorization mechanisms are discussed in the sections that follow.</t>

      <section title="Signed Fetch" anchor="SignedFetch">
      
        <t>The "Signed Fetch" mechanism is a capability provided by all 
        OpenSocial containers that provides a reasonable level of assurance
        that an HTTP request sent from the container on behalf of an application
        to a remote endpoint has not been inappropriately modified by a 
        malicious third party.</t>
        
        <t>To illustrate the value and operation of Signed Fetch, assume that 
        a developer uses the <spanx style="verb">gadgets.io.makeRequest</spanx> 
        JavaScript API to access a third party service to retrieve private 
        data belonging to the current Viewer. By default, and if required by 
        the remote endpoint, the application is responsible for providing the 
        request with the current identity of the user for whom the request is 
        being sent:</t>
        
        <figure><artwork>
  gadgets.io.makeRequest(
    "http://example.org/my/endpoint", 
    function(result) {...}, 
    {"opensocial_viewer_id": opensocial.data.getDataSet("Viewer").id});
        </artwork></figure>
      
        <t>When the container sends the request to the specified endpoint,
        it includes the exact value provided by the JavaScript code:</t>
        
        <figure><artwork>
  GET /my/endpoint?opensocial_viewer_id=alice HTTP/1.1
  Host: example.org   
        </artwork></figure>
        
        <t>Assume, however, that the application is being accessed by a malicious 
        Viewer identified as "tom". Such a user can use a variety of techniques
        to trick the application into using a different user's identity when using
        the <spanx style="verb">gadgets.io.makeRequest</spanx> API. Because 
        the default behavior is for the container to send the request to the 
        remote endpoint exactly as requested, the container and the remote 
        endpoint can be fooled into disclosing a legitimate user's private data 
        to the malicious Viewer.</t>
        
        <figure><artwork>
  var user = opensocial.data.getDataSet("Viewer").id; // returns "tom"
  // malicious user injects a different id ...
  user = "alice";
  // the code then executes as normal...
  var params = {
    "opensocial_viewer_id" : user};
  gadgets.io.makeRequest(
    "http://example.org/my/endpoint", 
    callback, 
    params);
        </artwork></figure>
        
        <t>Signed Fetch defends against such attacks by allowing the container to:
          <list style="numbers"> 
            <t>Include it's own information about the current Viewer's identity, and</t>
            <t>Generate a cryptographic signature usable by the receiving 
            endpoint to verify that the container-provided information has not been
            tampered with.</t>
          </list>
        </t>
        
        <t>Containers are required to use the following process when signing 
        HTTP requests:
          <list style="numbers">
            <t>The container MUST first remove all query string parameters passed
            in with the request whose names begin with any case-insensitive
            variation of "oauth", "xoauth", or "opensocial". This is done by 
            examining both the input URI and any additional optional parameters
            provided in the request and filtering out the unwanted items.</t>
            <t>The container then MUST add the following query string 
            parameters to the request URI:
              <list type="hanging">
                <t hangText="opensocial_owner_id">
                  Identifies the "owner" the application instance for which
                  the request is being sent.
                </t>
                <t hangText="opensocial_app_url">
                  An IRI provided by the container that represents the 
                  application for which the request is being sent. The 
                  IRI provided is used to identify the application specification
                  rather than individual instances.
                </t>
              </list>
            </t>
            <t>The container MAY also add the following query string 
            parameters to the request URI:
              <list type="hanging">
                <t hangText="opensocial_viewer_id">
                  Provides the ID of the current Viewer for whom content
                  is being displayed.
                </t>
                <t hangText="opensocial_instance_id">
                  Provides an opaque identifier for the specific instance
                  of the application for which the request is being sent. The 
                  combination of the "opensocial_app_url" and "opensocial_instance_id"
                  parameters uniquely identify each instance.
                </t>
                <t hangText="opensocial_app_id">
                  An opaque identifier for the application specification, unique
                  to the container. Implementations that wish to maintain
                  backwards compatibility with version 0.7 of the OpenSocial
                  specification can include this parameter.
                </t>
                <t hangText="xoauth_public_key">
                  An opaque identifier for the public key used to sign the 
                  request. This parameter can be omitted by containers that
                  do not use public/private key pairs to sign requests, or 
                  if the container arranges other means of negotiating or 
                  distributing keys with the remote endpoint receiving the
                  request.
                </t>
              </list>
            </t>
            <t>Finally, the container MUST follow the procedure outlined 
            in Section 3.4 of the OAuth 1.0 specification 
            <xref target="RFC5849"/> to generate and append the signature to 
            the request with the exception that the <spanx style="verb">oauth_token</spanx>
            parameter MUST be omitted.</t>
          </list>
        </t>
     
        <t>Note that upon generating the signature, the container will 
        include a range of additional query string parameters required 
        by the OAuth 1.0 specification, including information about the
        signing algorithm used, the date and time at which the signature
        was generated, as so forth.</t>
       
        <figure><preamble>The following example generally illustrates how
        a typical signed fetch request will appear (note: line breaks are added
        for readability):</preamble>
        <artwork><![CDATA[
  GET /foo?opensocial_owner_id=bob
    &opensocial_viewer_id=alice
    &opensocial_app_url=http://example.org/gadgets/foo
    &opensocial_instance_id=1
    &xoauth_public_key=org.example.key1
    &oauth_timestamp=123456789
    &oauth_signature_method=HMAC_SHA1
    &oauth_consumer_key=...
    &oauth_token=...
    &oauth_nonce=...
    &oauth_signature=...
        ]]></artwork></figure>
        
        <t>It is important to stress that the Signed Fetch mechanism 
        provides only a reasonable level of assurance that the information 
        provided by certain parameters in the request URI have not been 
        tampered with. Signed Fetch, by itself, is not adequate for identity 
        authentication, nor does it protect against tampering with any other
        part of the HTTP request such as the collection of request headers or
        the request payload, if any.</t>
             
        <section title="Using Signed Fetch">
        
          <t>Application developers can make use of the Signed Fetched capability 
          with all uses of the <spanx style="verb">osapi</spanx> and
          <spanx style="verb">gadgets.io.makeRequest</spanx> APIs; and with
          all &lt;Preload&gt;, &lt;Link&gt; and proxy or redirect type 
          &lt;Content&gt; elements.</t>
          
          <figure><preamble>Using Signed Fetch with JavaScript APIs:</preamble>
          <artwork><![CDATA[
  <Module>
    <Content type="html">
      ...
      <script>
        var params = {};
        params["href"] = 
          "http://data.example.org/resource/foo";
        params[gadgets.io.RequestParameters.AUTHORIZATION] = 
          gadgets.io.AuthorizationType.SIGNED;
      
        function fetchData() {
          osapi.http.get(params).execute(
            function(result) { ... }
          );
        }

        gadgets.util.registerOnLoadHandler(fetchData);
      </script>
      ...
    </Content>
  </Module>
          ]]></artwork></figure>
          
          <t>To use Signed Fetch with the JavaScript APIs, the value of the
          <spanx style="verb">AUTHORIZATION</spanx> parameter (represented in 
          JavaScript by the constant gadgets.io.RequestParameter.AUTHORIZATION) 
          MUST be <spanx style="verb">signed</spanx>. The following additional 
          parameters that affect the signing of a request MAY also be specified:
            <list style="hanging">
              <t hangText="SIGN_OWNER">Represented in JavaScript by the constant
              gadgets.io.RequestParameter.SIGN_OWNER, the value is a boolean 
              that indicates whether the container SHOULD include the 
              identity of the <xref target="Application-Roles">Instance Owner</xref> 
              when signing the request. If not specified, the container is 
              required to assume a value of True.</t>
              <t hangText="SIGN_VIEWER">Represented in JavaScript by the constant
              gadgets.io.RequestParameter.SIGN_VIEWER, the value is a boolean
              that indicates whether the container SHOULD include the
              identity of the current Viewer when signing the request. If not specified,
              the container is required to assume a value of True.</t>
            </list>
          </t>
          
          <figure><preamble>Within &lt;Preload&gt;, &lt;Link&gt; and 
          &lt;Content&gt; elements:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Preload authz="signed" href="http://example.org/resources/bar" />
      <Link authz="signed" href="http://example.org/images/foo.png" rel="icon" />
      ...
    </ModulePrefs>
    <Content type="html" href="http://example.org/content" authz="signed" />
  </Module>
          ]]></artwork></figure>
          
          <t>To use Signed Fetch with the &lt;Preload&gt;, &lt;Link&gt; 
          and &lt;Content&gt; elements, the <spanx style="verb">authz</spanx> 
          attribute MUST be specified with a value of <spanx style="verb">signed</spanx>.
          The following additional attributes that affect the signing of a 
          request MAY also be specified:
            <list style="hanging">
              <t hangText="sign_owner">Equivalent to the SIGN_OWNER parameter
              used in the JavaScript API, the value is a String matching either 
              <spanx style="verb">true</spanx> or <spanx style="verb">false</spanx> 
              indicating whether the container SHOULD include the identity of the
              <xref target="Application-Roles">Instance Owner</xref> when 
              signing the request.  If not specified, the container is 
              required to assume a value of <spanx style="verb">true</spanx>.</t>
              <t hangText="sign_viewer">Equivalent to the SIGN_VIEWER parameter
              used in the JavaScript API, the value is a String matching either 
              <spanx style="verb">true</spanx> or <spanx style="verb">false</spanx> 
              indicating whether the container SHOULD include the
              identity of the current Viewer when signing the request.  If not specified, 
              the container is required to assume a value of 
              <spanx style="verb">true</spanx>.</t>
            </list>
          </t>
        
        </section>
     
      </section>
      <!-- END SIGNED FETCH -->
    
      <section title="OAuth Support">
        
        <t>The OAuth protocol provides the ability for the owner of a resource 
        to grant limited permission to an application to perform actions 
        on behalf of the owner. For instance, an application might wish to 
        display a listing of documents owned by the current Viewer. To do so, 
        the application can work with the Container to request authorization 
        from the Viewer to access the service the Viewer uses to manage 
        documents and files. When granted, such access can be limited, 
        for example, to allow only the most basic read operations occurring
        within a specified period of time.</t>
        
        <t>Currently, OpenSocial Containers are required to implement support 
        for versions <xref target="RFC5849">1.0a</xref> and 
        <xref target="I-D.ietf-oauth-v2">2.0</xref> of the OAuth protocol.
        Specifically, the container MUST be capable of acting as either an 
        OAuth 1.0a or OAuth 2.0 client on behalf of application instances 
        hosted by the container. That is, whenever an application requires 
        access to protected external resources, the container MUST be capable of 
        using either version of the OAuth Protocol to request appropriate 
        permission to access the resource.</t>
        
        <t>Likewise, when an application or some other third party wishes to 
        access social data provided by the OpenSocial Container, the Container 
        MUST be capable of providing an OAuth Authorization Service -- implementing 
        either or both versions of the OAuth protocol -- that those applications 
        can work with to acquire appropriate access permissions. If a container 
        implementation chooses not to support the use of one of the required 
        versions of the OAuth protocol, it SHOULD, at the very least, implement
        the minimal level of functionality required to issue properly formed
        negative responses to requests using that version. For instance, if a 
        client application sends an OAuth 1.0a authorization token request to a
        container that only supports OAuth 2.0, the container SHOULD be capable
        of responding to that request with an appropriate OAuth 1.0a response
        rejecting the request.</t>
        
        <t>From the Application developer's point of view, there are no differences
        between working with OAuth-protected resources provided by the container 
        or those provided by a third-party. The sections that follow detail 
        the responsibilities, requirements and mechanisms application developers
        need to work with the OAuth protocol. Additional requirements and 
        considerations for OpenSocial Container implementations are discussed
        within the OpenSocial Common Container specification [TODO: Ref CC spec].</t>
        
        <section title="Declaring and Using OAuth Services" anchor="declaring-oauth">
        
          <t>Before an application can make use of OAuth protected resources,
          the specification document MUST tell the container about the OAuth 
          services to use. This is done by using one or more &lt;OAuth&gt; or
          &lt;OAuth2&gt; elements within the &lt;ModulePrefs&gt;.</t>
          
          <figure><preamble>In the partial specification below, the 
          &lt;OAuth&gt; element is used to declare a dependency on a third 
          party service providing OAuth 1.0a support.</preamble>
          <artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <OAuth>
        <Service view="oauth">
          <Request url="http://example.com/request" method="get" />
          <Access url="http://example.com/access" method="get" />
          <Authorization url="http://example.com/authorization" />
        </Service>
      </OAuth>
      ...
    </ModulePrefs>
    ...
    <Content type="html" view="oauth">
      ...
    </Content>
  </Module>
          ]]></artwork></figure>
          
          <t>The &lt;Service&gt; element provides the container with the 
          locations of the various OAuth service components that are used
          to acquire authorization as well as the name of an Application
          View the container can use to interact with the Viewer whenever 
          it determines that authorization must be acquired to continue.</t>
          
          <figure><preamble>Similarly, dependencies on OAuth 2.0-based
          services are declared using the &lt;OAuth2&gt; element:</preamble>
          <artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <OAuth2>
        <Service view="oauth">
          <Authorization url="http://example.com/authorization" method="get" />
          <Token url="http://example.org/token" method="get" />
        </Service>
      </OAuth2>
      ...
      <Content type="html" view="oauth">
        ...
      </Content>
    </ModulePrefs>
    ...
  </Module>         
          ]]></artwork></figure>
          
          <t>Once declared, developers can use the specified OAuth services 
          anywhere within the specification document where remote resources 
          are accessed, including uses of the <spanx style="verb">osapi</spanx> 
          and <spanx style="verb">gadgets.io.makeRequest</spanx> JavaScript
          APIs, &lt;Preload&gt; elements, &lt;Link&gt; elements, and
          Redirect or Proxy type &lt;Content&Gt; elements.</t>
          
          <t>The examples that follow illustrate various uses of the OAuth
          services.</t>
          
          <figure><preamble>Within uses of the <spanx style="verb">osapi.http</spanx> API:</preamble>
          <artwork><![CDATA[
  <Module>
    ...
    <Content type="html"> 
      ...
      <script>
        var params = {};
        params["href"] = 
          "http://data.example.org/resource/foo";
        params[gadgets.io.RequestParameters.AUTHORIZATION] = 
          gadgets.io.AuthorizationType.OAUTH;
      
        function fetchData() {
          osapi.http.get(params).execute(
            function(result) { ... }
          );
        }
        
        gadgets.util.registerOnLoadHandler(fetchData);
      </script>
      ...
    </Content>
  </Module>
          ]]></artwork></figure>
          
          <t>When using OAuth version 1.0a with the JavaScript APIs, the 
          value of the <spanx style="verb">AUTHORIZATION</spanx> parameter, 
          represented by the <spanx style="verb">constant gadgets.io.RequestParameters.AUTHORIZATION</spanx>
          alias in JavaScript, MUST equal <spanx style="verb">oauth</spanx> (represented in JavaScript 
          using the alias <spanx style="verb">gadgets.io.RequestParameters.OAUTH</spanx>).</t>
          
          <t>When using OAuth version 2.0, the value of the 
          <spanx style="verb">AUTHORIZATION</spanx> parameter MUST be 
          <spanx style="verb">oauth2</spanx> (represented in JavaScript using 
          the alias <spanx style="verb">constant gadgets.io.RequestParameters.OAUTH2</spanx>).</t>
          
          <t>The following additional parameters that affect the containers
          application of the OAuth protocol MAY also be specified:
            <texttable>
              <ttcol>Name</ttcol>
              <ttcol>Alias</ttcol>
              <ttcol>Description</ttcol>
            
              <c><spanx style="verb">OAUTH_RECEIVED_CALLBACK</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_RECEIVED_CALLBACK</c>
              <c>When the container sends a request to an OAuth service 
              provider asking for permission to access a given resource, 
              it will, by default, specify a default container-specific
              callback URI that the OAuth service provider will use to 
              redirect control back to the container and deliver the 
              requested access token. In certain cases, a specific application
              instance might need to override the default callback URI.
              The <spanx style="verb">OAUTH_RECEIVED_CALLBACK</spanx> parameter
              can be used to specify an alternative absolute URI reference.</c>
              
              <c><spanx style="verb">OAUTH_REQUEST_TOKEN</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN</c>
              <c>In certain circumstances, instances of an application can be 
              preauthorized to access particular resources and issued an 
              OAuth Request Token in advance. The OAUTH_REQUEST_TOKEN parameter
              allows the application to provide such preapproved request tokens to the 
              container for use.</c>
              
              <c><spanx style="verb">OAUTH_REQUEST_TOKEN_SECRET</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN_SECRET</c>
              <c>When using preapproed request tokens with the OAUTH_REQUEST_TOKEN
              parameter, the OAUTH_REQUEST_TOKEN_SECRET parameter
              can be used to provide the associated request token secret.</c>
              
              <c><spanx style="verb">OAUTH2_SCOPE</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH2_SCOPE</c>
              <c>When using OAuth version 2.0, the OAUTH2_SCOPE parameter is 
              used to specify the scope to be used with this request. 
              Access Token Scope is defined in Section 3.3 of 
              <xref target="I-D.ietf-oauth-v2"/>.</c>
              
              <c><spanx style="verb">OAUTH_SERVICE_NAME</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_SERVICE_NAME</c>
              <c>When multiple OAuth services are declared within the 
              &lt;ModulePrefs&gt; of an Application, the OAUTH_SERVICE_NAME
              parameter can be used to specify which service to use for the
              request.</c>
              
              <c><spanx style="verb">OAUTH_TOKEN_NAME</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_TOKEN_NAME</c>
              <c>Provides a simple label that application can use to refer to the 
              OAuth Access Token granting access to particular resources.
              If unspecified the value is assumed to be an empty string. 
              Gadget instances can use multiple token names if they access
              multiple resources from a single source. For example, an application
              that accesses a contact list and a calendar might used the 
              token name "contacts" to refer to the OAuth token providing 
              access to the contact data and the name "calendar" to refer to
              the token providing access to the calendar.</c>
              
              <c><spanx style="verb">OAUTH_USE_TOKEN</spanx></c>
              <c>gadgets.io.RequestParameters.OAUTH_USE_TOKEN</c>
              <c>For certain kinds of actions on certain resources, an OAuth
              service provider might not require that the container and application
              walk through the complete OAuth process to acquire an
              Access Token. In such scenarios, the service providing access
              to the resource will verify the OAuth Consumer Key provided 
              within the request then allow the request to proceed. In other 
              cases, a resource provider might grant limited access to a
              requester if the resource owner has not provided explicit
              authorization but offer additional functionality if an OAuth
              Access Token has been issued. Typically, however, most resource
              providers will only allow a requester to access protected resources
              if an Access Token is included in the request. The OAUTH_USE_TOKEN
              parameter can be used by the application as a hint to the container 
              as to whether the acquisition and use of an Access Token is 
              required or optional. The value MUST be one of:
                <list style="hangText">
                  <t hangText="never">
                    Tells the container that the Access Token is never 
                    required. Requests will be sent to the remote endpoint
                    without an OAuth Access Token.
                  </t>
                  <t hangText="if_available">
                    Tells the container that use of the Access Token is 
                    optional. If an Access token has been acquired, it 
                    will be included in the request sent to the remote 
                    endpoint, otherwise the request will be sent 
                    without an Access Token.
                  </t>
                  <t hangText="always">
                    Tells the container that use of the Access Token 
                    is required. If an appropriate Access Token has not
                    yet been acquired, the container will work with the 
                    application and the OAuth Service Provider to seek appropriate
                    authorization and acquire an Access Token.
                  </t>
                </list>
              If the OAUTH_USE_TOKEN parameter is not specified, the value
              is assumed to be "always".</c>  
            </texttable>
          </t>
                    
          <figure><preamble>Within &lt;Preload&gt; and &lt;Link&gt; elements:</preamble>
          <artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <OAuth>...</OAuth>
      <Preload authz="oauth" href="http://example.org/resources/bar" />
      <Link authz="oauth" href="http://example.org/images/foo.png" rel="icon" />
      ...
    </ModulePrefs>
    <Content type="html"> 
      ...
    </Content>
  </Module>
          ]]></artwork></figure>
          
          <figure><preamble>Within proxy or redirect type &lt;Content&gt; elements:</preamble>
          <artwork><![CDATA[
  <Module>
    ...
    <Content authz="oauth" href="http://example.org/content/foo" />
    ...
  </Module>
          ]]></artwork></figure>
          
          <t>When using OAuth 1.0a with the &lt;Preload&gt;, &lt;Link&gt; 
          and &lt;Content&gt; elements, the <spanx style="verb">authz</spanx> 
          attribute MUST be specified with a value of <spanx style="verb">oauth</spanx>.</t>
          
          <t>When using OAuth 2.0, the <spanx style="verb">authz</spanx> 
          attribute MUST specify a value of <spanx style="verb">oauth2</spanx>.</t>
          
          <t>The following additional attributes that affect the containers
          application of the OAuth protocol MAY also be specified. Each corresponds
          to one of the optional parameters for the JavaScript API listed above
          and specify identical values:
            <list style="symbols">
              <t><spanx style="verb">oauth_received_callback</spanx></t>
              <t><spanx style="verb">oauth_request_token</spanx></t>
              <t><spanx style="verb">oauth_request_token_secret</spanx></t>
              <t><spanx style="verb">oauth2_scope</spanx></t>
              <t><spanx style="verb">oauth_service_name</spanx></t>
              <t><spanx style="verb">oauth_token_name</spanx></t>
              <t><spanx style="verb">oauth_use_token</spanx></t>
            </list>
          </t>
          
          <t>If an application requires access to multiple OAuth service 
          providers, then it MUST declare each provider and specify a unique 
          label for each that identifies the specific provider to be used for 
          each request. Each of the &lt;OAuth&gt; and &lt;OAuth2&gt;
          elements can contain as many &lt;Service&gt; element instances
          as is necessary.</t>
          
          <figure><preamble>For instance, in the example that follows, both 
          the &lt;Preload&gt; element and the JavaScript API call use the 
          OAuth service labeled as "other" within the &lt;ModulePrefs&gt;, 
          while the &lt;Link&gt; element uses the "default" OAuth service
          defined by the &lt;Service&gt; tag that omits the name attribute.</preamble>
          <artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <OAuth>
        <Service view="oauth">
          <Request url="http://example1.com/request" method="get" />
          <Access url="http://example1.com/access" method="get" />
          <Authorization url="http://example1.com/authorization" />      
        </Service>
        <Service name="other" view="other.oauth">
          <Request url="http://example2.net/request" method="get" />
          <Access url="http://example2.net/access" method="get" />
          <Authorization url="http://example2.net/authorization" />      
        </Service>
        <Preload authz="oauth" oauth_service_name="other" 
          href="http://example.org/resources/bar" />
        <Link authz="oauth" href="http://example.org/images/foo.png" rel="icon" />
      </OAuth>
      <Content type="html">
        ...
        <script>
          var params = {};
          params["href"] = 
            "http://data.example.org/resource/foo";
          params[gadgets.io.RequestParameters.AUTHORIZATION] = 
            gadgets.io.AuthorizationType.OAUTH;
          params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] =
            "other";
        
          function fetchData() {
            osapi.http.get(params).execute(
              function(result) { ... }
            );
          }
          
          gadgets.util.registerOnLoadHandler(fetchData);
        </script>
        ...
      </Content>
      <Content type="html" view="oauth">
        ...
      </Content>
      <Content type="html" view="other.oauth">
        ...
      </Content>
    </ModulePrefs>
  </Module>
          ]]></artwork></figure>
          
          <t>When multiple OAuth services are used, the 
          <spanx style="verb">OAUTH_SERVICE_NAME</spanx>
          parameter and the <spanx style="verb">oauth_service_name</spanx> 
          attribute are used within the JavaScript API and XML elements to 
          indicate the appropriate OAuth service to use for the request.</t>
        
        </section>
        
        <section title="Processing Model" anchor="oauth-processing-model">
        
          <t>When the container receives any request for which the OAuth
          protocol is to be used, regardless of whether the request is 
          submitted via the JavaScript API or via elements in the
          specification document, it MUST adhere to the following requirements and 
          processing model:</t>
          
          <list style="numbers">
            <t>For any request for which an access token is not 
            required (e.g. the value of the <spanx style="verb">OAUTH_USE_TOKEN</spanx> 
            parameter equals <spanx style="verb">never</spanx>):
              <list style="symbols">
                <t>When OAuth 1.0a is used, the container will 
                send a request to the remote endpoint as described in 
                Section 3 of <xref target="RFC5849"/> with the exception
                that the <spanx style="verb">oauth_token</spanx> will be omitted.
                Such requests are generally identical to those sent when using
                the Signed Fetch mechanism.</t>
                <t>When OAuth version 2.0 is used, requests are sent without
                any authentication information included. This is the same as 
                sending the request using an <spanx style="verb">AUTHORIZATION</spanx>
                value of <spanx style="verb">NONE</spanx>.</t>
              </list>
            </t>
            <t>For any request for which an access token is considered
            optional (e.g. the value of the OAUTH_USE_TOKEN parameter
            is "if_available"):
              <list style="symbols">
                <t>When OAuth 1.0a is used and an Access Token 
                appropriate to the current request is known to the 
                container, a request that includes the token will be sent 
                to the remote endpoint as described in Section 7 of 
                <xref target="RFC5849"/>. When using OAuth 2.0, the container
                will send a request using the access token as described 
                in <xref target="oauth2-requests"/>.</t>
                <t>If an appropriate Access Token, and OAuth 1.0a is used, 
                the container will send a request to the remote endpoint as 
                described in Section 3 of <xref target="RFC5849"/> with the 
                exception that the <spanx style="verb">oauth_token</spanx> will
                be omitted. Such requests are generally identical to those sent
                when using the Signed Fetch mechanism. If OAuth 2.0 is used,
                requests are sent without any authentication information 
                included.</t>
              </list>
            </t>
            <t>For any request for which an access token is required
            (e.g. the value of the OAUTH_USE_TOKEN parameter is 
            "always" or the OAUTH_USE_TOKEN is unspecified):
              <list style="symbols">
                <t>If using OAuth 1.0a and an appropriate Access Token 
                is known by the container, a request as defined in Section 
                3 of <xref target="RFC5849"/> is sent to the remote endpoint. 
                If using OAuth 2.0, a request is sent as described in 
                <xref target="oauth2-requests"/> is sent.</t>
                <t>When an appropriate Access Token is not known to 
                the container, the container MUST acquire an access
                token using the processes described in <xref target="oauth-get-tokens"/>. 
                Once an Access Token is acquired, a request using the token
                will be sent to the server. If a token cannot be 
                acquired, the container will report an error back 
                to the application.</t>
              </list>
            </t>
          </list>
    
          <section title="Acquiring Access Tokens" anchor="oauth-get-tokens">
          
            <t>When using any version of OAuth, a container will first 
            need to seek authorization from the owner of a resource
            prior to attempting to access it. Generally, this is done first by 
            the container interacting with the OAuth Authorization 
            Provider to retrieve a "request token" which is then 
            exchanged for an "access token". The details for how each 
            of those steps are completed varies for each version of the 
            OAuth protocol.</t>
          
            <t>First, once the container determines that an access token
            needs to be acquired prior to completing a request, it will 
            examine the <spanx style="verb">view</spanx> attribute on the 
            appropriate OAuth &lt;Service&gt; element to determine the name
            of the Application View it will render to interact with the Viewer.</t>
            
            <t>If the view specified by the attribute does not exist, or if 
            the <spanx style="verb">view</spanx> attribute is not specified:
              <list style="symbols">
                <t>And the request being processed is to retrieve content 
                specified from either the &lt;Link&gt;, &lt;Preload&gt;, 
                &lt;Content&gt; or &lt;os:HttpRequest&gt; elements, the 
                container MUST abort the request and signal an error to the 
                Viewer indicating that the OAuth authorization could not be 
                completed; or</t>
                <t>If the request being processed is the result of invoking 
                either the <spanx style="verb">gadgets.io.makeRequest</spanx>,
                <spanx style="verb">osapi.http</spanx> or any of the 
                <spanx style="verb">osapi.*</spanx> service JavaScript APIs,
                the container SHOULD abort the request and invoke the callback
                function passed in to the JavaScript method with an indication
                that OAuth Authorization is required. The Application can then
                choose to handle the authentication on it's own, as described
                in <xref target="oauthpopup"/>. However, the container MAY 
                choose to abort the request and signal an error that the 
                OAuth authorization could not be completed.</t>
              </list>
            </t>
          
            <t>If the view specified by the attribute does exist, the container
            will render the view -- typically within a modal user interface 
            element that blocks all other interactions with the container 
            until the authorization is complete or canceled. The rendered view
            MUST handle the Viewers interaction with the third party OAuth 
            Authorization service as described in <xref target="oauthpopup"/> 
            then return control back to the container once the authorization 
            process has been completed and an access token has been issued. 
            Once the view has been dismissed, the container will proceed with
            the request using the acquired access token.</t>
          
          </section>
          
          <section title="Sending OAuth 2.0 Protected Requests" anchor="oauth2-requests">
          
            <t>When using OAuth 2.0 to premptively send authenticated requests, 
            containers MUST support the use of OAuth 2.0 Bearer Tokens as 
            described by <xref target="I-D.draft-ietf-oauth-v2-bearer"/> and 
            Mac Tokens as described by <xref target="I-D.draft-ietf-oauth-v2-http-mac"/>.
            Implementations MAY choose to support additional types of tokens.</t>
            
            <t>The determination of exactly how the OAuth 2.0 access token is 
            conveyed within a request to a protected resource is determined 
            entirely by the type of access token that was issued.</t>
            
            <t>If the access token issued to the container is a Bearer-type 
            token, the request sent to the remote endpoint MUST contain an
            Authorization header field using the "Bearer" scheme that includes
            the access token:</t>
            
            <figure><preamble>For example:</preamble><artwork>
  GET /some/remote/content HTTP/1.1
  Host: example.org
  Authorization: Bearer ABCDEF1234567FEDCBA
            </artwork></figure>
            
            <t>Because access tokens sent using the Bearer scheme are sent 
            in clear-text, all requests using the Bearer authentication 
            scheme MUST be sent using SSL or TLS.</t>
            
            <t>If the access token issued to the container is a Mac-type
            token, the request sent to the remote endpoint MUST contain 
            an Authorization header field using the "Mac" scheme that includes
            "id", "nonce" and "mac" fields as described by 
            <xref target="I-D.draft-ietf-oauth-v2-http-mac"/>.</t>
            
            <figure><preamble>For example:</preamble><artwork>
  GET /some/remote/content HTTP/1.1
  Host: example.org
  Authorization: MAC id="h480djs93hd8",
                 nonce="274312:dj83hs9s",
                 mac="kDZvddkndxvhGRXZhvuDjEWhGeE="
            </artwork></figure>
          
          </section>
          
          <section title="401 Unauthorized Responses" anchor="401-unauthorized">
          
            <t>When attempting to interact with protected remote resources on behalf of 
            an Application, and an authentication mechanism is not prespecified 
            by the Application using either the <spanx style="verb">AUTHORIZATION</spanx>
            request parameter or the <spanx style="verb">authz</spanx> attribute; 
            or when the authentication mechanism specified by the Application does
            not match the authentication scheme required by the remote resource,
            the container might receive an error response from the remote endpoint
            indicating that authentication is required. Such responses typically
            take the form of 401 Unauthorized messages.</t>
            
            <t>When encountering such a response, the container will determine,
            if possible, the authentication scheme required by the remote endpoint
            by examining the WWW-Authentication header field included in the 
            response.</t>
            
            <t>If the WWW-Authentication header specifies support for the 
            "OAuth" scheme, the container MAY either choose to abort the 
            request and signal to the Application that an error has occurred
            and that the request cannot be completed or, it MAY attempt to 
            reprocess the request as specified in <xref target="oauth-processing-model"/>
            using the OAuth 1.0a protocol.</t>
            
            <t>If the WWW-Authentication header specifies support for either the
            "Bearer" or "Mac" schemes, the container MAY either choose to 
            abort the request and signal to the Application that an error has
            occurred and that the request cannot be completed or, it MAY attempt
            to reprocess the request as specified in <xref target="oauth-processing-model"/>
            using the OAuth 2.0 protocol.</t>
            
            <t>If the WWW-Authentication header field specifies multiple 
            supported authentication schemes, the container SHOULD evaluate 
            each in the order they are encoded within the field value and 
            use the first supported scheme it finds.</t>
            
            <t>When the selected authentication scheme is OAuth 1.0 or OAuth 2.0, 
            the container will check the Application specification for an 
            appropriate OAuth &lt;Service&gt; element it can use to acquire the 
            necessary authorization. It will do so by first checking to see 
            if any of the provided &lt;Service&gt; elements contain a "realm" 
            attribute that is equal to the realm specified by the WWW-Authenticate
            header field, if any. If a matching &lt;Service&gt; element is found, it 
            is selected. If, however, the realm is not specified in the WWW-Authenticate
            header field -- as will typically be the case when using the Mac 
            authentication scheme -- or if a matching &lt;Service&gt; element cannot
            be found, the container will look for an &lt;Service&gt; element that matches
            the version of the OAuth protocol selected and that does not specify a 
            name attribute.</Service>
            
            <t>If an appropriate OAuth &lt;Service&gt; element is not provided 
            by the Application, the container MUST abort the request and 
            signal an error to the Application indicating the request cannot
            be completed.</t>
            
            <t>Containers MAY choose to support any other authentication schemes
            that might be indicated by the WWW-Authentication header; however,
            such support is undefined by this specification.</t>
            
            <t>If the container does not support any of the schemes specified
            by the WWW-Authentication header, then it MUST abort the request 
            and signal an error to the Application indicating the request 
            cannot be completed.</t>
          
          </section>
          
        </section>
      
      </section>
      
      <!--  AUTHENTICATION SECTION NEEDS TO BE COMPLETED STILL -->

    </section> <!-- END AUTHENTICATION -->
    <!--  END AUTHENTICATION -->
 
    <section title="Caching" anchor="caching">
    
      <t>Application developers are provided with a variety of mechanisms 
      for accessing external, web-accessible resources. They can, for instance:
        <list style="symbols">
          <t>Use Redirected or Proxy type &lt;Content&gt; elements,</t>
          <t>Preload resources using the &lt;Preload&gt; elements,</t>
          <t>Link to icons, screenshots and thumbnail images,</t>
          <t>Send arbitary HTTP requests using the <spanx style="verb">osapi.http</spanx>
          and <spanx style="verb">gadgets.io.makeRequest</spanx> APIs,</t>
          <t>or use <xref target="DataPipelining">Data Pipeline elements</xref>
          to access resources.</t>
        </list>
      </t>
      
      <t>The container is also permitted to cache the Application Specification
      Document itself.</t>
      
      <t>In each of these cases, the container is responsible for sending the 
      actual HTTP request messages to the remote resource and making the 
      data returned in the response available to the application. In order to 
      optimize performance and reduce the overall number of HTTP requests that
      are actually sent, containers SHOULD provide caching of HTTP responses 
      as defined in <xref target="RFC2616" />. If the container provides caching,
      it MUST honor all requirements as specified by <xref target="RFC2616"/>.
      Containers MAY support caching for all requests or MAY determine whether 
      to provide caching per request.</t>
      
      <figure><preamble>For example, given the following partial application
      specification document:</preamble><artwork>
  &lt;Module&gt;
    ...
    &lt;Content type="html" href="http://example.org/foo" /&gt;
  &lt;/Module&gt;
      </artwork></figure>
      
      <figure><preamble>When the container attempts to render the default view of the 
      application, it will send an HTTP GET request to the IRI provided</preamble>
      <artwork>
  GET /foo HTTP/1.1
  Host: example.org
      </artwork></figure>
      
      <figure><preamble>Assuming the server return a successful response that
      includes appropriate caching instructions:</preamble><artwork>
  HTTP/1.1 200 OK
  Content-Type: text/html
  Cache-Control: must-revalidate, max-age=3600
  ETag: "abc123zyx"
  
  &lt;html&gt...&lt;/html&gt;
      </artwork></figure>
    
      <t>The container is permitted to cache the response and use the cached
      representation in response to all subsequent requests to the same 
      request URI, without revalidation for a period of 3600 seconds (1 hour),
      after which the container is required to revalidate the resource to 
      determine if any changes to the resource representation have occurred.</t>
      
      <figure><preamble>Such revalidation is performed by issuing a conditional HTTP request
      as defined by <xref target="RFC2616"/>:</preamble><artwork>
  GET /foo HTTP/1.1
  Host: example.org
  If-None-Match: "abc123zyx"
      </artwork></figure>
      
      <t>If the server returns a response indicating that the resource has 
      been modified (i.e. with a 412 Precondition Failed in this example),
      the container is permitted to continue using the cached representation
      of the resource to fulfill the request.</t>
      
      <t>For all XML elements within the Application Specification Document
      that represent a request for an external resource (&lt;Preload&gt;, 
      &lt;Link&gt;, &lt;Content&lt; and &lt;os:HttpRequest&gt;), an additional
      <spanx style="verb">refresh_interval</spanx> attribute MAY be specified
      whose value indicates the total number of seconds the container SHOULD
      consider a cached response to be valid. If specified, and the value indicates
      a period of time that is less than the period of time established by either
      the Expires header in the HTTP response or either the Cache-Control max-age 
      or s-maxage directives (as specified by <xref target="RFC2616" />), then
      the value of the <spanx style="verb">refresh_interval</spanx> attribute
      overrides the default caching characteristics. The container MUST NOT 
      cache a response for longer than the period of time specified by either 
      the Expires header, max-age directive or s-maxage directives.</t>
      
      <figure><preamble>For example:</preamble><artwork>
  &lt;Content type="html" href="http://example.org/foo" refresh_interval="3600" /&gt;
      </artwork></figure>
      
      <t>For all JavaScript API requests that represent a request for an 
      external resource, such as each of the <spanx style="verb">osapi.http</spanx>
      methods and the <spanx style="verb">gadgets.io.makeRequest</spanx> API,
      an optional "REFRESH_INTERVAL" parameter MAY be specified whose value
      indicates the total number of seconds that container SHOULD consider
      a cached response to be valid. If specified, the same rules apply as 
      those specified for the <spanx style="verb">refresh_interval</spanx>
      attribute.</t>
      
      <t>For convenience, the JavaScript alias 
      <spanx style="verb">gadgets.io.RequestParameters.REFRESH_INTERVAL</spanx>
      is provided for the "REFRESH_INTERVAL" parameter.</t>
      
      <figure><preamble>For example:</preamble><artwork>
  gadgets.io.makeRequest(
    "http://example.org/foo",
    function(response) {
      // ...
    },
    {
      gadgets.io.RequestParameters.REFRESH_INTERVAL: 3600
    }
  );
      </artwork></figure>
    
    </section>
    <!--  END CACHING -->
  
    <section title="Variable Substitution" anchor="VariableSubstitution">
  
      <t>The Variable Substitution capability provides the ability 
      for application developers to use special "Expression Language" (EL) 
      statements within their application specifications that the container 
      will replace with appropriate values when a View is rendered.</t>
  
      <figure><preamble>For example, given the following partial application 
      specification:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
    </ModulePrefs>
    <Content type="html">
      One plus one is equal to ${1+1}.
    </Content>
  </Module>
      ]]></artwork></figure>
      
      <t>When the default view for this application is rendered, the expression
      "${1+1}" will be evaluated and replaced with the value "2", resulting 
      in the output:</t>
      
      <figure><artwork>
  One plus one is equal to 2.
      </artwork></figure>
  
      <t>Expression Language statements can be used to to access values 
      provided by reserved variable keys, variables defined using data 
      pipeline tags as defined by <xref target="DataPipeling"/>, or 
      literal values as in the previous example.</t>
      
      <t>The syntax for expressions is based on a subset of the
      <xref target="JSPEL">Java Server Pages Expression Language (JSPEL)</xref>.
      All basic operations defined by the JSPEL specification,
      such as string concatenation and matching, are supported. 
      However, the definition of custom functions, as defined in 
      <xref target="JSPEL" />, Section 1.15, is not supported at this time.</t>
      
      <t>Containers are required to support variable substitution using this
      Expression Language syntax.</t>
    
      <section title="Using Literal Statements">
      
        <t>As is defined by the <xref target="JSPEL">JSPEL</xref> specification,
        literal statements can be used. For instance, the "${1+1}" used in the 
        previous example is a literal statement that outputs the results of 
        adding the two numbers together. All forms of literal statement allowed
        by JSPEL may be used within OpenSocial.</t>
        
        <t>It is also possible to combine the use of literal statements with 
        other variables. For instance, the expression "${1 + count}" will 
        be replaced by the numeric value of the variable "count" plus the number
        one.</t>
      
      </section>
    
      <section title="Using Data Pipeline Variables">
      
        <t>For all application instances, there is a <spanx style="verb">DataContext</spanx>
        object that stores and provides access to all of the data associated with
        the Application's use of the <xref target="DataPipelining">Data Pipelining</xref>
        capability. The information stored within the <spanx style="verb">DataContext</spanx>
        can be accessed either via expression statements or using the 
        <spanx style="verb">opensocial.data</spanx> API.</t>
       
        <figure><preamble>For instance, if we define a simple variable using the 
        data pipelining tags, we can access the value of that variable by naming 
        it within a substitution expression:</preamble><artwork><![CDATA[
  <Module xmlns:os="http://ns.opensocial.org/2008/markup">
    ...
    <Data>
      <os:Var key="myNumber" value="1" />
    </Data>
    <Content type="html">
      The value of myNumber is: ${myNumber}
    </Content>
  </Module>
        ]]></artwork></figure>
        
        <t>Additional information on the use of the <spanx style="verb">DataContext</spanx>
        with variable substitution can be found in <xref target="DataPipelining" />
        and <xref target="OpenSocial-Templating"/>.</t>
      
      </section>
  
      <section title="Using Reserved Variable Keys" anchor="ReservedVariableKeys">
    
        <t>Reserved Variable Keys are reserved variables names whose values are
        provided by the container. The keys take the form <spanx style="verb">{Prefix}.{Var}</spanx>
        where <spanx style="verb">{Prefix}</spanx> identifies one of the 
        predefined scopes below, and <spanx style="verb">{Var}</spanx> specifies 
        a specific variable within the identified scope. The applicability of 
        each Prefix and Var combination will vary depending on where within the 
        specification document the variable substitution is occurring.</t>
        
        <t>Container implementations and individual extensions to the core 
        OpenSocial specification are free to introduce additional reserved 
        variable key <spanx style="verb">{Prefix}</spanx> names in addition 
        to those listed here.</t>
        
        <texttable align="left">
          <ttcol>Prefix</ttcol>
          <ttcol>Description</ttcol>
          <ttcol>Applicability</ttcol>

            <c>Msg</c>
            <c>References all message bundle variables for the current locale.
            The values of the <spanx style="verb">{Var}</spanx> component are 
            selected from the applicable message bundle. For instance, if the 
            bundle includes a key <spanx style="verb">FOO</spanx>, then the 
            expression <spanx style="verb">${Msg.FOO}</spanx> will be replaced 
            by the localized value associated with <spanx style="verb">FOO</spanx> 
            in the bundle.</c>
            <c><spanx style="verb">Msg.*</spanx> variables are available anywhere 
            within the application, including ModulePrefs and root Module element. 
            Message bundle values may reference other message bundle variables 
            by making use of the <spanx style="verb">${Msg.*}</spanx> syntax 
            within the value.</c>
            
            <c>Bidi</c>
            <c>Used to reference information about the currently selected 
            Locale's default text directionality as specified by the 
            text_direction attribute on the &lt;Locale&gt; element. The 
            BIDI variables are discussed in detail in <xref target="Localization"/>.</c>
            <c><spanx style="verb">Bidi.*</spanx> variables are available anywhere
            within the application, including ModulePrefs and root Module
            element.</c>
      
            <c>ViewParams</c>
            <c>References all values passed using the <spanx style="verb">viewParams</spanx> 
            parameter when calling to <xref target="gadgets.views.requestNavigateTo">gadgets.views.requestNavigateTo</xref>.
            The values of the <spanx style="verb">{Var}</spanx> component 
            correlates to each view parameter. Expression statements using this 
            prefix will resolve to the same values as calls made to the 
            <spanx style="verb">gadgets.views.getParams</spanx>
            API. For instance, the expression <spanx style="verb">${ViewParams.FOO}</spanx> 
            will be replaced by the same value returned by the API call
            <spanx style="verb">gadgets.views.getParams()["FOO"]</spanx>.</c>
            <c><spanx style="verb">ViewParam.*</spanx> variables are available 
            only within Content blocks and <xref target="DataPipelining">Data Pipeline</xref> 
            tags.</c>
            
            <c>Prefs</c>
            <c>References all named values defined by &lt;UserPref&gt; elements
            contained in the application specification. The values of the 
            <spanx style="verb">{Var}</spanx> component correlate to each 
            defined user preference. Expression statements using this prefix 
            will resolve to the same values as calls to the 
            <spanx style="verb">gadgets.Prefs</spanx> API.
            For instance, the expression <spanx style="verb">${Prefs.Lang}</spanx> 
            will be replaced by the same value returned by the API call 
            <spanx style="verb">gadgets.Prefs.getLang()</spanx>; The expression 
            <spanx style="verb">${Prefs.FOO}</spanx> will be replaced by the 
            same value returned by the API call 
            <spanx style="verb">gadgets.Prefs.getString("FOO")</spanx></c>
            <c>Available anywhere within the application .</c>

            <c>Viewer</c>
            <c>Reserved for future use.</c>
            <c>N/A</c>

            <c>Owner</c>
            <c>Reserved for future use.</c>
            <c>N/A</c>
  
            <c>Gadget</c>
            <c>Reserved for future use.</c>
            <c>N/A</c>
        </texttable>
        
        <figure><preamble>The following example illustrates the use of 
        Reserved Variables Names using the <spanx style="verb">Msg</spanx> 
        prefix:</preamble>
        <artwork><![CDATA[
  <Module>
    <ModulePrefs title="${Msg.TITLE}">
      ...
      <Locale lang="en" country="US">
        <msg name="TITLE">My Gadget</msg>
        <msg name="GREETING">Hello There!</msg>
      </Locale>
      ...
    </ModulePrefs>
    <Content type="html"><![CDATA[
      <div>${Msg.GREETING}</div>
    ]]></Content>
  </Module>
        ]]></artwork></figure>
        
      </section>
  
      <section title="Deprecated Expression Syntax">
     
        <t>Previous versions of this specification supported a 
        -- now deprecated -- alternative expression syntax. Container
        implementations are permitted to continue supporting the deprecated
        syntax to provide backwards compatibility for older, 
        existing specification documents, however, developers creating 
        new applications MUST NOT use the deprecated format.</t>
        
        <t>The legacy syntax takes the form <spanx style="verb">__{Prefix}_{Var}__</spanx> 
        where <spanx style="verb">{Prefix}</spanx> identifies one of the 
        predefined scopes below, and <spanx style="verb">{Var}</spanx> specifies 
        a specific variable within the identified scope.</t>
 
        <figure><preamble>For instance, in the partial example that 
        follows, the expression <spanx style="verb">__MSG_FOO__</spanx> is 
        replaced for the localized value identified by the key 
        <spanx style="verb">FOO</spanx> within the localized message bundle:</preamble>
        <artwork><![CDATA[
  <Module>
    <ModulePrefs title="__MSG_FOO__">
      ...
      <Locale language="en" country="US">
        <msg name="FOO">Hello World!</msg>
      </Locale>
      ...
    </ModulePrefs>
    <Content type="html">
      ...
    </Content>
  </Module>
        ]]></artwork></figure>

        <t>The <spanx style="verb">{Prefix}</spanx> keys supported by the 
        legacy syntax are:</t>  

        <texttable align="left">
          <ttcol>Prefix</ttcol>
          <ttcol>Description</ttcol>   

          <c>MSG</c>
          <c>References all message bundle variables for the current locale.
          The values of the <spanx style="verb">{Var}</spanx> component are 
          selected from the applicable message bundle. For instance, if the 
          bundle includes a key <spanx style="verb">FOO</spanx>, then the 
          expression <spanx style="verb">__MSG_FOO__</spanx> will be replaced 
          by the localized value associated with <spanx style="verb">FOO</spanx> 
          in the bundle.</c>
          
          <c>BIDI</c>
          <c>References BIDI substitution variables whose values will reflect
          the default text direction as specified by the selected locale. 
          The BIDI variables are discussed in detail in <xref target="Localization"/>.</c>
          
          <c>MODULE</c>
          <c>Originally intended to provide a context for information about 
          the specification document itself. Currently, <spanx style="verb">ID</spanx> 
          is the only variable key supported (e.g. <spanx style="verb">__MODULE_ID__</spanx>). 
          When used, the container SHOULD replace the <spanx style="verb">__MODULE_ID__</spanx> 
          expression with a unique ID value for each instance of an application 
          displayed simultaneously.</c>
          
          <c>UP</c>
          <c>References all named values defined by &lt;UserPref&gt; elements
          contained in the specification document. The values of the 
          <spanx style="verb">{Var}</spanx> component correlate to each defined 
          user preference. Expression statements using this prefix will resolve 
          to the same values as calls to the <spanx style="verb">gadgets.Prefs</spanx> 
          API. For instance, the expression <spanx style="verb">__UP_Lang__</spanx> 
          will be replaced by the same value returned by the API call 
          <spanx style="verb">gadgets.Prefs.getLang()</spanx>; The expression 
          <spanx style="verb">__UP_FOO__</spanx> will be replaced by the same 
          value returned by the API call <spanx style="verb">gadgets.Prefs.getString("FOO")</spanx></c>
            
        </texttable>
      </section>
      
      <section title="Processing Requirements">
      
        <t>Containers perform Variable Substitution when application views
        are rendered or when metadata about the application is displayed.
        For instance, if the container includes an application specification 
        within a listing of applicatioms available to install and use on a page, 
        then the container will perform any substitution necessary on the 
        displayed values (e.g. title, description, etc).</t>
        
        <t>Containers are required to perform substitution on all 
        attributes or elements in the application specification document 
        exception of &lt;Locale&gt;, &lt;msg&gt;, &lt;EnumValue&gt; elements, 
        but only when the content of those elements and attributes is 
        currently being rendered. If, for instance, a application contains 
        multiple &lt;Content&gt; elements, each of which identify different
        views, the container will only process substitutions that are 
        included within the content for the view currently being rendered.
        Further, containers are required to perform all substitutions 
        that use either the Msg reserved variable key (i.e. 
        <spanx style="verb">${Msg.FOO}</spanx>) or the MSG legacy syntax format 
        (i.e. <spanx style="verb">__MSG_FOO__</spanx>) -- if supported -- before 
        applying any other substitutions.</t>
        
        <t>Variable substitution MUST NOT be applied recursively and 
        circular dependencies detected within variables MUST be ignored
        and treated as literal values rather than expressions. For instance,
        within the following partial application specification:</t>
        
        <figure><artwork><![CDATA[
  <Module xmlns:os="http://ns.opensocial.org/2008/markup">
    ...
    <Data>
      <os:Var key="key1" value="${key2}" />
      <os:Var key="key2" value="${key1}" />
    </Data>
    <Content type="html">
      ${key1}
      ${key2}
    </Content>
  </Module>
        ]]></artwork></figure>
        
        <t>The value of <spanx style="verb">key1</spanx> would be resolved as 
        the literal value <spanx style="verb">${key1}</spanx>. The value of 
        <spanx style="verb">key2</spanx> would be resolved as the literal value 
        <spanx style="verb">${key2}</spanx>. The rendered output generated by 
        the container would be:</t>
        
        <figure><artwork><![CDATA[
  ${key1}
  ${key2}
        ]]></artwork></figure>
      </section>   
    </section>
    <!--  END VARIABLE SUBSTITUTION -->
  
    <section title="Localization" anchor="Localization">
    
      <t>Localization of an application is achieved primarily through
      <xref target="VariableSubstitution">Variable Substitution</xref>, using the
      Msg reserved variable key and &lt;Locale&gt; elements.</t>

      <t>To determine the appropriate keys and values to use for substitution,
      containers will inspect the application specification document for a &lt;Locale&gt; 
      element that matches the current view being rendered, as well as the 
      language and country of the Viewer.</t>
      
      <t>A &lt;Locale&gt; is considered a match if either:
        <list style="symbols">
          <t>The default unnamed view is being rendered and the &lt;Locale&gt;
          elements view attribute is unspecified, or the specific view being 
          rendered is named explicitly within the &lt;Locale&gt; element's view 
          attribute, and </t>
          <t>The language and country attributes on the &lt;Locale&gt; 
          element exactly match those of the Viewer, or</t>
          <t>The language attribute is an exact match for the Viewer 
          and the country attribute specifies "all", or</t>
          <t>Both the language and country attributes specify "all".</t>
        </list>
      </t>
      
      <t>How the container determines the current language and country 
      of the Viewer is not defined by this specification.</t>
      
      <t>If a matching &lt;Locale&gt; is not found within the 
      specification document, the container is permitted to provide it's own
      localization data.</t>

      <t>Once an appropriate &lt;Locale&gt; has ben selected, containers
      are required to replace all Msg expressions for which a replacement
      value can be determined.</t>
      
      <t>For example, given the following partial specification:</t>
      
      <figure><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Locale language="en" country="all">
        <msg name="greeting">Hello World!</msg>
      </Locale>
      <Locale language="en" country="all" views="other">
        <msg name="greeting">Howdy!</msg>
      </Locale>
      <Locale language="fr" country="all">
        <msg name="greeting">Bonjour tout le monde!</msg>
      </Locale>
      ...
    </ModulePrefs>
    <Content type="html">
      ${Msg.greeting}
    </Content>
  </Module>
      ]]></artwork></figure>
      
      <t>When rendering the default view, the container will output 
      "Hello World!" for English-speaking Viewers and "Bonjour tout le monde!"
      for French-speaking Viewers.</t>
      
      <section title="Considerations for Bidirectional Text">
      
        <t>Gadget developers need to take care when working with languages 
        that require a default Right-to-Left ordering when rendering text.
        The <spanx style="verb">Bidi</spanx> reserved variable key can be used 
        within Variable Substitution expression statements to access information 
        about the default text directionality as specified by the currently 
        selected locale.</t>
        
        <t>The variables supported by the <spanx style="verb">Bidi</spanx> 
        reserved variable key are:
          <list style="hanging">
            <t hangText="START_EDGE">When the selected &lt;Locale&gt; element's
            <spanx style="verb">text_direction</spanx> attribute specifies 
            <spanx style="verb">rtl</spanx> (Right-to-Left"), the
            value of the <spanx style="verb">Bidi.START_EDGE</spanx> reserved 
            variable key will be <spanx style="verb">right</spanx>.
            When the attribute is either <spanx style="verb">ltr</spanx> 
            (Left-to-Right) or unspecified, the value will be 
            <spanx style="verb">left</spanx>.</t>
            <t hangText="END_EDGE">When the text direction is 
            <spanx style="verb">rtl</spanx>, the value of <spanx style="verb">Bidi.END_EDGE</spanx>
            will be <spanx style="verb">left</spanx>. When the attribute is either
            <spanx style="verb">ltr</spanx> or unspecified, the value will be 
            <spanx style="verb">right</spanx>.</t>
            <t hangText="DIR">The reserved variable key 
            <spanx style="verb">Bidi.DIR</spanx> returns the 
            value of the &lt;Locale&gt; element's <spanx style="verb">text_direction</spanx> 
            attribute or <spanx style="verb">ltr</spanx> if the attribute is 
            unspecified.</t>
            <t hangText="REVERSE_DIR">The reserved variable key 
            <spanx style="verb">Bidi.REVERSE_DIR</spanx> returns the opposite 
            of the &lt;Locale&gt; element's <spanx style="verb">text_direction</spanx>
            attribute value. If <spanx style="verb">text_direction</spanx> is 
            <spanx style="verb">ltr</spanx>,  <spanx style="verb">Bidi.REVERSE_DIR</spanx> 
            will return <spanx style="verb">rtl</spanx>. If text_direction is 
            <spanx style="verb">rtl</spanx>, <spanx style="verb">Bidi.REVERSE_DIR</spanx> 
            will return <spanx style="verb">ltr</spanx>.</t>
          </list>
        </t>
        
        <figure><preamble>The Bidi variables can be used to establish the 
        correct text directionality when rendering. For instance:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Locale language="en" country="all">
        <msg name="greeting">Hello World!</msg>
      </Locale>
      <Locale language="ar" country="all" text_direction="rtl">
        <msg name="greeting">&#0645;&#0631;&#062D;&#0628;&#0627 &#0627;&#0644;&#0639;&#0627;&#0644;&#0645!</msg>
      </Locale>
      ...
    </ModulePrefs>
    <Content type="html">
      <div dir="${Bidi.DIR}">${Msg.greeting}</div>
    </Content>
  </Module>        
        ]]></artwork></figure>
      
      </section>

      <section title="Message Bundle Documents" anchor="MessageBundles">
      
        <t>The &lt;Locale&gt; element can either directly contain &lt;msg&gt;
        elements that define the keys and values used for localization or 
        can reference "Message Bundle Documents" that provide the collection
        of &lt;msg&gt; elements.</t>

        <figure><preamble>For instance, the following &lt;Locale&gt; element:</preamble>
        <artwork><![CDATA[
  <Locale language="en" country="US">
    <msg name="color">Color</msg>
    <msg name="red">Red</msg>
    <msg name="green">Green</msg>
    <msg name="blue">Blue</msg>
  </Locale>
        ]]></artwork></figure>
        
        <figure><preamble>Can be replaced with a &lt;Locale&gt; that references
        an external Message Bundle that includes the same &lt;msg&gt; elements:</preamble>
        <artwork><![CDATA[
  <Locale language="en" country="US" messages="http://example.com/en/messages.xml" />
        ]]></artwork>
        </figure>
        
        <figure><preamble>The Message Bundle at http://example.com/en/messages/xml:</preamble>
        <artwork><![CDATA[
  <messagebundle>
    <msg name="color">Color</msg>
    <msg name="red">Red</msg>
    <msg name="green">Green</msg>
    <msg name="blue">Blue</msg>
  </messagebundle>
        ]]></artwork></figure>
        
        <t>As illustrated, Message Bundles are XML documents whose root
        element is a &lt;messagebundle&gt; that contains zero or more
        &lt;msg&gt; elements that use the same format as the children 
        of the &lt;Locale&gt; element. No XML Namespace is defined for
        the &lt;messagebundle&gt; or &lt;mgs&gt; elements.</t>
        
        <figure><artwork>
  messagebundle = element messagebundle {
    undefinedAttribute*,
    element msg {
      attribute name { text },
      text
    }
  }
        </artwork></figure>
        
        <t>Variable substitution expressions MAY be used within Message 
        Bundle Documents.</t>
        
        <t>Each Message Bundle Document provides &lt;msg&gt; elements 
        for a single locale. By convention, Message Bundle documents are 
        named as <spanx style="verb">{language}_{country}.xml</spanx>, where 
        <spanx style="verb">{language}</spanx> is either an ISO-639-1 Language 
        Code or <spanx style="verb">ALL</spanx> and <spanx style="verb">{country}</spanx> 
        is an ISO-3166-1 Country Code or <spanx style="verb">ALL"</spanx>. For 
        instance, a Message Bundle providing values for English-language 
        speakers within the United States would be named <spanx style="verb">en_US.xml</spanx>, 
        while a Message Bundle providing German-language values for 
        German-language speakers regardless of country would be named 
        <spanx style="verb">de_ALL.xml</spanx>. The Message Bundle named 
        <spanx style="verb">ALL_ALL.xml</spanx> would apply to all languages 
        in any country.</t>
  
      </section>
  
    </section>
    <!-- END LOCALIZATION -->
      
    <section title="Application Lifecycle Events" anchor="gadget-lifecycle-events">
    
      <t>The Application Lifecycle Event capability allows an OpenSocial
      server and container to send notifications to a remote endpoint
      of the application developer's choosing whenever events significant
      to the lifecycle of an individual instance of the application occur.
      Such notifications can be used for a variety of purposes, including,
      but not limited to, the provisioning of additional resources external
      to the container that instances of the application require to operate.</t>
    
      <t>Every instance of an application processed and rendered by a container 
      follows the same basic general lifecycle.</t>
      
      <t>The syntax used to identify individual types of events within the 
      application lifecycle is: </t>
      
      <figure><artwork>
  segment = 1*( ALPHA / DIGIT )
  prefix = segment *("." segment ) "."
  name = segment *("." segment)
  event = [prefix] "event" [ "." name ]
      </artwork></figure>
      
      <t>The following events are defined:</t>
      
      <texttable>
        <ttcol>Name</ttcol>
        <ttcol>Identifier</ttcol>
        <ttcol>Description</ttcol>
        
        <c>Pending</c>
        <c>org.opensocial.event.pending</c>
        <c>occurs prior to an application specification document
        being "Registered" with the container. This is an intermediate step in
        a application's lifecycle that occurs, for example, when a developer
        first submits the specification document to the container, or when an
        Embedded Experience that references a previously unknown specification
        is encountered, and that specification has not yet been processed. This
        phase in the lifecycle implies that additional action might be required
        before the application can be considered to be "Registered".</c>
        
        <c>Rejected</c>
        <c>org.opensocial.event.rejected</c>
        <c>occurs when "Registration" of a "Pending" 
        specification document cannot be completed for any reason. For instance, 
        if the registration is rejected by an administrator.</c>
        
        <c>Registered</c>
        <c>org.opensocial.event.registered</c>
        <c>occurs after the container first becomes
        aware of the Application Specification Document. For instance, when an 
        administrator adds an application to a catalog of available 
        applications, or when a previously unknown application is 
        referenced within an Embedded Experience currently being processed
        by a container.</c>
        
        <c>Available</c>
        <c>org.opensocial.event.available</c>
        <c>occurs when the application becomes
        available for use by the container. In order to be considered 
        "Available", an application MUST have first passed through the 
        "Registered" phase. There are a number of actions that can trigger the 
        availability of an application such as an administrator approving the 
        registration or adding the application to a "whitelist" of acceptable 
        applications.</c>
        
        <c>Unavailable</c>
        <c>org.opensocial.event.unavailable</c>
        <c>occurs when the application becomes
        unavailable for use by the container. Unavailable applications are known 
        to the container ("Registered") but cannot be used for some reason. 
        Examples include applications that have been added to a "blacklist" or 
        have otherwise been disabled for some reason.</c>
        
        <c>Updated</c>
        <c>org.opensocial.event.updated</c>
        <c>occurs whenever the application specification known
        to the container has been updated. This can happen whenever a new 
        version of the application is provided to the container.</c>
        
        <c>Installed</c>
        <c>org.opensocial.event.installed</c>
        <c>occurs when a specific instance of an application 
        is provisioned for use. For instance, when an instance is added to a 
        page. Only "Available" applications can be "Installed". Installing an
        application is not the same as "opening" or "rendering" the application.</c>
        
        <c>Configured</c>
        <c>org.opensocial.event.configured</c>
        <c>occurs whenever the configuration details for 
        an installed application have been modified.</c>
        
        <c>Restriction</c>
        <c>org.opensocial.event.restriction</c>
        <c>occurs whenever the functionality of a particular
        instance of the application has been restricted in some way. For instance, 
        if the operation of the application has caused it to exceed request rate 
        limitations or quotas and the container responds by limiting the 
        actions the application instance is permitted to perform. Another example
        could be when the container has limited the security policy permissions
        underwhich the instance of the application is operating.</c>
        
        <c>Opened</c>
        <c>org.opensocial.event.opened</c>
        <c>occurs whenever an "Installed" instance of an 
        application is opened or rendered by the container.</c>
        
        <c>Closed</c>
        <c>org.opensocial.event.closed</c>
        <c>occurs whenever an "Installed" instance of an 
        application is closed by the container. Note that closing an 
        application is not the same as uninstalling it. A closed application 
        can be reopened later.</c>
        
        <c>Uninstalled</c>
        <c>org.opensocial.event.uninstalled</c>
        <c>occurs when a provisioned instance of an 
        application is destroyed. This lifecycle event implies that all resources
        associated with a specific application instance are to be deallocated.</c>
        
        <c>Unregistered</c>
        <c>org.opensocial.event.unregistered</c>
        <c>occurs when a "Registered" application specification is removed 
        from the container.</c>
      </texttable>
      
      <t>A developer can indicate interest in receiving notification 
      whenever any of these lifecycle events occur by using the &lt;Link&gt;
      element with a <spanx style="verb">rel</spanx> attribute value equal to
      the identifier of the event. Containers are not, however, required to send 
      lifecycle event notifications and MAY ignore any &lt;Link&gt; element 
      specifying an event identifier.</t>
      
      <t>The special identifier <spanx style="verb">org.opensocial.event</spanx>
      can be used to indicate interest in receiving notification for all 
      event types.</t>
      
      <t>Use of the <spanx style="verb">org.opensocial.</spanx> prefix is 
      reserved by this specification. Implementations MUST NOT use event 
      identifiers that use the <spanx style="verb">org.opensocial.</spanx> 
      prefix other than those defined above. Implementations are free to 
      define additional event type identifiers that use prefixes other than 
      <spanx style="verb">org.opensocial.</spanx>.</t>
      
      <t>The optional <spanx style="verb">method</spanx> attribute can be 
      specified on the &lt;Link&gt; element to indicate the HTTP request 
      method to be used when sending the event notification. Valid values are 
      either <spanx style="verb">GET</spanx> or <spanx style="verb">POST</spanx>. 
      When not specified, the default is assumed to be 
      <spanx style="verb">GET</spanx>.</t>
      
      <figure><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Link rel="org.opensocial.event" href="http://example.org/event" method="POST" />
      <Link rel="org.opensocial.event.registered" href="http://example.org/event/registered" />
      <Link rel="org.opensocial.event.unregistered" href="http://example.org/event/unregistered" />
      ...
    </ModulePrefs>
    <Content type="html">
      ...
    </Content>
  </Module>
      ]]></artwork>
      </figure>
      
      <section title="Lifecycle Event Notifications">
      
        <t>Whenever a significant lifecycle event occurs for a particular
        application, the container MAY send an event notification to the IRI 
        identified by any &lt;Link&gt; element provided whose 
        <spanx style="verb">rel</spanx> attribute values identify the event. 
        If the container supports sending event notifications, one notification 
        SHOULD be sent for each matching &lt;Link&gt; element.</t>
        
        <t>For instance, given the following partial specification:</t>
      
        <figure><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Link rel="org.opensocial.event" href="http://example.org/event" method="POST" />
      <Link rel="org.opensocial.event.registered" href="http://example.org/event/registered" />
      <Link rel="org.opensocial.event.unregistered" href="http://example.org/event/unregistered" />
      ...
    </ModulePrefs>
    <Content type="html">
      ...
    </Content>
  </Module>
        ]]></artwork>
        </figure>
        
        <t>When the application is registered with the container, two event 
        notifications will be sent:
          <list style="symbols">
            <t>One to the endpoint "http://example.org/event" identified by
            the <spanx style="verb">org.opensocial.event</spanx> rel value, and</t>
            <t>One to the endpoint "http://example.org/event/registered" identified
            by the <spanx style="verb">org.opensocial.event.registered</spanx> rel value.</t>
          </list>
        </t>
        
        <t>Each event notification is sent as an HTTP request message using the
        method declared by the &lt;Link&gt; elements <spanx style="verb">method</spanx> 
        attribute. If the <spanx style="verb">method</spanx> attribute is not 
        specified, then the HTTP GET method is used.</t>
        
        <t>The container MUST add the additional <spanx style="verb">eventtype</spanx> 
        query string parameter to the IRI specified by the &lt;Link&gt; element. 
        The value MUST be the name part of the event identifier provided in the 
        <spanx style="verb">rel</spanx> attribute (e.g. if 
        <spanx style="verb">rel="org.opensocial.event.registered"</spanx>, then 
        <spanx style="verb">eventtype</spanx> will equal <spanx style="verb">registered</spanx>). 
        If the event identifier does not have a name component (as is the case 
        with the special identifier <spanx style="verb">org.opensocial.event</spanx>) 
        then value of <spanx style="verb">eventtype</spanx> MUST be set to
        a name specific to event that triggered the notification.</t>
        
        <t>If the &lt;Link&gt; element includes an <spanx style="verb">authz</spanx>
        attribute that specifies a value other than <spanx style="verb">none</spanx>,
        the notification MUST be authenticated using the authentication mechanism
        specified as described in <xref target="authentication"/>. If the 
        <spanx style="verb">authz</spanx> attribute specifies a value of 
        <spanx style="verb">none</spanx>, no authentication mechanism is to 
        be used. If the <spanx style="verb">authz</spanx> attribute is not 
        specified, the notification MUST be authenticated using the 
        <xref target="SignedFetch">Signed Fetch</xref> mechanism.</t>
        
        <figure><preamble>In the example given, the notification sent to 
        "http://example.org/event" will utilize the HTTP POST method 
        (line breaks are added to the request URI for readability):</preamble>
        <artwork>
  POST /event?eventtype=registered
    &oauth_consumer_key=myappkey
    &oauth_nonce=7sGE00xSfY4PBStICbXyPbIliNymOhu2
    &oauth_signature_method=HMAC-SHA1
    &oauth_timestamp=1290013827
    &oauth_version=1.0
    &opensocial_app_id=myappid
    &opensocial_app_url=
    &oauth_signature=N7mODAf9OJ1DXQRPisRqGK4DNMo= HTTP/1.1
  Host: example.org
  
        </artwork></figure>
      
        <figure><preamble>The notification sent to "http://example.org/event/registered"
        will utilize HTTP GET (line breaks are added to the request URI 
        for readability):</preamble>
        <artwork>
  GET /event?eventtype=registered
    &oauth_consumer_key=myappkey
    &oauth_nonce=7sGE00xSfY4PBStICbXyPbIliNymOhu2
    &oauth_signature_method=HMAC-SHA1
    &oauth_timestamp=1290013827
    &oauth_version=1.0
    &opensocial_app_id=myappid
    &opensocial_app_url=
    &oauth_signature=N7mODAf9OJ1DXQRPisRqGK4DNMo= HTTP/1.1
  Host: example.org
        </artwork></figure>
      
        <t>Responses to event notification requests are considered to be 
        insignificant by this specification.</t>
      
      </section>
      
      <section title="Legacy Support">
        <t>Previous version of this specification defined the following 
        deprecated event identifiers that MAY continued to be supported
        by containers for backwards compatibility:
          <list style="hanging">
            <t hangText="event">Equivalent to <spanx style="verb">org.opensocial.event</spanx>.</t>
            <t hangText="event.addapp">Equivalent to <spanx style="verb">org.opensocial.event.installed</spanx></t>
            <t hangText="event.removeapp">Equivalent to <spanx style="verb">org.opensocial.event.uninstalled</spanx></t>
            <t hangText="event.app">Provides an indication that some action
            has been performed on the application. The specific action performed
            is identified by adding an additional <spanx style="verb">action</spanx> 
            parameter to the GET or POST request. The valid "action" values are:
              <list style="symbols">
                <t><spanx style="verb">enabled</spanx>, </t> 
                <t><spanx style="verb">disabled</spanx>, </t>
                <t><spanx style="verb">approved</spanx>, </t>
                <t><spanx style="verb">submitted</spanx>, </t>
                <t><spanx style="verb">rejected</spanx>, </t>
                <t><spanx style="verb">new</spanx>, and </t>
                <t><spanx style="verb">banned</spanx></t>
              </list>
            </t>
          </list>
        </t>
      </section>
    </section>
    <!-- END GADGET LIFECYCLE EVENTS -->
 
    <section title="Data Pipelining" anchor="DataPipelining">
    
      <t>Data Pipelining is a declarative mechanism for defining the data an 
      application requires from the container. XML Elements are used to associate
      variable keys with specific kinds of data from a variety of different 
      sources. For instance, the &lt;os:DataRequest&gt; element can be used
      to access social data provided by the OpenSocial container, while the 
      &lt;os:HttpRequest&gt; element can provide access to content from any 
      HTTP endpoint.</t>
      
      <t>All Data Pipeline elements have a <spanx style="verb">key</spanx> 
      attribute whose value is used to uniquely identify the data. Such keys 
      can be used within Expression Language statements used for Variable 
      Substitution or with JavaScript API calls. Key names are always 
      case-sensitive.</t>

      <figure><preamble>The following illustrates a basic example of 
      Data Pipelining in a partial application specification:</preamble>
      <artwork><![CDATA[
  <Module xmlns:os="http://ns.opensocial.org/2008/markup">
    ...
    <Data>
      <os:DataRequest key="viewer" method="people.get" userId="@viewer" fields="name,birthday" />
      <os:HttpRequest key="remote" href="http://example.com/api" />
    </Data>
    <Content type="html">
      The viewer name is ${viewer.name}.
      
      The remote content is "${remote.result.content}".
    </Content>
  </Module>
      ]]></artwork></figure>
      
      <t>The Data Pipeline elements can appear:
        <list style="symbols">
          <t>As children of the &lt;Data&gt; element,</t>
          <t>As direct children of the &lt;Content&gt; element when the Proxied 
          Content model is used, and </t>
          <t>Within specially formatted HTML &lt;script&gt; tags included
          within HTML Content.</t>
        </list>
      </t>
      
      <t>The placement of Data Pipeline elements will determine when and where 
      the data associated with the key specified will be made available to the 
      container while an application view is being rendered. The considerations 
      and requirements for each of the options listed above are discussed 
      in detail in the relevant sections that follow.</t>
      
      <section title="The DataContext" anchor="DataContext">
        <t>For every application instance, a <spanx style="verb">DataContext</spanx>
        object is created that maintains all of the data associated with the 
        instance's Data Pipeline elements. The information contained 
        within the <spanx style="verb">DataContext</spanx> is available for
        use with Variable Substitution via Expression Language statements 
        or via the <spanx style="verb">opensocial.data</spanx> APIs; and while
        the data contained within the <spanx style="verb">DataContext</spanx> 
        is generally populated through processing of the Data Pipeline 
        elements, the <spanx style="verb">opensocial.data</spanx> APIs can
        be used to modify values or add additional keys.</t>
      </section>
      
      <section title="Data Pipeline Elements and the Data Block">
      
        <t>By default, when Data Pipeline elements appear as children of the 
        &lt;Data&gt; element, the container will process the elements and 
        register the resulting data with the <spanx style="verb">DataContext</spanx>
        for all views.</t>
        
        <t>Individual Data Pipeline elements, however, MAY specify a 
        <spanx style="verb">view</spanx> attribute whose value is a comma 
        separated list of specific views for which the element is associated. 
        Such elements will only be processed and added to the 
        <spanx style="verb">DataContext</spanx> when the identified views are 
        being rendered.</t>
        
        <figure><preamble>In the following example, the &lt;os:HttpRequest&gt;
        element using key <spanx style="verb">foo</spanx> is registered globally 
        and available within all views while the &lt;os:HttpRequest&gt; element 
        using key <spanx style="verb">bar</spanx> is only processed and 
        available when the <spanx style="verb">example</spanx> view is being 
        rendered:</preamble><artwork><![CDATA[
  <Module>
    ...
    <Data>
      <os:HttpRequest key="foo" href="http://example.org/api" />
      <os:HttpRequest key="bar" href="http://example.com/api" view="example"/>
    </Data>
    <Content type="html">
      ...
    </Content>
    <Content type="html" view="example">
      ...
    </Content>
  </Module>
        ]]></artwork></figure>
        
        <t>Multiple Data Pipeline elements MUST NOT share the same value for
        the key attribute unless each is specifically targeted at a different 
        view. In the following example, the key <spanx style="verb">foo</spanx> 
        would resolve to the value <spanx style="verb">abc</spanx> when the 
        default view is rendered and to <spanx style="verb">123</spanx> when the 
        <spanx style="verb">example</spanx> view is rendered:</t>
        
        <figure><artwork><![CDATA[
  <Module>
    ...
    <Data>
      <os:Var key="foo" value="abc" />
      <os:Var key="foo" value="abc" view="example" />
    </Data>
    <Content type="html">
      The value is ${foo}
    </Content>
    <Content type="html" view="example">
      The value is ${foo}
    </Content>
  </Module>       
        ]]></artwork></figure>
        
        <t>Note that currently, this specification does not specify
        exactly when the container processes the collection of Data Pipeline
        elements, nor are containers required to process data elements in 
        any particular order. Containers that process Data Pipeline elements
        to populate the <spanx style="verb">DataContext</spanx> will likely
        do so regardless of whether the referenced key is ever actually 
        used within an expression statement or API call.</t>
      
      </section>
      
      <section title="Data Pipeline Elements within HTML Content">
      
        <t>When using HTML Content, Data Pipeline elements MAY appear
        within the HTML inside a special &lt;script&gt; tag.</t>
        
        <figure><preamble>For instance,</preamble><artwork>
  &lt;Module>
    &lt;ModulePrefs&gt;
      &lt;Require feature="opensocial-data" />
    &lt;/ModulePrefs&gt;
    &lt;Content type="html">&lt;![CDATA[
      &lt;script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data">
        &lt;os:HttpRequest key="foo" href="http://example.com/api" />
        &lt;os:Var key="bar" value="abc123"/>
      &lt;/script>
    ]]>&lt;/Content>
  &lt;/Module>
        </artwork></figure>
        
        <t>As illustrated, when Data Pipeline elements are embedded within 
        HTML Content, the specification document MUST require the "opensocial-data"
        feature using the &lt;Require&gt; element within the &lt;ModulePrefs&gt;.</t>
        
        <t>The Data Pipeline elements themselves are contained within an
        HTML script tag whose <spanx style="verb">type</spanx> attribute 
        specifies the value <spanx style="verb">text/os-data</spanx>. Also
        note that the Data Pipeline XML namespace is declared for the "os:" 
        prefix. This is required in order for the embedded Data Pipeline 
        elements to processed properly while the content is being rendered.</t>
      
        <t>Data Pipeline elements defined in this manner are scoped specifically
        to the &lt;Content&gt; element in which they are embedded, meaning that
        the data each provides to the <spanx style="verb">DataContext</spanx>
        will be available only for expression statements and API calls that are 
        also in the same &lt;Content&gt; element.</t>
        
        <t>If an embedded Data Pipeline element specifies the same key as a
        Data Pipeline element contained within the &lt;Data&gt; element, 
        the value provided by the embedded elements takes precedence. In the 
        following example, the variable "foo" will resolve to "123" when 
        the default unnamed view is rendered:</t>
      
        <figure><artwork>
  &lt;Module>
    &lt;ModulePrefs&gt;
      &lt;Require feature="opensocial-data" />
    &lt;/ModulePrefs&gt;
    &lt;Data&gt;
     &lt;os:Var key="foo" value="abc"/>
    &lt;/Data&gt;
    &lt;Content type="html">&lt;![CDATA[
      &lt;script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data">
        &lt;os:Var key="foo" value="123"/>
      &lt;/script>
    ]]>&lt;/Content>
  &lt;/Module>
        </artwork></figure>

      </section>
      
      <section title="Data Pipeline Elements and Proxied Content" anchor="data-pipeline-proxy">
      
        <t>When using Proxied Content to render a view for an application,
        the container typically sends an HTTP GET request to the IRI
        provided by the &lt;Content&gt; element's href attribute. 
        In such cases, any information the remote endpoint needs to 
        generate the necessary content in response is provided within
        the IRI as query string parameters. There are times, however,
        when the endpoint requires significantly more information 
        than what can be adequately conveyed by the limited nature
        of query string parameters. To address such cases, Data Pipeline
        elements can be used directly within a &lt;Content&gt; element
        to define a collection of data that is to be sent to the 
        remote IRI using an HTTP POST request instead of GET.</t>
        
        <figure><preamble>For instance, with typical, non-pipelined 
        Proxy content:</preamble><artwork><![CDATA[
  <Content type="html" href="http://example.org/remote-server?id=${ViewParams.id}" />
        ]]></artwork></figure>
        
        <figure><preamble>The <spanx style="verb">${ViewParams.id}</spanx> 
        expression would be replaced with an appropriate value drawn from the 
        View Parameters passed into the application, and HTTP request sent to the 
        remote endpoint by the container would use HTTP GET:</preamble><![CDATA[
  GET /remote-server?id=abc123 HTTP/1.1
  Host: example.org
  Accept: application/json
        ]]></figure>
        
        <figure><preamble>However, when using Proxied Content with the 
        Data Pipeline elements, a developer can pass complex structured
        data to remote endpoint:</preamble><artwork><![CDATA[
  <Content type="html" href="http://example.org/remote-server">
    <os:Var key="id" value="${ViewParams.id}" />
    <os:Var key="name">
      {
        "givenName": "John",
        "familyName": "Doe"
      }
    </os:Var>
  </Content>
        ]]></artwork></figure>
        
        <figure><preamble>The request is transformed into an HTTP POST with
        a JSON-formatted payload containing the data specified by the 
        pipeline elements:</preamble><artwork><![CDATA[
  POST /remote-server HTTP/1.1
  Host: example.org
  Content-Type: application-json
  
  {
    "id" : "abc123",
    "name": {
      "givenName": "John",
      "familyName": "Doe"
    }
  }
        ]]></artwork></figure>
        
        <t>As illustrated by the example, each of the keys defined by the 
        Data Pipeline elements contained within the &lt;Content&gt; are 
        used as the property names in the JSON object sent to the remote 
        endpoint. The value of each property is the value returned by 
        processing the Data Pipeline element.</t>
        
        <t>&lt;Content&lt; element's of this type can contain any number 
        of Data Pipeline elements, each of which MUST have a corresponding 
        property in the generated JSON object that is sent to the server, 
        regardless of whether the attempt to process a particular Data Pipeline
        element results in an error or not. The value will be included within
        the JSON exactly as it is provided by the <spanx style="verb">DataContext</spanx>. 
        Only pipelined data contained within the &lt;Content&gt; will be 
        included in the generated JSON object.</t>
        
        <figure><preamble>In the follow example, assume that the processing
        of the &lt;os:DataRequest&gt; element fails and error details are 
        provided by the <spanx style="verb">DataContext</spanx>:</preamble>
        <artwork><![CDATA[
  <Content type="html" href="http://example.org">
    <os:Var key="key1" value="abc" />
    <os:DataRequest key="key2" method="people.get" userId="@viewer" groupId="@frields" />
  </Content>
        ]]></artwork></figure>
        
        <figure><preamble>The JSON data posted to the remote server would 
        include the value of <spanx style="verb">key1</spanx> and the error 
        information for <spanx style="verb">key2</spanx>:</preamble>
        <artwork><![CDATA[
  POST / HTTP/1.1
  Host: example.org
  Content-Type: application/json
  
  {
    "key1" : "abc",
    "key2" : {
      "error" : {
        "message" : "Processing Error",
        "code" : 500
      }
    }
  }
        ]]></artwork></figure>
        
        <t>When an application specification uses unrecognized Data Pipeline tags,
        the container is given the choice of either ignoring it or specifying
        a 404 (Not Found) error within the JSON structure using an 
        <xref target="core-api">Error Object</xref>.</t>
        
        <figure><preamble>In the example below, the application specification uses
        an undefined, hypothetical Data Pipeline extension:</preamble><artwork><![CDATA[
  <Content type="html" href="http://example.org">
    <os:Var key="key1" value="abc" />
    <osx:MyExtension key="key2" attr="val" />
  </Content>
        ]]></artwork></figure>
        
        <figure><preamble>The JSON generated for the HTTP POST would either 
        omit <spanx style="verb">key2</spanx> entirely:</preamble>
        <artwork><![CDATA[
  POST / HTTP/1.1
  Host: example.org
  Content-Type: application/json
   
  {
    "key1" : "abc"
  }
        ]]></artwork></figure>

        <figure><preamble>Or indicate that <spanx style="verb">key2</spanx> 
        could not be resolved:</preamble>
        <artwork><![CDATA[
  POST / HTTP/1.1
  Host: example.org
  Content-Type: application/json
   
  {
    "key1" : "abc",
    "key2" : {
      "error: {
        "message": "Not Found",
        "code": 404
      }
    }
  }
        ]]></artwork></figure>

      </section>
      
      <section title="The Data Pipeline Elements">
      
        <t>This specification currently defines three Data Pipeline elements:
          <list style="hanging">
            <t hangText="os:DataRequest">Used to access social data provided
            by the container.</t>
            <t hangText="os:HttpRequest">Used to access data provided by 
            a remote endpoint.</t>
            <t hangText="os:Var">Used to define static, literal variables.</t>
          </list>
        </t>
        
        <t>The XML Namespace for each of the Data Pipeline elements is
        <spanx style="verb">http://ns.opensocial.org/2008/markup</spanx>. 
        By convention, this specification uses the namespace prefix "os:" for 
        the Data Pipeline Namespace. Note, however, that the choice of prefix
        is arbitrary and not semantically equivalent.</t>
        
        <t>Implementations MAY define additional Data Pipeline elements 
        that use an XML Namespace other than 
        <spanx style="verb">http://ns.opensocial.org/2008/markup</spanx>.
        Such extensions MUST contain a <spanx style="verb">key</spanx> 
        attribute whose value specifies the name that will be used to associate 
        that element's resolved value within the <spanx style="verb">DataContext</spanx>. 
        Containers are recommended to ignore any Data Pipeline elements they 
        do not support or do not understand.</t>
      
        <figure><artwork>
  namespace os = "http://ns.opensocial.org/2008/markup"
        
  BaseDataPipeline = {
    attribute key { text },
    undefinedAttribute*
  }
        </artwork></figure>
      
        <section title="The &lt;os:DataRequest&gt; Element" anchor="DataRequest">
        
          <t>The &lt;os:DataRequest&gt;</t> element is used to access social
          data provided by the container. It is generally equivalent to the 
          JavaScript API methods provided to the application by the container to 
          access information such as the identity of the current Viewer, 
          a particular users group of friends, an activity stream, and so forth.
          the &lt;os:DataRequest&gt; element can only be used to access content
          and cannot be used to modify social data stored by the container.</t>

          <figure><artwork>
  DataRequest = element os:DataRequest {
    BaseDataPipeline,
    attribute method { text }
  }
          </artwork></figure>

          <t>In addition to the <spanx style="verb">key</spanx> attribute 
          required for all Data Pipeline elements, the &lt;os:DataRequest&gt; 
          element MUST contain a <spanx style="verb">method</spanx> attribute 
          whose value is an Operation Identifier as defined in <xref target="core-api"/>. 
          All additional attributes contained by the &lt;os:DataRequest&gt;
          are to be mapped directly to the identically named input parameters 
          for the data retrieval operation specified by the 
          <spanx style="verb">method</spanx>.</t>
          
          <t>Child elements or any additional content provided within the 
          &lt;os:DataRequest&gt; element SHOULD be ignored.</t>
          
          <t>For example, the <spanx style="verb">people.get</spanx> Operation 
          Identifier defined within <xref target="social-app"/> allows an 
          Application to retrieve information about people known to the container. 
          It can, for instance, be used to retrieve basic profile details about 
          an individual or retrieve a listing of associated profiles 
          (e.g. a "friends" list).</t>
          
          <figure><preamble>When invoked using the JavaScript API to retrieve 
          the listing of profiles associated with the application's current Viewer, 
          the method is invoked as:</preamble><artwork>
  var params = {"userId": "@viewer", "groupId": "@friends"};
  osapi.people.get(params).execute(callback);
  
  function callback(friends) { ... }
          </artwork></figure>
          
          <figure><preamble>The equivalent operation using the &lt;os:DataRequest&gt;
          element would be:</preamble><artwork><![CDATA[
  <os:DataRequest key="friends" method="people.get" userId="@viewer" groupId="@friends" />
          ]]></artwork></figure>
          
          <t>Assuming the operation was processed successfully, the 
          <spanx style="verb">friends</spanx> variable will be added to the 
          <spanx style="verb">DataContext</spanx> with a value identical to that 
          provided as input to the callback function in the previous 
          JavaScript API.</t>
        
        </section>
        
        <section title="The &lt;os:HttpRequest&gt; Element" anchor="HttpRequest">
        
          <t>The &lt;os:HttpRequest&gt;</t> element is used to access arbitrary
          content from a remote HTTP endpoint. It is generally equivalent to the 
          <spanx style="verb">osapi.http</spanx> JavaScript API methods provided 
          to the application by the container. Currently, only HTTP GET and POST 
          methods are supported.</t>
          
          <figure><artwork>
  HttpRequest = element os:HttpRequest {
    BaseDataPipeline,
    SignedFetch,
    attribute method { "get" | "post" },
    attribute href { IRI }
  }
          </artwork></figure>
        
          <t>In addition to the <spanx style="verb">key</spanx> attribute 
          required for all Data Pipeline elements, the &lt;os:HttpRequest&gt; 
          element MUST contain a <spanx style="verb">method</spanx>
          attribute whose value is either <spanx style="verb">get</spanx> or 
          <spanx style="verb">post</spanx> indicating the HTTP 
          request method to use for the request, and an 
          <spanx style="verb">href</spanx> attribute whose value specifies a 
          dereferenceable IRI to which the request will be sent. If not 
          specified, the value of the <spanx style="verb">method</spanx> 
          attribute will be assumed to be <spanx style="verb">get</spanx>. 
          All additional attributes contained by the &lt;os:HttpRequest&gt; 
          are to be mapped directly to the identically named input parameters 
          defined for corresponding <spanx style="verb">osapi.http.get</spanx> 
          or <spanx style="verb">osapi.http.post</spanx> JavaScript APIs.</t>
          
          <t>Child elements or any additional content provided within the 
          &lt;os:HttpRequest&gt; element SHOULD be ignored.</t>
          
          <figure><preamble>For example, the <spanx style="verb">osapi.http.get</spanx>
          operation can be used to retrieve content from a remote endpoint 
          located at "http://example.org/foo":</preamble><artwork>
  var params = {
    "href": "http://example.org/foo",
    "format":"json", 
    "authz":"signed"};
  osapi.http.get(params).execute(callback);
  
  function callback(results) { ... }
          </artwork></figure>
          
          <figure><preamble>The equivalent operation using the &lt;os:HttpRequest&gt;
          element would be:</preamble><artwork><![CDATA[
  <os:HttpRequest key="results" 
    href="http://example.org/foo" 
    format="json" authz="signed" />
          ]]></artwork></figure>
          
          <t>Assuming the method identified was processed successfully, the 
          "results" variable will be added to the <spanx style="verb">DataContext</spanx>
          with a value identical to that provided as input to the callback 
          function in the previous JavaScript API.</t>
          
          <t>The exact structure of the value stored within the <spanx style="verb">DataContext</spanx>
          will depend on the type of response returned by the remote endpoint.
          Currently, the only supported options are for the server to return 
          JSON-formatted data, textual content (e.g. plain text or HTML) or 
          an error response. Binary content is currently not supported.</t>
          
          <figure><preamble>If the server returns a JSON formatted response
          such as:</preamble><artwork>
  HTTP/1.1 200 OK
  Content-Type: application/json
  
  { "data" : "xyz" }
          </artwork></figure>
        
          <figure><preamble>The value stored within the <spanx style="verb">DataContext</spanx>
          would be:</preamble><artwork>
  {
    "result" : {
      "content" : {
        "data" : "xyz"
      },
      "status" : 200,
      "headers" : {
        "Content-Type" : [
          "application/json"
        ]
      }
    }
  }
          </artwork></figure>
        
          <figure><preamble>If the server turns textual content such as:</preamble>
          <artwork><![CDATA[
  HTTP/1.1 200 OK
  Content-Type: text/html
  
  <html><head>...</head><body>Hello World</body></html>
          ]]></artwork></figure>
        
          <figure><preamble>The value stored within the <spanx style="verb">DataContext</spanx>
          would be:</preamble><artwork><![CDATA[
  {
    "result" : {
      "content" : "<html><head>...</head><body>Hello World</body></html>",
      "result": 200,
      "headers" : {
        "Content-Type" : [
          "text/html"
        ]
      }
    }
  }
          ]]></artwork></figure>
        
          <figure><preamble>If the server returns an error, or if the content 
          returned by the server is neither text-based or valid JSON, the value
          stored by the <spanx style="verb">DataContext</spanx> will specify an 
          <xref target="core-api">Error Object</xref> with an appropriate value 
          indicating the nature of the error. Within the value of the "error" 
          property, the "data" property contains the content actually returned 
          by the server, if any.</preamble>
          <artwork><![CDATA[
  {
    "error" : {
      "code" : 404,
      "message" : "Not Found",
      "data" : {
        "content" : "<html><body>File not found</body></html>",
        "headers" : {
          "Content-Type" : [
            "text/html"
          ]
        }
      }
    }
  }
          ]]></artwork></figure>
        
        </section>
        
        <section title="The &lt;os:Var&gt; Element" anchor="Var">
        
          <t>The &lt;os:Var&gt;</t> element is used to declare a string 
          JSON object, or JavaScript array as a literal value or associate 
          the results of evaluating an Expression Statement with a key.</t>
          
          <figure><artwork>
  SimpleVar = element os:Var {
    BaseDataPipeline,
    value { text }
  }
  
  JsonVar = element os:Var {
    BaseDataPipeline,
    text
  }
  
  Var = SimpleVar | JsonVar
          </artwork></figure>
        
          <t>In addition to the <spanx style="verb">key</spanx> attribute 
          required for all Data Pipeline elements, the &lt;os:Var&gt; element 
          can either contain a <spanx style="verb">value</spanx> attribute or 
          contain textual content.</t>
          
          <figure><preamble>The following &lt;os:Var&gt; examples are equivalent:</preamble>
          <artwork><![CDATA[
  <os:Var key="key1" value="ABC" />
  
  <os:Var key="key1">ABC</os:Var>
          ]]></artwork></figure>
  
          <t>When determining the value to store within the <spanx style="verb">DataContext</spanx>,
          the container will:
            <list style="symbols">
              <t>First apply Variable Substitution to replace all Expression
              Language statements appearing within the value,</t>
              <t>Then, attempt to parse the string as a JavaScript Array. For
              instance, if the value is "[1,2,3,4,5]", then a JavaScript Array
              containing the values 1, 2, 3, 4 and 5 will be created. If 
              successfully parsed, the Array will be stored into the 
              <spanx style="verb">DataContext</spanx> and processing will end.</t>
              <t>If unable to parse as an Array, the container will attempt 
              to parse the value as a JSON Object. If successfully parsed, the
              object will be stored into the <spanx style="verb">DataContext</spanx>
              and processing will end.</t>
              <t>If the value is still unable to be parsed, it will be stored 
              within the <spanx style="verb">DataContext</spanx> as a literal
              string value.</t>
            </list>
          </t>
          
          <figure><preamble>Given the example,</preamble><artwork><![CDATA[
  <os:Var key="key1">
    [{"data": ${1+1}}]
  <os:Var>
          ]]></artwork></figure>
         
          <figure><preamble>The value stored within the <spanx style="verb">DataContext</spanx>
          will be a JavaScript array containing a JSON object with a single 
          property "data" whose value is the result of processing the Expression
          Language statement "${1+1}":</preamble><artwork><![CDATA[
  [
    { "data":2 }
  ]
          ]]></artwork></figure>
        
        </section>
        
        <section title="Expression Statements within Data Pipeline Attributes">
        
          <t>The attributes used with the &lt;os:DataRequest&gt; 
          and &lt;os:HttpRequest&gt; elements often require values that 
          vary depending on a range of criteria including input parameters
          or the results returned by other Data Pipeline elements.</t>
          
          <t>For instance, when the application needs to display the next 
          set of results from a paged-collection, the view 
          parameters specifying the current page can be passed into
          the &lt;os:HttpRequest&gt; or &lt;os:DataRequest&gt;
          using Expression Language statements:</t>
          
          <figure><artwork><![CDATA[
  <os:DataRequest key="PagedFriends" method="people.get" 
    userId="@owner" groupId="@friends" 
    startIndex="${ViewParams.first}" 
    count="20"/>
          ]]></artwork></figure>
          
          <t>Likewise, the results of one Data Pipeline element can 
          be passed as attribute values in another. For instance, 
          we can reference the stored value for the "PagedFriends"
          key generated by processing the previous example within 
          an &lt;os:HttpRequest&gt;:</t>
          
          <figure><artwork><![CDATA[
  <os:HttpRequest href="http://example.com/api?ids=${PagedFriends.ids}"/>
          ]]></artwork></figure>
          
          <t>When referencing the results of other Data Pipeline elements 
          in this way, Expression Language statements can access the input 
          parameters and additional metadata about the referenced results by 
          using the special reserved <spanx style="verb">Request</spanx> 
          property on the referenced key, e.g. 
          <spanx style="verb">${PagedFriends.Request.userId}</spanx>.</t>
          
          <t>The metadata properties provided by the <spanx style="verb">Request</spanx> 
          property include:
            <list style="symbols">
              <t>All of the attributes defined on the referenced Data Pipeline
              element (in the previous example, these would include "key", "method",
              "userId", "groupId", "startIndex", and "count"),
              <t>The properties "totalResults", "count" and "startIndex" if 
              the value stored by referenced key is a Collection object 
              as defined by <xref target="core-api"/>; the values of which
              map to the corresponding values of the stored collection.</t>
            </list>
          </t>
          
          <t>These properties are determined dynamically by the container 
          and can be used within any Expression Language statement:</t>
          
          <figure><artwork><![CDATA[
  <os:DataRequest key="Page1" method="people.get"
    userId="@owner" groupId="@friends"
    startIndex="${ViewParams.first}" count="20"/>

  <os:DataRequest key="Page2" method="people.get" 
    userId="${Page1.Request.userId}" groupId="@friends"
    startIndex="${Page1.Request.startIndex + Page1.Request.count}"
    count="${Page1.Request.count}"/>          
          ]]></artwork></figure>
        
        </section>
      </section>
    </section>
    <!--  END DATA PIPELINING -->
   
  </section>
  <!-- END CAPABILITIES -->
  
  <section title="Container-Provided Features">
    
    <section title="Core Features">
    
      <t>Core Features are provided automatically by the container for 
      all application instances without requiring the application to declare them
      using either the &lt;Require&gt; or &lt;Optional&gt; element in 
      the &lt;ModulePrefs&gt;</t>
      
      <section title="The Logging Feature" anchor="gadgets.log">
    
        <t>The Logging Feature provides a basic mechanism to 
        log messages for debugging and informational purposes. The 
        "Log" to which such messages are recorded is container specific. 
        Whether and how each container chooses to provide access to the 
        collection of recorded messages is considered beyond the scope 
        of this specification.</t>  
    
        <section title="JavaScript API">
        
          <t>The Logging Feature provides the following JavaScript API methods
          and constants to developers:</t>
        
         <section title="gadgets.log" anchor="gadgets.log">
         
           <t>The <spanx style="verb">gadgets.log</spanx> method is used
           to record an informational message to the container provided 
           Log.</t>
           
           <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.log(message)
           </artwork></figure>
           
           <t>The method takes a single input parameter that can be any valid
           JSON-serializable Object. No return value is specified.</t>
           
           <figure><preamble>For example:</preamble><artwork>
  gadgets.log("This is a message");
  
  gadgets.log(
    {"code":123, "data": "This is a message"}
  );
           </artwork></figure>
         </section>
         
         <section title="gadgets.warn" anchor="gadgets.warn">
         
           <t>The <spanx style="verb">gadgets.warn</spanx> method is used
           to record a warning message to the container provided 
           Log.</t>
           
           <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.warn(message)
           </artwork></figure>
           
           <t>The method takes a single input parameter that can be any valid
           JSON-serializable Object. No return value is specified.</t>
           
           <figure><preamble>For example:</preamble><artwork>
  gadgets.warn("This is a warning!");
  
  gadgets.log(
    {"code":123, "data": "This is a warning!"}
  );
           </artwork></figure>
         </section>
         
         <section title="gadgets.error" anchor="gadgets.error">
         
           <t>The <spanx style="verb">gadgets.error</spanx> method is used
           to record an error message to the container provided 
           Log.</t>
           
           <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.error(message)
           </artwork></figure>
           
           <t>The method takes a single input parameter that can be any valid
           JSON-serializable object. No return value is specified.</t>
           
           <figure><preamble>For example:</preamble><artwork>
  gadgets.error("This is an error");
  
  gadgets.error(
    {"code":123, "data": "This is an error"}
  );
           </artwork></figure>
         </section>
    
         <section title="gadgets.setLogLevel" anchor="gadgets.setLogLevel">
         
           <t>The <spanx style="verb">gadgets.setLogLevel</spanx> method establishes
           the minimum log level threshold at which containers SHOULD record messages
           sent to the Log.</t>
           
           <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.setLogLevel(logLevel)
           </artwork></figure>
           
           <t>The method takes a single parameter whose value is a non-negative
           integer indicating the log level as defined below. No return value is
           specified.</t>
         
           <t>The acceptable values for the logLevel input parameter are as 
           follows. For convenience, a corresponding alias for each value is 
           also defined and MAY be used in place of the literal numeric value:
             <texttable>
               <ttcol>Value</ttcol>
               <ttcol>Alias</ttcol>
               <ttcol>Description</ttcol>
               
               <c><spanx style="verb">1</spanx></c>
               <c><spanx style="verb">gadgets.log.INFO</spanx></c>
               <c>Specifies that the container provided Log 
               SHOULD record all informational, warning and 
               error messages.</c>
               
               <c><spanx style="verb">2</spanx></c>
               <c><spanx style="verb">gadgets.log.WARN</spanx></c>
               <c>Specifies that the container provided Log
               SHOULD record all warning and error messages 
               but ignore informational messages.</c>
               
               <c><spanx style="verb">3</spanx></c>
               <c><spanx style="verb">gadgets.log.ERROR</spanx></c>
               <c>Specifies that the container provided Log
               SHOULD record all error messages but ignore 
               informational and error messages.</c>
               
               <c><spanx style="verb">4</spanx></c>
               <c><spanx style="verb">gadgets.log.NONE</spanx></c>
               <c>Specifies that the container provided Log
               SHOULD ignore all messages.</c>
             </texttable>
           </t>
           
           <figure><preamble>For example, to record all messages:</preamble><artwork>
  gadgets.setLogLevel(1);
  // or
  gadgets.setLogLevel(gadgets.log.INFO);
           </artwork></figure>
           
           <figure><preamble>Or to record only error messages:</preamble><artwork>
  gadgets.setLogLevel(3);
  // or
  gadgets.setLogLevel(gadgets.log.ERROR);
           </artwork></figure>
         
         </section>
        </section>
      
      </section>
      <!--  END LOGGING FEATURE -->

       <section title="The IO Feature">
      
         <t>The IO Feature provides a mechanism for retrieving
         external content provided either by the container or other remote 
         endpoints.</t>
         
         <t>The IO Feature is automatically enabled for all applications.</t> 
      
         <section title="JavaScript API"> 
      
           <t>The IO Feature provides the following JavaScript API methods
           and constants to developers:</t>
      
           <section title="gadgets.io.encodeValues" anchor="gadgets.io.encodeValues">
           
             <t>The <spanx style="verb">gadgets.io.encodeValues</spanx> method
             converts an input JavaScript object into a URL-encoded string as 
             defined by Section 2.1 of <xref target="RFC3986"/>.</t>
           
             <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.io.encodeValues(object)
             </artwork></figure>
      
             <t>The method takes as input a single JavaScript object whose 
             property names and values will be enumerated and converted into 
             a proper URL-formatted String that is returned to the caller. The 
             resulting String will be constructed such that each property 
             and value pair is separated by an ampersand (&amp;) character.</t>
             
             <figure><preamble>For example, given the following object:</preamble>
             <artwork>
  var data = {
    "foo" : "bar",
    "abc" : 123,
    "zyx" : true,
    "baz" : ["a","b","c"]
  }
             </artwork></figure>
             
             <figure><preamble>Calling <spanx style="verb">gadgets.io.encodeValues(data)</spanx>
             would generate the output:</preamble><artwork>
  foo=bar&abc=123&zyx=true&baz=a,b,c
             </artwork></figure>        
             
             <t>If the value of top-level property or member of an Array is 
             any value other than a JavaScript primitive, it's value will be
             encoded as a JSON-serialized String as returned by the 
             <spanx style="verb">gadgets.json.stringify</spanx> method.</t>
             
             <figure><preamble>For instance, given the following input:</preamble>
             <artwork>
  var data = {
    "foo" : {
      "a" : "b",
      "c" : "d"
    },
    "bar" : [
      { "xyz" : "123" },
      { "abc" : 321 }
    ]
  }
             </artwork></figure>
      
             <figure><preamble>Calling <spanx style="verb">gadgets.io.encodeValues(data)</spanx>
             would generate the output:</preamble><artwork>
  foo=%7B%22a%22%3A%22b%22%2C%22c%22%3A%22d%22%7D&bar=%7B%22xyz%22%3A%22123%22%7D,%7B%22abc%22%3A321%7D
             </artwork></figure>
             
           </section>
           
           <section title="gadgets.io.getProxyUrl" anchor="gadgets.io.getProxyUrl">
           
             <t>When an application needs to load data from an external source -- for 
             instance, an image or script resource -- it can either choose to 
             access that content directly or proxy the request for the content 
             through the container. In the latter case, the 
             <spanx style="verb">gadgets.io.getProxyUrl</spanx> can be used to 
             ask the container to generate a "Proxy URL" for the remote resource that the 
             application would use in place of the resource's own direct URL.</t>
           
             <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.io.getProxyUrl(url, opt_params)
             </artwork></figure>
              
             <t>The method accepts as input the remote URL for which the Proxy
             URL is to be generated and an optional collection of additional 
             properties the container will use when generating the 
             returned Proxy URL.</t>
              
             <t>The following table lists the additional properties currently 
             defined by this specification. For convenience, an alias is defined
             for each that MAY be used in place of the literal property name in 
             JavaScript code:
               <texttable>
                 <ttcol>Name</ttcol>
                 <ttcol>Alias</ttcol>
                 <ttcol>Description</ttcol>
                     
                 <c>REFRESH_INTERVAL</c>
                 <c>gadgets.io.ProxyUrlRequestParameters.REFRESH_INTERVAL</c>
                 <c>Explicitly sets the numer of seconds content will be cached 
                 by the container as described in <xref target="caching" />.</c>
               </texttable>
             </t>
             
             <t>Containers are free to accept additional optional parameters, 
             however the definition and use of such parameters are undefined 
             by this specification.</t>
             
             <figure><preamble>The following example creates a Proxy URL for a
             remote image file and sets a cache timeout of one hour. The proxy 
             URL is then used within the src attribute of an HTML image tag. 
             When the image tag is rendered, a request will be sent to the 
             Proxy URL causing the container to fetch the image from the remote
             source and cache it locally.</preamble>
             <artwork>
  &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="osapi" /&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      ...
      &lt;script&gt;
        function fetchImage() {
          var imgsrc = "http://example.org/avatars/bob.png"; 
          var img = document.createElement("img");
          img.src = gadgets.io.getProxyUrl(imgsrc);
          ...
        }
        gadgets.util.registerOnLoadHandler(fetchImage);
      &lt;/script&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
             </artwork></figure>
              
           </section>
           <section title="gadgets.io.makeRequest" anchor="gadgets.io.makeRequest">
           
             <t>The <spanx style="verb">gadgets.io.makeRequest</spanx> method 
             is used to send HTTP requests to a provided URL and pass the 
             returned content to a callback function.</t>
             
             <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.io.makeRequest(url, callback, opt_params)
             </artwork></figure>
           
             <t>The method takes as input a single URL to which requests will be
             sent, a reference to a callback function that the container will
             invoke when the request has completed, and an object containing an 
             optional collection of additional parameters. No return value is
             specified for the method.</t>
      
             <figure><preamble>In the following example, a simple HTTP GET request is sent 
             to a remote endpoint with no additional request parameters:</preamble><artwork>
  gadgets.io.makeRequest(
    "http://example.org/foo",
    function(response) {
      // handle the response
    }
  );       
             </artwork>
             
             <t>The following table lists the additional properties currently 
             defined by this specification. For convenience, an alias is defined
             for each that MAY be used in place of the literal property name in 
             JavaScript code:
               <texttable>
                 <ttcol>Name</ttcol>
                 <ttcol>Alias</ttcol>
                 <ttcol>Description</ttcol>
                     
                 <c><spanx style="verb">ALIAS</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.ALIAS</spanx></c>
                 <c>When a specification document uses the &lt;ExternalService&gt;
                 element to define an alias for a Container-managed external 
                 service, the optional <spanx style="verb">ALIAS</spanx> parameter 
                 can be used in place of the <spanx style="verb">gadgets.io.makeRequest</spanx> methods
                 <spanx style="verb">url</spanx> parameter to identify the external 
                 service to which the request is to be directed. If unspecified, 
                 the default value for this parameter is assumed to be null.</c>
                     
                 <c><spanx style="verb">AUTHORIZATION</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.AUTHORIZATION</spanx></c>
                 <c>Specifies the authorization method to use as defined by
                 <xref target="authorization"/>. Valid values are:
                 <spanx style="verb">none</spanx>, <spanx style="verb">signed</spanx>, 
                 <spanx style="verb">oauth</spanx> and <spanx style="verb">oauth2</spanx>. 
                 For convenience, aliases for each of these values have been provided for 
                 use in JavaScript code. These aliases are: 
                   <list style="symbols">
                     <t><spanx style="verb">gadgets.io.AuthorizationType.NONE</spanx>,</t>
                     <t><spanx style="verb">gadgets.io.AuthorizationType.SIGNED</spanx>,</t>
                     <t><spanx style="verb">gadgets.io.AuthorizationType.OAUTH</spanx> and</t> 
                     <t><spanx style="verb">gadgets.ioAuthorizationType.OAUTH2</spanx>.</t>
                   </list>
                 If not specified, the default value for this parameter is assumed to be 
                 <spanx style="verb">none</spanx>.</c>
                     
                 <c><spanx style="verb">CONTENT_TYPE</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.CONTENT_TYPE</spanx></c>
                 <c>The value of the <spanx style="verb">CONTENT_TYPE</spanx> 
                 parameter serves as a hint to the container as to what kind of 
                 content the request is expected to return so that the container 
                 can perform any appropriate additional processing necessary on 
                 the response. Valid values are: <spanx style="verb">DOM</spanx>, 
                 <spanx style="verb">FEED</spanx>, <spanx style="verb">JSON</spanx> 
                 and <spanx style="verb">TEXT</spanx>. For convenience, aliases 
                 for each of these values have been provided for use in 
                 JavaScript code. These aliases are: 
                   <list style="symbols">
                     <t><spanx style="verb">gadgets.io.ContentType.DOM</spanx>, </t>
                     <t><spanx style="verb">gadgets.io.ContentType.FEED</spanx>,</t>
                     <t><spanx style="verb">gadgets.io.ContentType.JSON</spanx> and</t>
                     <t><spanx style="verb">gadgets.io.ContentType.TEXT</spanx></t>
                   </list>. If not specified, the default value for this 
                   parameter is assumed to be <spanx style="verb">TEXT</spanx>, 
                   indicating that no specific content-type is to be assumed.</c>
                 
                 <c><spanx style="verb">GET_FULL_HEADERS</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.GET_FULL_HEADERS</spanx></c>
                 <c>The value of the <spanx style="verb">GET_FULL_HEADERS</spanx> 
                 parameter is a boolean. If true, the response object passed to 
                 the callback function will contain the complete collection of 
                 Headers and their associated values as returned in the HTTP 
                 response. If unspecified, the default value is assumed to be 
                 False, in which case the container will determine which 
                 collection of headers to pass to the callback function.</c>
                 
                 <c><spanx style="verb">GET_SUMMARIES</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.GET_SUMMARIES</spanx></c>
                 <c>When the <spanx style="verb">CONTENT_TYPE</spanx> parmameter 
                 equals the value <spanx style="verb">feed</spanx>, 
                 the <spanx style="verb">GET_SUMMARIES</spanx> parameter 
                 specifies a boolean that when set to True, instructs the 
                 container to pass only summarized versions of the retrieved 
                 items in the feed to the callback function. It is the 
                 containers responsibility to determine what constitutes a the 
                 summarized version of the item. If not specified, the default 
                 value for this parameter is assumed to be False.</c>
                 
                 <c><spanx style="verb">HEADERS</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.HEADERS</spanx></c>
                 <c>Specifies the collection of HTTP Request Headers the container
                 SHOULD include in the request. The value is specifies as an 
                 associative map using the header names as a key and a literal 
                 String value. For example, to include <spanx style="verb">Accept-Language</spanx> 
                 and <spanx style="verb">X-Custom</spanx> headers in the request, 
                 the value of the <spanx style="verb">HEADERS</spanx> property 
                 would be set to <spanx style="verb">{"Accept-Language":"de-DE", "X-Custom":"abc"}</spanx>.</c>
                 
                 <c><spanx style="verb">METHOD</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.METHOD</spanx></c>
                 <c>Specifies the HTTP method that MUST be used for the request. 
                 Valid values are <spanx style="verb">DELETE</spanx>, 
                 <spanx style="verb">GET</spanx>, <spanx style="verb">HEAD</spanx>, 
                 <spanx style="verb">PATCH</spanx>, <spanx style="verb">POST</spanx> 
                 and <spanx style="verb">PUT</spanx>. For convenience, aliases 
                 for each of these values have been provided for use in 
                 JavaScript code. The aliases are: 
                   <list style="symbols">
                     <t><spanx style="verb">gadgets.io.MethodType.DELETE</spanx>,</t>
                     <t><spanx style="verb">gadgets.io.MethodType.GET</spanx>, </t>
                     <t><spanx style="verb">gadgets.io.MethodType.HEAD</spanx>,</t> 
                     <t><spanx style="verb">gadgets.io.MethodType.PATCH</spanx>,</t>
                     <t><spanx style="verb">gadgets.io.MethodType.POST</spanx> and</t> 
                     <t><spanx style="verb">gadgets.io.MethodType.PUT</spanx>.</t>
                   </list>
                   If not specified, the default value for this parameter is 
                   assumed to be <spanx style="verb">GET</spanx>.</c>
                 
                 <c><spanx style="verb">NUM_ENTRIES</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.NUM_ENTRIES</spanx></c>
                 <c>When the <spanx style="verb">CONTENT_TYPE</spanx> parameter 
                 equals the value <spanx style="verb">feed</spanx>, the 
                 <spanx style="verb">NUM_ENTRIES</spanx> parameter specifies the 
                 maximum number of items from the feed to return to the callback 
                 function. If not specified, the default value for this 
                 parameter is assumed to be <spanx style="verb">3</spanx>.</c>
                 
                 <c><spanx style="verb">OAUTH_RECEIVED_CALLBACK</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_RECEIVED_CALLBACK</spanx></c>
                 <c>When the container sends a request to an OAuth service 
                 provider asking for permission to access a given resource, 
                 it will, by default, specify a default container-specific
                 callback URI that the OAuth service provider will use to 
                 redirect control back to the container and deliver the 
                 requested access token. In certain cases, a specific application
                 instance might need to override the default callback URI.
                 The <spanx style="verb">OAUTH_RECEIVED_CALLBACK</spanx> parameter
                 can be used to specify an alternative absolute URI reference.</c>
                 
                 <c><spanx style="verb">OAUTH_REQUEST_TOKEN</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 is equal to either <spanx style="verb">OAUTH</spanx> or
                 <spanx style="verb">OAUTH2</spanx>, the <spanx style="verb">OAUTH_REQUEST_TOKEN</spanx> 
                 parameter can be used to specified a pre-authorized OAuth 
                 Request Token for use in the request. If the container does 
                 not already have an OAuth Access Token suitable for use with 
                 the request, the container SHOULD use the supplied Request 
                 Token to request and acquire a new Access Token. If not 
                 specified, the default value is assumed to be null.</c>
                 
                 <c><spanx style="verb">OAUTH_REQUEST_TOKEN_SECRET</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_REQUEST_TOKEN_SECRET</spanx></c>
                 <c>When the <spanx style="verb">OAUTH_REQUEST_TOKEN</spanx> 
                 parameter is specified, the <spanx style="verb">OAUTH_REQUEST_TOKEN_SECRET</spanx> 
                 parameter can be used to supply an associated Request Token 
                 Secret. If not specified, the default value is assumed to be null.</c>
                 
                 <c><spanx style="verb">OAUTH_SERVICE_NAME</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_SERVICE_NAME</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 is equal to either <spanx style="verb">OAUTH</spanx> or
                 <spanx style="verb">OAUTH2</spanx>, and the specification 
                 document uses the &lt;OAuth&gt; or &lt;OAuth2&gt; elements 
                 within the &lt;ModulePrefs&gt; to define associated OAuth 
                 services, the <spanx style="verb">OAUTH_SERVICE_NAME</spanx> 
                 parameter specifies the name of the &lt;Service&gt; element 
                 that provides the OAuth Service details to use for the request.
                 When not specified, the default value is assumed to be an 
                 empty string (e.g. "").</c>
                 
                 <c><spanx style="verb">OAUTH2_SCOPE</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH2_SCOPE</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 is equal to <spanx style="verb">OAUTH2</spanx>, the
                 <spanx style="verb">OAUTH2_SCOPE</spanx> parameter specifies 
                 the value of the OAuth 2.0 scope parameter the container SHOULD 
                 use with the request. The scope parameter is defined in 
                 <xref target="I-D.ietf-oauth-v2"/>. If not specified, the 
                 default value is assumed to be null, indicating that no scope 
                 parameter is to be provided.</c>
                 
                 <c><spanx style="verb">OAUTH_TOKEN_NAME</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_TOKEN_NAME</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 is equal to either <spanx style="verb">OAUTH</spanx> or
                 <spanx style="verb">OAUTH2</spanx>, the application MAY use the 
                 <spanx style="verb">OAUTH_TOKEN_NAME</spanx> to specify
                 an alias for the OAuth Access Token used for the request. If the 
                 container does not yet have an appropriate Access Token to use
                 with the request, it will follow the appropriate steps to acquire 
                 one and cache it using the specified <spanx style="verb">OAUTH_TOKEN_NAME</spanx> 
                 value. On subsequent requests, the specified 
                 <spanx style="verb">OAUTH_TOKEN_NAME</spanx> will be used
                 to locate and use the cached Access Token. If not specified, the
                 default value is assumed to be an empty string (e.g. "").</c>
                 
                 <c><spanx style="verb">OAUTH_USE_TOKEN</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.OAUTH_USE_TOKEN</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 is equal to either <spanx style="verb">OAUTH</spanx> or
                 <spanx style="verb">OAUTH2</spanx>, the container is typically 
                 required to acquire an appropriate OAuth Access Token prior to 
                 sending the request to the URL. The <spanx style="verb">OAUTH_USE_TOKEN</spanx> 
                 parameter can be used to modify this default behavior. Valid 
                 values are: <spanx style="verb">never</spanx>, 
                 <spanx style="verb">if_available</spanx> and <spanx style="verb">always</spanx>. 
                 If not specified, the default value is assumed to be 
                 <spanx style="verb">always</spanx>. When <spanx style="verb">OAUTH_USE_TOKEN</spanx> 
                 is equal to <spanx style="verb">never</spanx>, the container 
                 SHOULD NOT attempt to acquire an Access Token for the request 
                 but SHOULD send the request to the URL just as it would any 
                 other request using with OAuth 1.0a or OAuth 2.0 protocols. 
                 When <spanx style="verb">OAUTH_USE_TOKEN</spanx> is equal to 
                 <spanx style="verb">if_available</spanx>, the container 
                 SHOULD include the Access Token in the request only if an 
                 appropriate token is available. If an Access Token is not 
                 available, the request SHOULD be sent to the URL without the 
                 Access Token. When <spanx style="verb">OAUTH_USE_TOKEN</spanx>
                 is equal to <spanx style="verb">always</spanx>, the container 
                 is required to acquire an Access Token prior to sending the 
                 request and MUST include that token in the request sent to 
                 the URL.</c>
                 
                 <c><spanx style="verb">POST_DATA</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.POST_DATA</spanx></c>
                 <c>When the <spanx style="verb">METHOD</spanx> parameter equals 
                 either <spanx style="verb">POST</spanx>, <spanx style="verb">PATCH</spanx>,
                 or <spanx style="verb">PUT</spanx>, the <spanx style="verb">POST_DATA</spanx> 
                 parameter specifies the data that is to be included as the 
                 payload of the request. The value is specified as a String. If 
                 not specified, the value defaults to null, indicating that no 
                 payload is to be sent.</c>
                     
                 <c><spanx style="verb">REFRESH_INTERVAL</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.REFRESH_INTERVAL</spanx></c>
                 <c>Explicitly sets the numer of seconds content will be cached 
                 by the container as specified by <xref target="caching"/>.</c>
                 
                 <c><spanx style="verb">SIGN_OWNER</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.SIGN_OWNER</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 equals either <spanx style="verb">SIGNED</spanx> or 
                 <spanx style="verb">OAUTH</spanx>, the <spanx style="verb">SIGN_OWNER</spanx> 
                 parameter indicates whether the container SHOULD include the 
                 identity of the <xref target="Application-Roles">Instance Owner</xref> 
                 when signing the request as described in <xref target="authentication"/>. 
                 The value is specified as a Boolean. When not specified, the 
                 default value is assumed to be False.</c>
                 
                 <c><spanx style="verb">SIGN_VIEWER</spanx></c>
                 <c><spanx style="verb">gadgets.io.RequestParameters.SIGN_VIEWER</spanx></c>
                 <c>When the <spanx style="verb">AUTHORIZATION</spanx> parameter 
                 equals either <spanx style="verb">SIGNED</spanx> or
                 <spanx style="verb">OAUTH</spanx>, the <spanx style="verb">SIGN_VIEWER</spanx> 
                 parameter indicates whether the container SHOULD include the 
                 identity of the current Viewer when signing the request as described 
                 in <xref target="authentication"/>. The value is specified as 
                 a Boolean. When not specified, the default value is assumed to 
                 be False.</c>

               </texttable>
             </t>
             
             <t>Containers are free to accept additional optional parameters, 
             however the definition and use of such parameters are undefined 
             by this specification.</t>
      
             <section title="The callback parameter and the Response Object">
             
               <t>When the container finished processing the request, the 
               response data is returned to the application by passing a Response 
               Object as a parameter to the provided callback function.</t>
             
               <t>The properties of the Response object passed to the callback
               function are:
                 <texttable>
                   <ttcol>Name</ttcol>
                   <ttcol>Type</ttcol>
                   <ttcol>Description</ttcol>
                   
                   <c><spanx style="verb">data</spanx></c>
                   <c>(varies)</c>
                   <c>Provides the parsed data of the response, if applicable. 
                   The value type will vary depending on the value of the 
                   <spanx style="verb">CONTENT_TYPE</spanx> parameter specified 
                   for the request. If <spanx style="verb">CONTENT_TYPE</spanx>
                   was not specified, then the value <spanx style="verb">TEXT</spanx> 
                   is assumed to have been used. When <spanx style="verb">CONTENT_TYPE</spanx> 
                   equals <spanx style="verb">DOM</spanx>, the value is an HTML DOM
                   object. When <spanx style="verb">CONTENT_TYPE</spanx> equals 
                   <spanx style="verb">FEED</spanx>, the value is a JSON 
                   representation of an RSS or or Atom Document as specified by 
                   [TODO: Feed Object Reference]. When <spanx style="verb">CONTENT_TYPE</spanx> 
                   equals <spanx style="verb">JSON</spanx>, the value is a 
                   JSON Object. When <spanx style="verb">CONTENT_TYPE</spanx> 
                   is text, or if the response could not be parsed by the 
                   container, the value is a String containing the unparsed 
                   content of the response payload.</c>
                   
                   <c><spanx style="verb">errors</spanx></c>
                   <c>Array of Error Objects</c>
                   <c>Provides a listing of any errors that occurred during the 
                   processing of the request. TODO: Need more detail on this.</c>
                   
                   <c><spanx style="verb">headers</spanx></c>
                   <c>Headers Object</c>
                   <c>An object containing the response headers. Header names are 
                   used as the keys for this object. TODO: Need more detail on this.</c>
                   
                   <c><spanx style="verb">rc</spanx></c>
                   <c>Number</c>
                   <c>Provides a numeric value representing the HTTP status code
                   of the response.</c>
                   
                   <c><spanx style="verb">text</spanx></c>
                   <c>String</c>
                   <c>Provides a String containing the unparsed content of the 
                   response payload.</c>
                   
                   <c><spanx style="verb">oauthApprovalUrl</spanx></c>
                   <c>String</c>
                   <c>When either the OAuth 1.0a or OAuth 2.0 protocols are used to 
                   secure a request and the container requires an appropriate 
                   Access Token to be acquired in order to continue, the container will 
                   abort the request and invoke the callback function, passing
                   in a Response object with the <spanx style="verb">oauthApprovalUrl</spanx> 
                   property set. The value is a String providing the URL of an 
                   external page provided by the OAuth Service Provider to 
                   allow the user to approve the request. Use of the OAuth 
                   Popup Feature as defined by <xref target="oauthpopup"/>
                   is recommended. Once approval has been acquired, the call to 
                   <spanx style="verb">gadgets.io.makeRequest</spanx> needs to be 
                   repeated in order to complete the request.</c>
                   
                   <c><spanx style="verb">oauthError</spanx></c>
                   <c>String</c>
                   <c>When either the OAuth 1.0a or OAuth 2.0 protocols are used to
                   secure a request and an OAuth related error occurs at anytime 
                   during the processing of the request, the container will abort
                   the request and invoke the callback function, passing in a 
                   Response object with the <spanx style="verb">oauthError</spanx> 
                   property set. The value will be one of a set of OAuth-specific 
                   String constants that identify the error that has occurred.</c>
                   
                   <c>oauthErrorText</c>
                   <c>String</c>
                   <c>When the Response Object is used to communicate information 
                   about an OAuth-related error and the <spanx style="verb">oauthError</spanx> 
                   property is set, the <spanx style="verb">oauthErrorText</spanx> 
                   property MAY be used by the container to provide a human-readable 
                   description of the error for debugging or informational purposes.</c>
                   
                 </texttable>
               </t>
             </section>
           </section>
         </section>
      
       </section>
       <!--  END IO FEATURE -->

      <section title="The JSON Feature" anchor="gadgets.json">
    
        <t>The JSON Feature provides operations for serializing objects to
        and from a JSON-formatted String.</t>
    
        <section title="JavaScript API">
        
          <t>The JSON Feature provides the following JavaScript API methods
          to developers:</t>
        
          <section title="gadgets.json.parse" anchor="gadgets.json.parse">
            <t>The <spanx style="verb">gadgets.json.parse</spanx> method 
            parses a JSON-formatted String and returns the corresponding 
            JavaScript object value.</t>
            <figure><artwork>
  &lt;static&gt; &lt;Object&gt; gadgets.json.parse(text)
            </artwork></figure>
         </section>
          <section title="gadgets.json.stringify" anchor="gadgets.json.stringify">
         
            <t>The <spanx style="verb">gadgets.json.stringify</spanx> method
            serializes a JavaScript value into a JSON-formatted string.</t>
         
            <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.json.stringify(object)
            </artwork></figure>
          
            <t>The object takes as input any valid JavaScript object and returns
            an equivalent JSON object. If the value of a property is a reference
            to another object, the reference object will also be serialized.
            Properties whose values are references to Function objects will be 
            ignored and omitted from the resulting JSON-serialization.</t>
            
            <figure><preamble>For instance, the following example:</preamble>
            <artwork>
  var l = {"z":"y"};
  var data = {
    "a" : "a",
    "b" : [1,2,3],
    "c" : l,
    "d" : new Date(),
    "e" : [],
    "f" : {},
    "g" : null
  }
  var output = gadgets.json.stringify(data);
            </artwork></figure>
            
            <figure><preamble>Would yield the following as the value for the output
            variable:</preamble><artwork>
  {"a":"a","b":[1,2,3],"c":{"z":"y"},"d":"2012-03-28T23:16:50.560Z","e":[],"f":{},"g":null}        
            </artwork></figure>
            
          </section>
        </section>
      </section>
      <!--  END JSON FEATURE -->

       <section title="The User Preferences Feature" anchor="gadgets.Prefs">
        
         <t>The User Preferences Feature provides access to user preferences,
         preferred rendering dimensions and the localized collection of
         messages selected by the container for a view currently being rendered
         by the container.</t>
         
         <t>The User Preferences Feature is automatically enabled for all applications.</t>
    
         <section title="JavaScript API">
    
           <t>The User Preferences Feature provides the following JavaScript 
           API objects and methods to developers:</t>
    
           <section title="The gadgets.Prefs Object" anchor="gadgets.Prefs.ctor">
           
             <t>Instances of the <spanx style="verb">gadgets.Prefs</spanx> Object
             provide access to the user preferences, preferred rendering
             dimensions and localized collection of messages selected by the container
             for a specific application instance.</t>
             
             <t>Instances of the object are created using the JavaScript new 
             keyword. The specific identity of a specific application instance 
             MAY be passed in as an optional parameter.</t>
             
             <figure><preamble>In the example below, a <spanx style="verb">gadgets.Prefs</spanx>
             object is created to access the current Viewer's preferred language 
             and the stored value of the "name" user preference:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  var name = prefs.getString("name");
  var lang = prefs.getLang();
             </artwork></figure>
             
             <t>The <spanx style="verb">gadgets.Prefs</spanx> object provides the 
             following collection of methods:</t>
             
             <section title="gadgets.Prefs.getArray" anchor="gadgets.Prefs.getArray">
             
               <t>The <spanx style="verb">gadgets.Prefs.getArray</spanx> method
               returns the stored value associated with the specified user preference
               key as a JavaScript array. If the value stored is not currently an array,
               the value will be returned as an an array with a single element. If
               no value is currently associated with the specified key, an empty
               array will be returned.</t>
               
               <figure><artwork>
  &lt;Array&gt; &lt;instance&gt;.getArray(key)
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadget.Prefs();
  var array = prefs.getArray("foo");
  for (var n = 0; n < array.length; n++) {
    var item = array[n];
    // ...
  }
               </artwork></figure>
             </section>
             
             <section title="gadgets.Prefs.getBool" anchor="gadgets.Prefs.getBool">      
    
               <t>The <spanx style="verb">gadgets.Prefs.getBool</spanx> method
               returns the stored value associated with the specified user preference
               key as a JavaScript Boolean. If the stored value is either not
               current specified or cannot be interpreted as a Boolean, the value
               returned will be False. If the stored value is the literal String 
               <spanx style="verb">true</spanx> or a non-zero number (positive 
               or negative) the value returned will be True.</t>
               
               <figure><artwork>
  &lt;Boolean&gt; &lt;instance&gt;.getBool(key)
               </artwork></figure>
             
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadget.Prefs();
  if (prefs.getBool("foo")) {
    // ...
  }
               </artwork></figure>
             </section>
       
             <section title="gadgets.Prefs.getCountry" anchor="gadgets.Prefs.getCountry">
             
               <t>The <spanx style="verb">gadgets.Prefs.getCountry</spanx> method
               returns the current Viewer's country as determined by the container.
               The value will be an ISO 3166-1 Country Code.</t>
               
               <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getCountry()
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  var country = prefs.getCountry();
               </artwork></figure>
             
             </section>
             
             <section title="gadgets.Prefs.getFloat" anchor="gadgets.Prefs.getFloat">      
    
               <t>The <spanx style="verb">gadgets.Prefs.getFloat</spanx> method
               returns the stored value associated with the specified user preference
               key as a JavaScript Number containing a floating-point value. 
               If the stored value is either not current specified or cannot be 
               interpreted as a floating point number, the value
               returned will be 0.</t>
               
               <figure><artwork>
  &lt;Number&gt; &lt;instance&gt;.getFloat(key)
               </artwork></figure>
             
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadget.Prefs();
  var float = prefs.getFloat("foo");
               </artwork></figure>
             </section>
    
             <section title="gadgets.Prefs.getInt" anchor="gadgets.Prefs.getInt">      
    
               <t>The <spanx style="verb">gadgets.Prefs.getInt</spanx> method
               returns the stored value associated with the specified user preference
               key as a JavaScript Number containing an integer value. 
               If the stored value is either not currently specified or cannot be 
               interpreted as an integer number, the value returned will be 
               <spanx style="verb">0</spanx>.</t>
               
               <figure><artwork>
  &lt;Number&gt; &lt;instance&gt;.getInt(key)
               </artwork></figure>
             
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadget.Prefs();
  var int = prefs.getInt("foo");
               </artwork></figure>
             </section>
             
             <section title="gadgets.Prefs.getLang" anchor="gadgets.Prefs.getLang">
             
               <t>The <spanx style="verb">gadgets.Prefs.getLang</spanx> method
               returns the current Viewer's preferred language as determined by 
               the container. The value will be an ISO 639-1 Language Code.</t>
               
               <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getLang()
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  var lang = prefs.getLang();
               </artwork></figure>
             
             </section>
             
             <section title="gadgets.Prefs.getModuleId" anchor="gadgets.Prefs.getModuleId">
             
               <t>The <spanx style="verb">gadgets.Prefs.getModuleId</spanx> method
               returns the gadget instances unique ID as provided by the container.</t>
               
               <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getModuleId()
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  var id = prefs.getModuleId();
               </artwork></figure>
             
             </section>
             
             <section title="gadgets.Prefs.getMsg" anchor="gadgets.Prefs.getMsg">
             
               <t>The <spanx style="verb">gadgets.Prefs.getMsg</spanx> method
               returns the localized String value associated with the specified
               key as provided by the Message Bundle selected by the container for
               the current Viewer's preferred language and country. Messages are
               defined using &lt;Locale&gt; elements within the &lt;ModulePrefs&gt;. 
               If the specified key has no associated message, an empty String 
               will be returned.</t>
               
               <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getMsg(key)
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      ...
      &lt;Locale&gt;
        &lt;msg name="foo"&gt;Test message&gt;/msg&gt;
        ...
      &lt;/Locale&gt;
      ...
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt[CDATA[
      ...
      &lt;script&gt;
        ...
        var prefs = new gadgets.Prefs();
        var foo = prefs.getMsg("foo");
        // foo = "Test message"
        ...
      &lt;/script&gt;
      ...
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
               </artwork></figure>
             
             </section>
             
             <section title="gadgets.Prefs.getString" anchor="gadgets.Prefs.getString">
             
               <t>The <spanx style="verb">gadgets.Prefs.getString</spanx> method
               returns the stored value associated with the specified user 
               preference key as a JavaScript String. If the stored value is 
               not currently specified, the value returned will be an empty
               String.</t>
               
               <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getString(key)
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  var str = prefs.getString("foo");
               </artwork></figure>
             
             </section>
               
           </section>
         
         </section>
         
         <section title="The &quot;setprefs&quot; Feature">
         
           <t>By default, the <spanx style="verb">gadgets.Prefs</spanx> object
           provides read-only access to the stored user preferences for 
           particular application instance. In order to modify the user preference
           values, the "setprefs" feature MUST be specified using either 
           the &lt;Require&gt; or &lt;Optional&gt; element within the 
           &lt;ModulePrefs&gt;.</t>
           
           <t>Containers MUST provide the "setprefs" feature.</t>
           
           <figure><preamble>For example:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Require feature="setprefs" />
      ...
    </ModulePrefs>
    ...
  </Module>
           ]]></artwork></figure>
           
           <section title="JavaScript API">
           
             <t>When the "setprefs" feature is enabled for an application, two 
             additional JavaScript methods: <spanx style="verb">set</spanx>
             and <spanx style="verb">setArray</spanx> are enabled for use 
             on the <spanx style="verb">gadgets.Prefs</spanx> object.</t>
           
             <section title="gadgets.Prefs.set" anchor="gadget.Prefs.set">
             
               <t>The <spanx style="verb">gadgets.Prefs.set</spanx> method
               stores the specified value and associates it with the given 
               key. The value can be any JavaScript primitive. No return 
               value is specified.</t>
               
               <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.set(key,value)
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  prefs.set("foo", "Some value");
               </artwork></figure>
             
             </section>
             
             <section title="gadgets.Prefs.setArray" anchor="gadget.Prefs.setArray">
             
               <t>The <spanx style="verb">gadgets.Prefs.setArray</spanx> 
               method stores the specified Array value and associates it
               with the given key. The members of the Array can be any
               JavaScript primitive. No return value is specified.</t>
             
               <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.setArray(key,array)
               </artwork></figure>
               
               <figure><preamble>For example:</preamble><artwork>
  var prefs = new gadgets.Prefs();
  prefs.setArray("foo",["a","b","c"]);
               </artwork></figure>
             
             </section>
           
           </section>
         
         </section>
         
       </section>
       <!--  END USER PREFERENCES FEATURE -->
    
      <section title="The Utility Feature" anchor="gadgets.util">
       
        <t>The Utility Feature provides general purpose utility functions
        that are available automatically for all applications.</t>
       
        <section title="JavaScript API">
        
          <t>The Utility Feature provides the following JavaScript API methods
          to developers:</t>
        
          <section title="gadgets.util.escapeString" anchor="gadgets.util.escapeString">
          
            <t>The <spanx style="verb">gadgets.util.escapeString</spanx> 
            processes the characters of an input String and replaces specific
            potentially problematic characters with corresponding HTML entities.</t>
            
            <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.util.escapeString(str)
            </artwork></figure>
          
            <t>The following characters are affected:
              <texttable>
                <ttcol>Character</ttcol>
                <ttcol>Unicode Codepoint</ttcol>
                <ttcol>Replacement</ttcol>            
                <c>newline (\n)</c>
                <c>10</c>
                <c>&amp;#10;</c>            
                <c>carriage return (\r)</c>
                <c>13</c>
                <c>&amp;#13;</c>            
                <c>double quote (")</c>
                <c>34</c>
                <c>&amp;quot;</c>            
                <c>ampersand (&amp;)</c>
                <c>38</c>
                <c>&amp;amp;</c>            
                <c>single quote (')</c>
                <c>39</c>
                <c>&amp;#39;</c>            
                <c>left angle bracket (&lt;)</c>
                <c>60</c>
                <c>&amp;lt;</c>            
                <c>right angle bracket (&gt;)</c>
                <c>62</c>
                <c>&amp;gt;</c>            
                <c>backslash (\)</c>
                <c>92</c>
                <c>&amp;#92;</c>            
                <c>line separator</c>
                <c>8232</c>
                <c>&amp;#8232;</c>
                <c>paragraph separator</c>
                <c>8233</c>
                <c>&amp;#8233;</c>
              </texttable>
            </t>
          </section>
    
          <section title="gadgets.util.getFeatureParameters" anchor="gadgets.util.getFeatureParameters">
          
            <t>The <spanx style="verb">gadgets.util.getFeatureParameters</spanx>
            returns collection of parameters provided for the given feature
            as specified by &lt;Param&gt; elements within a &lt;Require&gt; or
            &lt;Optional&gt; element in the &lt;ModulePrefs&gt;.</t>
          
            <figure><artwork>
  &lt;static&gt; &lt;Object&gt; gadgets.util.getFeatureParameters(feature)
            </artwork></figure>
            
            <t>The method accepts as input a String specifying the feature name
            and returns a JavaScript object. Each property of the returned object
            corresponds to one &lt;Param&gt; element contained by the &lt;Require&gt;
            or &lt;Optional&gt; element for the named feature. If the feature does
            not exist in the &lt;ModulePrefs&gt;, a null value is returned.</t>
          
            <figure><preamble>For example:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      ...
      &lt;Require feature="myFeature"&gt;
        &lt;Param name="foo"&gt;&lt;![CDATA[This is the value]]&gt;&lt;/Param&gt;
      &lt;/Require&gt;
      ...
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        ...
        var myFeatureParams = gadgets.util.getFeatureParameters("myFeature");
        var foo = myFeatureParams["foo"]; // returns "This is the value"
        ...
      &lt;/script&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
            </artwork></figure>
          </section>
          
          <section title="gadgets.util.hasFeature" anchor="gadgets.util.hasFeature">
          
            <t>The <spanx style="verb">gadgets.util.hasFeature</spanx> returns 
            whether or not the specified feature has been enabled for this 
            application instance.</t>
            
            <figure><artwork>
  &lt;static&gt; &lt;Boolean&gt; gadgets.util.hasFeature(feature)
            </artwork></figure>
          
          </section>
         
          <section title="gadgets.util.registerOnLoadHandler" anchor="gadgets.util.registerOnLoadHandler">
          
            <t>The <spanx style="verb">gadgets.util.registerOnLoadHandler</spanx>
            method registers a Function that the container will execute immediately
            after loading the application. Multiple Functions can be registered; all 
            will be invoked in the same order in which they were registered.</t>
            
            <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.util.registerOnLoadHandler(callback)
            </artwork></figure>
            
            <t>The <spanx style="verb">gadgets.util.registerOnLoadHandler</spanx>
            mechanism is generally equivalent to the onLoad event handler on 
            the HTML Body tag. Once the container has fully rendered the content
            of a particular view, all of the registered callback Functions will
            be invoked.</t>
    
          </section>
          
          <section title="gadgets.util.sanitizeHtml" anchor="gadgets.util.sanitizeHtml">
          
            <t>The <spanx style="verb">gadgets.util.sanitizeHtml</spanx> method
            processes a text String that potentially may contain unsafe and 
            untrusted JavaScript code or Stylesheets and returns a modified 
            version that is safe for rendering. The returned value MAY still 
            include HTML markup. If plain text without markup is desired, 
            the <spanx style="verb">gadgets.util.escapeString</spanx> method 
            SHOULD be used instead. Exactly how the String is to be modified
            is up to each container implementation. </t>
            
            <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.util.sanitizeHtml(text)
            </artwork></figure>
          
            <t>The method takes as input a single text String value and returns
            the "sanitized" version of that String.</t>
    
         </section>
         
          <section title="gadgets.util.unescapeString" anchor="gadgets.util.unescapeString">
          
            <t>The <spanx style="verb">gadgets.util.unescapeString</spanx> 
            reverses the processing of the <spanx style="verb">gadgets.util.escapeString</spanx>
            method by replacing HTML entities with their literal character equivalents</t>
          
            <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.util.unescapeString(str)
            </artwork></figure>
            
            <figure><preamble>For example:</preamble><artwork>
  var m = "&amp;lt;p&amp;gt;&amp;quot;Hello&amp;quot;&amp;lt;/p&amp;gt;";
  var n = gadgets.util.unescapeString(m);
  // n will equal: &lt;p&gt;"Hello"&lt;/p&gt;
            </artwork></figure>
          </section>
        </section>
      </section>
      <!-- END UTILS FEATURE -->
 
    </section>
    <!-- END CORE FEATURES -->
    
    <section title="Recommended Features">
    
      <t>Recommended Features SHOULD be implemented by a container and 
      made available to application instances that specify the feature 
      ID using either the &lt;Require&gt; or &lt;Optional&gt; element in
      the &lt;ModulePrefs&gt;</t>
   
        <section title="The Action Contributions Feature" anchor="gadgets.actions">

          <t>Some container implementations reserve portions of their user 
          interface for providing links, menus, buttons, etc that are 
          distinct from the applications they host. The "Action Contributions"
          feature allows applications to contribute functionality to these reserved
          areas.</t>

          <t>Additionally, applications can use the feature to associate actions with
          specific types of OpenSocial objects. In traditional desktop applications,
          such actions are often rendered as options on context menus when you 
          click on an object such as a person or file. For instance, selecting 
          a Person object might display options like "Start a Chat" or 
          "View Contact Information". With the "Action Contributions" feature, 
          an application can notify the container of which such actions it can provide 
          so that when a user selects the action, the container can direct the 
          appropriate application to carry it out.</t>

          <t>The "Action Contributions" feature is enabled by specifying the 
          "actions" feature name with either an &lt;Optional&gt;
          or &lt;Require&gt; element within the &lt;ModulePrefs&gt;. The 
          actions contributed by the application are specified using a &lt;Param&gt;
          element with the name <spanx style="verb">action-contributions</spanx> 
          within the feature declaration.</t>
     
          <figure><preamble>The following example defines an optional dependency
          on the "Action Contributions" feature and contributes a single action
          to the set of "Navigation Links" provided by the container. The 
          <spanx style="verb">path</spanx> property on the &lt;action&gt; 
          element specifies where the action is being contributed. When the 
          item is selected, the container will invoke the callback handler 
          provided by the JavaScript in the &lt;Content&gt; element.</preamble><artwork>
  &lt;Module>
    &lt;ModulePrefs title="Sample VOIP">
      &lt;Optional feature="actions">
        &lt;Param name="action-contributions">&lt;![CDATA[
          &lt;action id="org.samplervoip.navLink" 
            path="container/navigationLinks" 
            label="Phone" />
        ]]&gt;&lt;/Param>
      &lt;/Optional>
    &lt;/ModulePrefs>
    &lt;Content type="html">&lt;![CDATA[
      &lt;script>
      
        function navLink(selection) { ... }
      
        gadgets.util.registerOnLoadHandler(
          function() {
            if (gadgets.actions) {
              gadgets.actions.updateAction({
                id: "org.samplervoip.navLink",
                callback: navLink
              });
            }
          }
        );
      &lt;/script>
    ]]&gt;&lt;/Content>
  &lt;/Module>
     </artwork></figure>
     
     <figure><preamble>Contributing actions to specific OpenSocial data 
     types is similar. Rather than specifying the location to which the 
     action is to be added, the &lt;action&gt; element specifies the 
     data type. In either case, a callback function provided by the 
     application is registered and invoked to handle the action:</preamble><artwork>
  &lt;Module>
    &lt;ModulePrefs title="Sample VOIP">
      &lt;Require feature="actions">
        &lt;Param name="action-contributions">&lt;![CDATA[
          &lt;action id="org.samplevoip.callbyperson" 
            dataObject="opensocial.Person" 
            label="Call using VOIP Phone" />
        ]]&gt;&lt;/Param>
      &lt;/Require>
    &lt;/ModulePrefs>
    &lt;Content type="html">&lt;![CDATA[
      &lt;script>
      
        function dial(selection) { ... }
      
        gadgets.util.registerOnLoadHandler(
          function() {
            if (gadgets.actions) {
              gadgets.actions.updateAction({
                id: "org.samplevoip.callbyperson",
                callback: dial
              });
            }
          }
        );
      &lt;/script>
    ]]&gt;&lt;/Content>
  &lt;/Module>
     </artwork></figure>

     <figure><preamble>Actions can also be contributed programmatically by calling the 
     <spanx style="verb">gadgets.actions.addAction</spanx> API and passing
     in an "action" object. For instance:</preamble><artwork>
  var mycallback = function(){
    ...
  };
  
  var myaction = {
    id: "com.acme.mycallaction",
    tooltip: "My Action Tooltip",
    label: "Call Person",
    icon: "images/myicon.png",
    callback: mycallback,
    dataType: "opensocial.Person"
  }
  
  gadgets.actions.addAction(myaction);      
     </artwork></figure>
  
     <figure><preamble>In some simple cases, an action provided by an application might simply 
     be handled by navigating to an IRI. It such cases, a callback function
     is not required and the application developer can simply provide the IRI 
     in the action declaration. For instance, in the example below, the 
     container will display the provided IRI in a new tab when the "Contact US"
     navigation action is selected:</preamble><artwork>
  &lt;Module>
    &lt;ModulePrefs title="Sample VOIP">
      &lt;Require feature="actions">
        &lt;Param name="action-contributions">&lt;![CDATA[
          &lt;action id="org.example.goSomewhere" 
            path="container/navigationLinks" 
            label="Contact Us!" 
            url="http://www.example.org/contact" 
            viewTarget="TAB" />
        ]]&gt;&lt;/Param>
      &lt;/Require>
    &lt;/ModulePrefs>
    ...
  &lt;/Module>
     </artwork>
     
     <t>If a <spanx style="verb">viewTarget</spanx> is not specified, the container
     will select an appropriate default view target.</t>
  
     <t>When registering actions, application developers need only provide basic
     information about the action such as a unique identifier, text label,
     icon and callback function. Containers are responsible for determining 
     how contributed actions are to be rendered.</t>


     <section title="The &lt;action&gt; Element">
     
       <t>The &lt;action&gt; element, as illustrated in the previous 
       examples, is used within the value of &lt;Param name="action-contributions"&gt;
       elements to declaratively define the actions provided by an application. The
       "action-contributions" parameter value can have any number of 
       &lt;action&gt; elements, each of which MUST specify a unique "id" 
       attribute. Each actions ID MUST be unique within the scope of the 
       container -- that is, if multiple application's are rendered by
       the container, all of the actions contributed by each of the applications 
       MUST specify different IDs.</t>
       
       <t>There is no XML namespace defined for the &lt;action&gt; element.</t>
     
       <figure><artwork>
  BaseAction = {
    attribute id { text },
    attribute label { text },
    attribute tooltip { text }?,
    attribute icon { IRI }?,
    attribute iconSize { text }?,
    attribute iconOffset { text }?,
    attribute view { text }?,
    attribute viewTarget { "TAB" | "DIALOG" | "MODALDIALOG" | "FLOAT" | "SIDEBAR" }?,
    attribute url { IRI }?,
    undefinedAttribute*
  }
       
  PathAction = element action {
    BaseAction,
    attribute path { text }
  }
  
  TypeAction = element action {
    BaseAction,
    attribute type { text }
  }
  
  action = PathAction | TypeAction
       </artwork></figure>
       
       <t>The &lt;action&gt; element MUST contain the "id" and "label" 
       attributes and either the "path" or "type" attributes. The "label"
       specifies the plain-text label that a container SHOULD display 
       when rendering the action. The "path" attribute specifies a 
       location with the container's user interface where the action 
       is to be rendered. Possible values for the "path" attribute 
       are discussed below. The "type" attribute specifies the OpenSocial
       data type for which an action is to be associated. The value
       MUST be a valid OpenSocial Data Type as specified by 
       <xref target="core-api"/>.</t>
       
       <t>The following additional attributes MAY be specified:
         <list style="hanging">
           <t hangText="tooltip">Additional text that provides additional
           information about the action. Such text is typically displayed
           when the user hovers their mouse cursor over the action item.</t>
           <t hangText="icon">An IRI to an image resource that the container
           can display when rendering the action item. For instance, when
           rendering the action as a menu item, the contain can display the 
           icon next to the label. If a relative path is provided, it MUST
           be resolved relative to the URL of the specification document.</t>
           <t hangText="iconSize">TODO: Need more info</t>
           <t hangText="iconOffset">TODO: Need more info</t>
           <t hangText="view">The name of the application view the container 
           SHOULD render when the action is invoked.</t>
           <t hangText="viewTarget">Specifies where the specified view is 
           to be rendered. Different container implementations MAY support
           the ability for individual application views to be displayed outside 
           the main area allocated to the application by the container. Examples 
           include rendering within a modal dialog box, or within a 
           "sidebar" area provided by the container. Acceptable values for
           the viewTarget attribute are "TAB", "DIALOG", "MODALDIALOG",
           "FLOAT" and "SIDEBAR". If not specified, the view will be rendered
           within the area already allocated to the application.</t>
           <t hangText="url">An IRI to use in place of a callback function.
           When used, the container will display the content of the URL 
           when the action is selected rather than invoking a JavaScript
           callback to handle the action.</t>
         </list>
       </t>
     
     </section>
     
     <section title="Action Contribution Paths" anchor="gadgets.actions.paths">
     
       <t>When an application contributes actions to the container's user interface,
       the intended location where the action is to be rendered is specified
       using a "path". The collection of available paths for which actions
       can be contributed is specific to each individual container implementation. 
       Some containers might not support user interface action contributions 
       at all.</t>
       
       <t>The following common paths MAY be supported by a container:
         <list style="hanging">
           <t hangText="&quot;container/navigationLinks&quot;">
             Identifies the area provided by the container for
             "top-level navigation". These are typically links
             or menu items that provide users with an overall 
             ability to navigate through the various available
             services provided by an application.
           </t>
           <t hangText="&quot;container/menus&gt;">
             Identifies the area provided by the container for
             menu options. These are typically hierarchically 
             nested actions that provide access to a variety 
             of options and tools currently available to the user.
           </t>
           <t hangText="&quot;container/toolbars&quot;">
             Identifies the area provided by the container for
             toolbars. These are typically shortcuts to commonly
             used options or tools currently available to the user.
           </t>
           <t hangText="&quot;gadget/menu&quot;">
             Identifies an "options" menu that a container might 
             provide for a application instance. Typically, such menus
             provide options and tools associated with a specific
             application instance.
           </t>
         </list>
       </t>
       
       <t>Contribution paths are hierarchical and container specific. For 
       instance, if a container supports a top level menu system such 
       as those typically found in many traditional desktop applications,
       an application might use path="container/menu/File" to add items to the 
       containers "File" menu. The depth of the path hierarchy is entirely
       determined by the container. Each segment of the path is separated
       by the forward slash (/) character.</t>
     
     </section>

     <section title="JavaScript API">
     
       <t>Gadget developers who contribute actions to the container use the 
       <spanx style="verb">gadgets.actions</spanx> JavaScript API to work
       with contributed actions.</t>
       
       <t>The API is used, for instance, to register callback functions to 
       handle actions, register or modify actions programmatically, or 
       work with contributions provided by other specification documents.</t>
       
       <section title="The Action Object" anchor="gadgets.actions.actionobjects">
       
         <t>The <spanx style="verb">Action</spanx> object is a JavaScript 
         representation of a contribution action. The properties available
         on the object correlate to each of the attributes on the &lt;action&gt;
         element. An additional "callback" property is provided that specifies
         the callback function the container will invoke when the action is
         selected.</t>
         
         <texttable align="left">
           <ttcol>Attribute</ttcol>
           <ttcol>Description</ttcol>
           <c>id</c>
           <c>Unique identifier</c>

           <c>label</c>
           <c>Text string to display for this action</c>

           <c>path</c>
           <c>The container-defined location for this action, as described in <eref target="#gadgets.actions.paths">Action Paths</eref>.  Example: path=container/menus/Edit</c>

           <c>dataType</c>
           <c>The Open Social Data type with which to associate this action. Example: opensocial.Person</c>

           <c>tooltip</c>
           <c>Tooltip to display on hovering over an icon</c>

           <c>icon</c>
           <c>Path to image icon.</c>

           <c>iconSize</c>
           <c>TODO: need more info</c>

           <c>iconOffset</c>
           <c>TODO: need more info</c>

           <c>view</c>
           <c>The view ID the application should navigate to when the action is invoked.</c>

           <c>viewTarget</c>
           <c>The target area to render the view.</c>

           <c>url</c>
           <c>Simple actions that are just links can specify a url instead of a callback function.</c>

         </texttable>
         
         <t>As is the case with the &lt;action&gt; element, the "id" and "label"
         properties are both required and values for either the "path" or "type" 
         MUST be provided. All other properties are optional.</t>
         
       </section>
       
       <section title="gadgets.actions.addAction" anchor="gadgets.actions.addAction">
       
         <t>Programmatically registers an action with the container.</t>
         
         <figure><artwork>
  &lt;static&gt; gadgets.actions.addAction(action)
         </artwork></figure>
         
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>action</c>
             <c><xref target="gadgets.actions.actionobjects">Action Object</xref></c>
             <c>The action to be added to the container</c>
           </texttable>
         </t>
         
         <figure><preamble>For example:</preamble><artwork type="code">
  var mycallback = function(){
    ...
  };
  
  var myaction = {
    id: "com.acme.mycallaction",
    tooltip: "My Action Tooltip",
    label: "Call Person",
    icon: "images/myicon.png",
    callback: mycallback,
    dataType: "opensocial.Person"  
  }

  gadgets.actions.addAction(myaction);
         </artwork></figure>
       </section>
       
       <section title="gadgets.actions.updateAction" anchor="gadgets.actions.updateAction">
       
         <t>Modifies the specified action contributed to the container.
         TODO: Question: any action or just actions provided by this one application?</t>
       
         <figure><artwork>
  &lt;static&gt; gadgets.actions.updateAction(action)
         </artwork></figure>

         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>action</c>
             <c><xref target="gadgets.actions.actionobjects">Action Object</xref></c>
             <c>A partial representation of the action to be updated within the container</c>
           </texttable>
         </t>

         <t>The Action object passed in to the <spanx style="verb">gadgets.actions.updateAction</spanx>
         method can be a partial representation of the action that contains 
         the "id" of the action being modified and only the properties that 
         need to be updated.</t>
         
         <figure><preamble>For instance, to specify the callback function 
         for an action contributed using the &lt;action&gt; element, a developer
         would invoke <spanx style="verb">gadgets.actions.updateAction</spanx>
         with an object that specifies only the "id" and "callback" properties:</preamble>
         <artwork>
  var mycallback = function(){
    ...
  };
  
  var myaction = {
    id: "com.acme.mycallaction",
    callback: mycallback
  }
  
  gadgets.actions.updateAction(myaction);
         </artwork></figure>
       </section> 
       
       <section title="gadgets.actions.removeAction" anchor="gadgets.actions.removeAction">
       
         <t>Removes the specified action from the container.
         TODO: I assume a application can only remove it's own actions
         </t>
         
         <figure><artwork>
  &lt;static&gt; gadgets.actions.removeAction
         </artwork></figure>
       
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>id</c>
             <c>String</c>
             <c>The ID of the action to be removed.</c>
           </texttable>
         </t>
         
         <figure><preable>For example,</preable><artwork>
  gadgets.actions.removeAction("com.acme.mycallaction");     
         </artwork></figure>
       </section>
       
       <section title="gadgets.actions.getActionsByPath" anchor="gadgets.actions.getActionsByPath">
       
         <t>Retrieves the collection of actions registered at the specified 
         path and passes the result to the provided callback function as 
         a JavaScript Array. TODO: is this all actions for the container, 
         or just this application?? TODO: is this hierarchical</t>
         
         <figure><artwork>
  &lt;static&gt; gadgets.actions.getActionsByPath(path, callback)
         </artwork></figure>
       
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>path</c>
             <c>String</c>
             <c>The String representation of the path to the actions</c>
             <c>callback</c>
             <c>Function</c>
             <c>A callback function to handle the returned actions array</c>
           </texttable>
         </t>
         
         <figure><preamble>For example,</preamble><artwork>
  function listActions(actions) { ... }
  
  gadgets.actions.getActionsByPath("container/navigationLinks", callback);
         </artwork></figure>
         
       </section>
       
       <section title="gadgets.actions.getActionsByDataType" anchor="gadgets.actions.getActionsByDataType">
       
         <t>Retrieves the collection of actions registered for the specified
         data type and passes the result to the provided callback function
         a JavaScript Array. TODO: is this all actions for the container or
         just this application??</t>
       
         <figure><artwork>
  &lt;static&gt; gadgets.actions.getActionsByDataType(dataType, callback)
         </artwork></figure>
         
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>dataType</c>
             <c>String</c>
             <c>The String representation of the associated data type</c>
             <c>callback</c>
             <c>Function</c>
             <c>A callback function to handle the returned actions array</c>
           </texttable>
         </t>
         
         <figure><preamble>For example,</preamble><artwork>
  function listActions(actions) { ... }
  
  gadgets.actions.getActionsByType("opensocial.Person", callback);
         </artwork></figure>
       </section>
       
       <section title="gadgets.actions.runAction" anchor="gadgets.actions.runAction">
       
         <t>Invokes the specified actions callback function; or, if the 
         "url" property is specified in place of a callback, causes the 
         container to navigate to the specified IRI. Gadget's can use
         this method to programmatically invoke an action.</t>
         
         <figure><artwork>
  &lt;static&gt; gadgets.actions.runAction (id, opt_selection)
         </artwork></figure>

         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>id</c>
             <c>String</c>
             <c>The ID of the action to execute.</c>
             <c>opt_selection</c>
             <c><xref target="gadgets.selection">Selection Object</xref></c>
             <c>An optional object that identifies the currently selected object as
             defined by <xref target="gadgets.selection"/>.</c>
           </texttable>
         </t>
         
         <figure><preamble>For example,</preamble><artwork>
  gadgets.actions.runAction("com.acme.mycallaction");
         </artwork></figure>
       </section>
       
       <section title="gadgets.actions.registerShowActionsListener" anchor="gadgets.actions.registerShowActionsListener">
       
         <t>Registers a callback function that the container will call whenever 
         new actions are added to the container. An application can use this listener
         to provide a rendering of any action contributed to the container
         by any other application.</t>
         
         <figure><artwork>
  &lt;static&gt; gadgets.actions.registerShowActionsListener (listener)
         </artwork></figure>
       
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>listener</c>
             <c>Function</c>
             <c>The application's function to render actions in its UI. The 
             function will be invoked with one parameter which is an array 
             of action objects to render.</c>
           </texttable>           
         </t>

         <figure><preamble>For Example:</preamble><artwork type="code">
  var listener = function(actionObjs){
       // draw the UI, toolbars menus, etc
       // to do the invocation of the action, call the following API:
       // gadgets.actions.runAction(actionObjs[0].id);  
  }
  gadgets.actions.registerShowActionsListener(listener);
         </artwork></figure>
       </section>
       
      <section title="gadgets.actions.registerHideActionsListener" anchor="gadgets.actions.registerHideActionsListener">
      
        <t>Registers a callback function that the container will call whenever
        the an application that contributes actions is removed from the container.</t>
        
         <figure><artwork>
  &lt;static&gt; gadgets.actions.registerHideActionsListener (listener)
         </artwork></figure>
       
         <t>Input Parameters:
           <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>listener</c>
             <c>Function</c>
             <c>The application's function to render actions in its UI. The 
             function will be invoked with one parameter which is an array 
             of action objects to hide.</c>
           </texttable>           
         </t>
        
         <figure><preamble>For Example:</preamble><artwork type="code">
  var listener = function(actionObjs){
       // remove the UI elements associated with the listed actions
  }
  gadgets.actions.registerHideActionsListener(listener);
         </artwork></figure>      
      </section>
     </section>
   </section> 
   <!--  END CONTRIBUTED ACTIONS FEATURE  --> 
    
    <section title="The Content Rewriting Feature">
    
      <t>The Content Rewriting Feature defines a set of content 
      modification operations that a container can perform when 
      processing HTML and Proxied Content and defines rules that
      allow developers to control which content the rewriter can
      operate on.</t>
    
      <t>The Content Rewriting Feature is specified within the &lt;ModulePrefs&gt;
      with the feature name "content-rewrite" using either the &lt;Optional&gt;
      or &lt;Require&gt; element. Multiple &lt;Param&gt; elements are used to 
      specify specific configuration options for the feature. 
      Containers MAY support the Content Rewriting Feature.</t>
      
      <figure>
        <preamble>For example:</preamble>
        <artwork xml:space="preserve">
  &lt;Optional feature="content-rewrite"&gt;
      &lt;Param name="expires"&gt;86400&lt;/Param&gt;
      &lt;Param name="include-url"&gt;&lt;/Param&gt;
      &lt;Param name="exclude-url"&gt;excluded&lt;/Param&gt;
      &lt;Param name="exclude-url"&gt;moreexcluded&lt;/Param&gt;
      &lt;Param name="minify-css"&gt;true&lt;/Param&gt;
      &lt;Param name="minify-js"&gt;true&lt;/Param&gt;
      &lt;Param name="minify-html"&gt;true&lt;/Param&gt;
  &lt;/Optional&gt;
  </artwork>
       </figure>
       
       <t>The parameters supported by the "content-rewrite" feature are:
       
       <list type="hanging">
        <t hangText="expires">The duration in seconds to force as minimum HTTP 
        cache time for content fetched through the proxy via a rewritten URL. 
        The default is 86400 seconds.</t>
        <t hangText="include-url">Any URL which contains this parameters value as a
        case-insensitive substring is considered rewriteable. The literal string
        "*" is a special case and implies all URLs. If not specified an entry
        with the value "*" is assumed. This parameter MAY appear multiple times
        within the &lt;Optional&gt; or &lt;Require&lt; tags.</t>
        <t hangText="exclude-url">Any URL which contains this parameters value as a
        case-insensitive substring is excluded from rewriting. The literal string
        "*" implies all URLs and effectively disables all rewriting. This parameter 
        MAY appear multiple times within the &lt;Optional&gt; or &lt;Require&lt; tags.</t>
        <t hangText="minify-css">Controls whether the container can attempt to 
        minify css in style tags and referenced css files. Valid values are 
        "true"|"false". Default is "true".</t>
        <t hangText="minify-js">Controls whether the container can attempt to 
        minify JS in script tags and referenced JS files. Valid values are "true"
        and "false". Default is "true".</t>
        <t hangText="minify-html">Controls whether the container can attempt to minify
        HTML content. Valid values are "true" and "false". Default is "true".</t>
       </list></t>
       
       <t>When values for both the "exclude-url" and "include-url" are specified,
       Matches for "exclude-url" take precedence over matches for "include-url".</t>
        
       <t>Note that the special use of "*" to denote all URLs should not be
       interpreted as support for GLOB or RegEx matching on strings.</t>
       
       <t>Containers are free to perform additional optimizations when rewriting
       links including but not limited to:
       <list type="symbols">
        <t>Extracting @import directives from style tags and converting them into 
        link tags in the head tag of the containing HTML content.</t>
        <t>Merging multiple CSS fetches from successive link tags into one link tag
        that causes the proxy to concatenate the content fetched from the
        individual URLs.</t>
        <t>Merging contiguous &lt;script src=xxx&gt; tags into one concatenating
        proxy fetch.</t>
       </list></t>
  
       <t>TODO: Need useful examples.. the ones currently in the spec aren't helpful.</t>
  
     </section>
     <!-- END CONTENT REWRITING -->

  <section title="The DataContext Feature" anchor="opensocial.data">
   
    <t>The Data Context Feature allows an application utilizing the 
    <xref target="DataPipeline">Data Pipeline</xref> capability 
    provided by the container to access the <spanx style="verb">DataContext</spanx> 
    associated with the application instance.</t>
    
    <t>The DataContext feature is enabled for a application by specifying 
    feature="opensocial.data" using either a &lt;Requires&gt; or &lt;Optional&gt;
    element within the &lt;ModulePrefs&gt;.</t>
    
    <t>If the container supports the Data Pipeline capability, the DataContext
    Feature MUST be supported by the container.</t>
    
    <figure><preamble>For example:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs>
      ...
      <Require feature="opensocial.data" />
      ...
    </ModulePrefs>
    ...
  </Module>
    ]]></artwork></figure>
   
    <t>The <spanx style="verb">DataContext</spanx> object is only available to JavaScript
    code running within either HTML or Proxy-type &lt;Content&gt; elements.</t>
    
    <t>The <spanx style="verb">DataContext</spanx> object will not contain any 
    of the pipelined data POSTed to a remote endpoint when using Proxy-type
    Content as described in <xref target="data-pipeline-proxy" />.</t>
    
    <section title="JavaScript API">
    
      <t>When enabled for an application instance, the DataContext Feature makes
      the following methods and objects available for use.</t>
    
      <section title="opensocial.data.getContext" anchor="opensocial.data.getContext">  
        <t>The <spanx style="verb">opensocial.data.getContext</spanx> method
        returns the <spanx style="verb">DataContext</spanx> object associated 
        with the application instance.</t>
        
        <figure><artwork>
  &lt;static&gt; &lt;DataContext&gt; opensocial.data.getContext()
        </artwork></figure>      
      </section>

      <section title="The DataContext Object" anchor="DataContext_Client">
      
        <t>The DataContect object maintains all the data associated with the 
        current application's data pipelining requests. Instances of the object 
        are acquired by calling the <spanx style="verb">opensocial.data.getContext</spanx>
        method.</t>
        
        <t>Instances of the DataContext object expose the following method:</t>
        
        <section title="opensocial.data.DataContext.getDataSet" anchor="opensocial.data.DataContext.getDataSet">
          <t>The <spanx style="verb">opensocial.data.DataContext.getDataSet</spanx>
          method returns the object data currently mapped to the specified key or
          null if a value for the specified key does not exist.</t>
          
          <figure><artwork>
  &lt;Object&gt; &lt;instance&gt;.getDataSet(key)
          </artwork></figure>
        </section>
        
        <section title="opensocial.data.DataContext.putDataSet" anchor="opensocial.data.DataContext.putDataSet">
        
          <t>The <spanx style="verb">opensocial.data.DataContext.putDataSet</spanx>
          method allows data to be stored into the DataContext programmatically
          as an alternative to using the Data Pipeline elements.</t>
          
          <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.putDataSet(key, value)
          </artwork></figure>
  
          <t>The method takes as input a key and value pair to store within the 
          DataContext. The value can be any JavaScript object or primitive. 
          No return value is specified.</t>
        
        </section>
        
        <section title="opensocial.data.DataContext.putDataSets" anchor="opensocial.data.DataContext.putDataSets">
        
          <t>The <spanx style="verb">opensocial.data.DataContext.putDataSet</spanx>
          method allows multiple key and value pairs to be stored within the 
          DataContext at once.</t>
          
          <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.putDataSets(dataSets)
          </artwork></figure>
          
          <t>The key and value pairs are specified as properties on a 
          JavaScript object.</t>
          
          <figure><preamble>For instance, to store the two keys "foo" and 
          "bar" with respective values of "123" and "abc", the putDataSets
          method would be called as:</preamble><artwork>
  var dataContext = opensocial.data.getContext();
  dataContext.putDataSets(
    {
      "foo":"123",
      "bar":"abc"
    });
          </artwork></figure>
          
          <t>No return value is specified for the method.</t>
        </section>

        <section title="opensocial.data.DataContext.registerListener" anchor="opensocial.data.DataContext.registerListener">
        
          <t>The <spanx style="verb">opensocial.data.DataContext.registerListener</spanx>
          method registers a callback Function that is invoked whenever the value
          associated with one or more specified keys is modified in the DataContext,
          either through processing of the Data Pipeline elements or calls to 
          either of the <spanx style="verb">opensocial.data.DataContext.putDataSet</spanx>
          and <spanx style="verb">opensocial.data.DataContext.putDataSets</spanx>
          methods.</t>
          
          <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.registerListener(key, callback)
          </artwork></figure>
          
          <t>The method takes as input either a single key or Array of keys 
          for which the callback Function is to be registered and a single 
          callback Function.</t>
          
          <t>When the value of any of the specified keys changes, the 
          DataContext will invoke all registered callback functions
          registered for the modified keys and pass in a single listing
          of the key names whose values have been modified.</t>
          
          <figure><preamble>For example:</preamble><artwork>
  var dataContext = opensocial.data.getContext();
  dataContext.registerListener(
    ["foo","bar"],
    function(keys) {
      for (var n = 0; n &lt; keys.length; n++) {
        var new_value = dataContext.getDataSet(keys[n]);
        // ...
      }
    }
  );
          </artwork></figure>
        </section>
      </section>
    </section>
  </section>
  <!--  END DATACONTEXT FEATURE -->
  
     <section title="The Embedded Experiences Feature" anchor="Embedded-Experiences">

      <t>Embedded experiences provide a mechanism for embedding OpenSocial
      Applications and other web-accessible content sources directly into a 
      variety of contexts such as Activity Streams, email messages and Atom feeds.
      The mechanism works by inserting a small structure of data that includes
      a reference to the embedded content along with contextual data an OpenSocial
      container would need to render the content appropriately.</t>
      
      <t>This data structure can be serialized as either a JSON object or XML and
      includes the following properties:</t>
    
      <texttable>
        <ttcol align="left" width="15%">Property</ttcol>
        <ttcol align="left">Description</ttcol>
        
        <c><spanx style="verb">context</spanx></c>
        <c>If the Embedded Experience is used to embed an OpenSocial Application,
        the "context" field is used to pass data to the application so that it 
        knows exactly which content to render. For instance, an application that 
        displays a person's profile information will need to know which 
        profile to display; an application that displays an album of recent photos
        will need to know the identity of the album to display. The content
        of the "context" field is undefined and specific to each individual 
        application definition with one exception: the special property name 
        "opensocial" is reserved for use by the container implementation.
        The "context" properties JSON object value or XML element structure 
        MUST NOT contain a property named "opensocial".</c>
  
        <c><spanx style="verb">gadget</spanx></c>
        <c>An absolutely IRI to an OpenSocial Application specification 
        document that defines the application to be embedded.</c>
        
        <c><spanx style="verb">imageData</spanx></c>
        <c>An optional string value that containing Base64-encoded binary data for an
        image resource that represents the embedded content. This can be 
        the same image resource linked to by the previewImage property or 
        a separate image. An embedded experience SHOULD NOT contain both 
        the imageData and previewImage properties.</c>
        
        <c><spanx style="verb">preferredExperience</spanx></c>
        <c>An optional collection of properties that describe the preferred 
        way the creator of the embedded experience would like containers to
        render the content.</c>
        
        <c><spanx style="verb">previewImage</spanx></c>
        <c>An optional absolute IRI of an image that can be used as a preview for the 
        embedded content.</c>
        
        <c><spanx style="verb">url</spanx></c>
        <c>An absolutely IRI of a web page to be used as an 
        Embedded Experience.</c>
              
      </texttable>
      
      <t>The "url" and "gadget" properties each reference content that is to 
      be embedded. At least one of these properties MUST be specified.
      When both properties are used within the Embedded Experience, the decision about which 
      to render is left to the container.</t>
      
      <t>When serialized as JSON, the embedded experience take the form of a 
      single JSON Object with four distinct properties: "context", "gadget", 
      "previewImage" and "url". Additional extension properties MAY be included
      in the JSON object.</t>
      
      <figure><preamble>For instance, a simple JSON Embedded Experience
      that references an OpenSocial Application:</preamble>
      <artwork>
    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png"
    }
      </artwork></figure>
    
      <t>When serialized as XML, it is expressed in the form of a root element 
      &lt;embed&gt; containing four child elements, the order of which is 
      considered insignificant: &lt;context&gt;, 
      &lt;gadget&gt;, &lt;previewImage&gt;, and &lt;url&gt;. Additional extension
      elements and attributes MAY be included in the JSON object.</t>
      
      <figure><preamble>For example,</preamble>
      <artwork><![CDATA[
    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
    </embed>
      ]]></artwork></figure>
      
      <t>Note that no XML namespace is currently declared for the XML
      serialization. This means that special care must be taken when 
      including an XML embedded experience into another type of XML 
      document. For example, the following shows an XML embedded experience
      within a partial Atom Entry Document. Note the addition of
      <spanx style="verb">xmlns=""</spanx> on the embed element in order
      to "undeclare" the in-scope default XML namespace.</t>
      
      <figure><artwork><![CDATA[
    <entry xmlns="http://www.w3.org/2005/Atom">
      <id>http://example.org/entries/1</id>
      ...
      <embed xmlns="">
        <gadget>http://www.example.com/embedded/gadget.xml</gadget>
        <context>
          <title>Hello World</title>
          <id>123</id>
        </context>
        <previewImage>http://www.example.com/embedded/123.png</previewImage>
      </embed>
    </entry>
      ]]></artwork></figure>
    
      <section title="Additional Examples">
      
        <figure><preamble>A simple URL embedded experience using the JSON 
        serialization:</preamble><artwork>
    {
      "url" : "http://www.example.org/embed/123.html"
    }
        </artwork></figure>
        
        <figure><preamble>The same URL embedded experience using the XML
        serialization:</preamble><artwork><![CDATA[
    <embed>
      <url>http://www.example.org/embed/123.html</url>
    </embed>
        ]]></artwork></figure>
      
        <figure><preamble>An embedded experience that specifies both a gadget 
        and URL serialized as JSON:</preamble><artwork>
    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "url" : "http://www.example.org/embed/123.html",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png"
    }
        </artwork></figure>
        
      <figure><preamble>The same embedded experience serialized as XML:</preamble>
      <artwork><![CDATA[
    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <url>http://www.example.org/embed/123.html</url>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
    </embed>
      ]]></artwork></figure>
      
      </section>    
  
      <section title="Considerations for Embedded Gadgets">
  
        <section title="The &quot;embedded&quot; View">
          <t>When rendering an application as an embedded experience, the container
          will look within the specification document for a view named "embedded". 
          Gadget developers can use this view to specify a customized
          view of the application that is specific to the embedded experience. If 
          an "embedded" view is not found within the specification document, the 
          contain SHOULD render the application's default unnamed view.</t>
        </section>
  
        <section title="Accessing The Context">
          <t>An embedded experience application has the option of requiring some
          contextual information in order to render itself.  By abstracting the
          data from the application itself, developers can develop
          generalized applications that can be used for all embedded experiences of a
          specific type.  For example, an application developed to display videos can 
          be built so that the id of the video is contained and extracted from
          the embedded experience's "context" property.</t>
          
          <figure><artwork>
    {
      "gadget" : "http://example.org/embedded/video.xml",
      "context" : {
        "video-id" : "abc123"
      }
    }
          </artwork></figure>
  
          <t>Gadgets that are written to support embedded experiences MUST require 
          the "embedded-experiences" feature within their specification document in 
          order to access the context.  The contextual data is stored within the 
          <xref target="DataContext">data context</xref> object for the application.  
          The key, "org.opensocial.ee.context", is used to access the context.
          Gadgets can add a listener on the data context object for this key, or
          it may retreive the key's value by using the data context APIs.</t>
          
          <figure><preamble>For instance, the Gadget below registers a listener
          with the data context to retrieve any context data included with the 
          embedded experience:</preamble>
            <artwork xml:space="preserve">
    &lt;Module&gt;
      &lt;ModulePrefs title="Embedded Experiences Test" description="Tests the embedded experiences APIs."&gt;
        &lt;Require feature="embedded-experiences"&gt;&lt;/Require&gt;
      &lt;/ModulePrefs&gt;
      &lt;Content type="html" view="embedded"&gt;
          &lt;![CDATA[
            &lt;script type="text/javascript"&gt;
              function myCallback(key) {
                var context = opensocial.data.getDataContext().getDataSet(key);
                var video_id = context["video-id"];
              }
              function initData() {
                opensocial.data.getDataContext().registerListener(
                  "org.opensocial.ee.context", myCallback);
              }
              gadgets.util.registerOnLoadHandler(initData);
          &lt;/script&gt;
           &lt;div id="contextData"&gt;&lt;/div&gt;
      ]]&gt;
      &lt;/Content&gt;
    &lt;/Module&gt;</artwork>
          </figure>
  
          <section title="Additional Container Specific Context" anchor="rootContext">
    
            <t>While the contextual data associated with the 
            "org.opensocial.ee.context" key will generally originate 
            from the information provided by the "context" property
            within the Embedded Experience document, containers are 
            free to insert additional, container specific contexual 
            data into the object. For example, a container might wish to 
            communicate information about the type of parent object 
            within which the Embedded Experience information was 
            received.</t>
            
            <t>If such additional information is provided, the object 
            associated with the "org.opensocial.ee.context" key will have an
            additional "opensocial" property, whose value is itself a
            object with at least one property named "associatedContext" whose 
            value is an object whose properties are entirely defined by the 
            specific container implementation.</t>
            
            <figure><preamble>The following example illustrates how this 
            additional context information is accessed:</preamble><artwork>
    function myCallback(key) {
      var context = opensocial.data.getDataContext().getDataSet(key);
      var video_id = context["video-id"];
      
      var associatedContext = context.opensocial.associatedContext;
      // the properties are container specific
      var ac_id = associatedContext.id;
      var ac_type = associatedContext.type;
      // ...
    }
    function initData() {
      opensocial.data.getDataContext().registerListener(
        "org.opensocial.ee.context", myCallback);
    }
    gadgets.util.registerOnLoadHandler(initData);
            </artwork></figure>
            
            <t>Specific container implementations are free to insert any additional
            information they wish into both the "associatedContext" and "opensocial"
            object values. The interpretation and use of any such information is
            considered out of the scope of this specification.</t>
          </section>
        </section>  
    </section>
    
    <section title="Preferred Experiences" anchor="preferredExperience">
  
      <t>While the container retains control over deciding exactly how an
      embedded experience is processed and rendered, there are situations 
      where the creator of the embedded experience might wish to provide 
      clues to the container as to how it would prefer the content to be
      displayed. These clues are included within the Embedded Experience
      using the "preferredExperience" property.</t>
      
      <figure><preamble>The following illustrates a basic example 
      serialized as JSON:</preamble>
      <artwork>
    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "url" : "http://www.example.com/foo/bar.html",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png",
      "preferredExperience" : {
        "target" : {
          "type" : "gadget",
          "view" : "my-ee-view"
        },
        "display" : {
          "type" : "link"
        }
    }
      </artwork></figure>
      
      <figure><preamble>And the same example using the alternative 
      XML serialization:</preamble>
      <artwork><![CDATA[
    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <url>http://www.example.com/foo/bar.html</url>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
      <preferredExperience>
        <target>
          <type>gadget</type>
          <view>my-ee-view</view>
        </target>
        <display>
          <type>link</type>
        </display>
      </preferredExperience>
    </embed>
      ]]></artwork></figure>
  
      <t>In this example, we have an embedded experience serialized as JSON.
      The structure defines both a "url" and a "gadget" property, both of w
      which can be used by the container to display embedded content. Typically,
      the decision of which to display when the embedded experience is rendered
      is up to the container. The "preferredExperience.target" property allows the 
      creator of the embedded experience to indicate that it would prefer the
      container to use the "gadget" property for rendering, and specifically that
      the "my-ee-view" view within that application be used. The "preferredExperience.display"
      property indicates that rather than simply displaying the application automatically,
      the embedded experience's creator would rather the container initially display a 
      hyperlink that, when clicked, causes the application to be displayed.</t>
      
      <texttable>
        <ttcol align="left" width="15%">Property</ttcol>
        <ttcol align="left">Description</ttcol>
        <c><spanx style="verb">display</spanx></c>
        <c>Describes preferences for how the embedded experience should 
        initially be displayed by the container. The value of the 
        "display" property is an object that contains a 
        required "type" property, the value of which determines 
        what other properties might appear within the object.</c>
        <c><spanx style="verb">target</spanx></c>
        <c>Describes preferences for which type of embedded experience 
        the container should render. For instance, if the embed includes
        both a "url" and "gadget" property, the "target" is used to specify
        which is preferred. The value of the "target" property is an 
        object that contains a required "type" property, the value of which
        determines what other properties might appear within the object.</c>
      </texttable>
  
      <section title="Display Types">
  
        <t>This specification currently defines two possible values for the 
        required "type" property on the display object: "link", "image".
        Each of which are illustrated below.</t>
        
        <figure><preamble>Display using a hyperlink:</preamble><artwork>
    {
      "gadget" : "...",
      ...,
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "link",
          "text" : "Click on me!",
          "title" : "Click on this link!"
        }
      }
    }
        </artwork></figure>
        
        <t>When "type" equals "link", the additional properties on the 
        display object are:</t>
        
        <texttable>
          <ttcol align="left" width="15%">Property</ttcol>
          <ttcol align="left">Description</ttcol>
          <c><spanx style="verb">text</spanx></c>
          <c>A required String that provides the text to display with the hyperlink.</c>
          <c><spanx style="verb">title</spanx></c>
          <c>Optional text to display as the "popup help" or "tooltip" of 
          the hyperlink.</c>
        </texttable>
        
        <figure><preamble>Display using the previewImage:</preamble><artwork>
    {
      "gadget" : "...",
      ...,
      "previewImage" : "http://example.org/preview.png",
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "image",
          "altText" : "The alt text",
          "width" : 100,
          "height" : 100
        }
      }
    } 
        </artwork></figure>
        
        <figure><preamble>Display using contained Base64-encoded binary data:</preamble><artwork>
    {
      "gadget" : "...",
      ...,
      "imageData" : "{Base64-encoded Image}",
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "image",
          "altText" : "The alt text",
          "width" : 100,
          "height" : 100
        }
      }
    } 
        </artwork></figure>
        
        <t>When "type" equals "image", the additional properties on the 
        display object are:</t>
        
        <texttable>
          <ttcol align="left" width="15%">Property</ttcol>
          <ttcol align="left">Description</ttcol>
          <c><spanx style="verb">altText</spanx></c>
          <c>Specifies optional, alternative text to display if the image cannot 
          be displayed. Equivalent to the HTML image tags alt attribute.</c>
          <c><spanx style="verb">height</spanx></c>
          <c>Specifies the preferred display height of the image in pixels.</c>
          <c><spanx style="verb">width</spanx></c>
          <c>Specifies the preferred display width of the image in pixels.</c>
        </texttable>
       
        <t>Implementations are free to define additional display types, 
        each with their own properties. If a container encounters an 
        embedded experience that uses an unknown or unsupported display 
        type, the container MUST ignore the display preferences.</t>
  
      </section>    
      
      <section title="Target Types">
      
        <t>This specification currently defines two possible values for the 
        type property on the target object: "gadget" and "url". Each of which 
        are illustrated below.</t>
      
        <figure><preamble>Preferring the gadget target:</preamble><artwork>
    {
      "gadget" : "...",
      "url" : "...",
      ...,
      "preferredExperience" : {
        "target": {
          "type" : "gadget",
          "view" : "my-ee-view"
        },
        "display": {
          ...
        }
      }
    }
        </artwork></figure>
        
        <t>Note that the preferred experience target's "type" property is only 
        required if the preferred target is not obvious within the embedded 
        experience. For instance, if the embedded experience only defines an 
        IRI value for the "gadget" property, then the preferred target type
        is "gadget". However, if both the "url" and "gadget" properties are
        specified, as in the example above, the target type in the preferred
        experience MUST be specified. Containers MUST ignore the preferred 
        experience if the target type value does not match the options specified
        within the Embedded Experience (e.g. target type specifies "url" but 
        only a "gadget" IRI is provided, etc).</t>
        
        <t>When "type" equals "gadget", the additional properties on the 
        target object are:</t>
        
        <texttable>
          <ttcol align="left" width="15%">Property</ttcol>
          <ttcol align="left">Description</ttcol>
          <c><spanx style="verb">view</spanx></c>
          <c>The preferred application view to render. If not specified, the value "embedded" is assumed.</c>
          <c><spanx style="verb">viewTarget</spanx></c>
          <c>Specifies where the container SHOULD render the view. Possible 
          values are "TAB", "DIALOG", "MODALDIALOG", "FLOAT", and "SIDEBAR".</c>
        </texttable>
        
        <figure><preamble>Preferring the url target:</preamble><artwork>
    {
      "gadget" : "...",
      "url" : "...",
      ...,
      "preferredExperience" : {
        "target": {
          "type" : "url",
          "viewTarget" : "_new"
        },
        "display": {
          ...
        }
      }
    }
        </artwork></figure>
        
        <t>When "type" equals "url", the additional properties on the 
        target object are:</t>
        
        <texttable>
          <ttcol align="left" width="15%">Property</ttcol>
          <ttcol align="left">Description</ttcol>
          <c><spanx style="verb">viewTarget</spanx></c>
          <c>When specifying a URL, rather than being forced to render in an 
          embedded view, the developer may wish to indicate to the container 
          that the page be opened in a new browser window. In this case, the 
          target properties for a URL match those that are defined by the 
          HTML spec, e.g. "_blank".</c>
        </texttable>
      
        <t>Implementations are free to define additional target types, 
        each with their own properties. If a container encounters an 
        embedded experience that uses an unknown or unsupported target 
        type, the container MUST ignore the target preferences.</t>
      
      </section>
  
    </section>
  
    <section title="Security">
      <t>Embedded experiences allow content to be rendered on the page that
      user has not necessarily requested, therefore it needs to be secured.
      The container SHOULD only ever render content that the user has
      previously approved.  This specification does not dictate how
      secure rendering of embedded experiences is to be performed.</t>
    </section>
  
    <section title="Embedded Experiences within Activity Streams">
    
      <t>Embedded experiences can be used within an Activity Streams 
      document in order to provide a more interactive experience. Whereas
      the core properties of the Activity provide a textual description of
      the event, an included embedded experience can provide a direct representation
      of the object involved.</t>
    
      <figure><preamble>For instance, if a user uploads a collection of photos
      and creates a new photo album, an embedded experience can be used within 
      the activity to provide a representation of the album itself:</preamble>
            <artwork xml:space="preserve">
    {
      "postedTime": "2011-02-10T15:04:55Z",
      "actor": {
        "objectType" : "person",
        "id": "tag:example.org,2011:martin",
        "displayName": "Martin Smith"
      }
      "verb": "post",
      "object" : {
        "objectType":"collection",
        "objectTypes":["image"]
        "id": "http://example.org/albums/germany-2009",
        "url": "http://example.org/albums/germany-2009",
      },
      "openSocial" : {
        "embed" : {
          "gadget" : "http://example.org/AlbumViewer.xml",
          "context" : {
            "albumName": "Germany 2009",
            "photoUrls": [
              "http://examplephotos.com/3495/3925132517_5959dac775_t.jpg",
              "http://examplephotos.com/3629/3394799776_47676abb46_t.jpg",
              "http://examplephotos.com/4009/4413640211_715d924d9b_t.jpg",
              "http://examplephotos.com/2340/3528537244_d2fb037aba_t.jpg",
              "http://examplephotos.com/36/98407782_9c4c5866d1_t.jpg",
              "http://examplephotos.com/48/180544479_bb0d0f6559_t.jpg",
              "http://examplephotos.com/2668/3858018351_1e7b73c0b7_t.jpg"
            ]
          }
        }
      }
    }</artwork></figure>
    
      <t>As illustrated in the example, when included within an activity, 
      the embedded experience MUST appear as the value of the "embed" property 
      as a child of the "openSocial" property.</t>
    
    </section>
    
    <section title="Embedded Experiences within Email">
  
      <t>Numerous services send email notifications to your inbox in
      order to let you know something took place that you may be
      interested in.  Most of the time however these notifications do not
      provide much useful information beyond a link back to the service's 
      website.  By leveraging embedded experiences, services can send an
      embedded representation of the object the notification is about, and
      allow the user to take action on the notification directly from within 
      an embedded experiences enabled email client.</t>
  
      <t>Embedded experiences serialized as either JSON or XML can be embedded 
      Multipart MIME encoded email messages. Such email messages MUST utilize 
      the "multipart/alternative" MIME variant and MUST contain at least two
      MIME parts -- one containing regular content of the email message encoded
      as text/html content, and another containing the embedded experience content 
      using either the "application/embed+json" or "application/embed+xml" MIME media type, 
      respectively representing the JSON and XML serializations. Additional
      MIME parts MAY be included </t>
  
      <figure>
        <preamble>For instance,</preamble>
        <artwork xml:space="preserve">
    From: notifications@socialnetwork.com
    To: johndoe@example.com
    Subject: Social Network: Mary Has Commented On Your Status
    MIME-Version: 1.0
    Content-Type: multipart/alternative;
            boundary="XXXXboundary text"
  
    Mary has commented on your status.
    
    --XXXXboundary text
    Content-Type: text/plain
    
    Mary has commeneted on your status. 
    
    --XXXXboundary text
    Content-Type: text/html
  
    &lt;html&gt;
    &lt;!-- HTML representation here --&gt;
    &lt;/html&gt;
  
    --XXXXboundary text
    Content-Type: application/embed+json
    {
      "gadget" : "http://www.socialnetwork.com/embedded/commentgadget.xml",
      "context" : 123
    }</artwork>
      </figure>
      
    </section>
  
    </section> 
    <!--  END EMBEDDED EXPERIENCES -->
 
    <section title="The Flash Feature" anchor="gadgets.flash">
      
      <t>The "Flash" feature provides three JavaScript methods that
      simplify the embedding of Flash-based content in applications.
      The feature is enabled by specifying feature="flash" using 
      either the &lt;Require&gt; or &lt;Optional&gt; elements in
      the &lt;ModulePrefs&gt;. The "Flash" feature defines no 
      parameters.</t>
      
      <t>Containers SHOULD support the "Flash" feature.</t>
      
      <figure><preamble>In the partial application specification below, 
      we declare that the "flash" feature is required and render a
      remote flash resource within the default view:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      ...
      &lt;Require feature="flash" /&gt;
      ...
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;[CDATA[
      &lt;div id="container"&gt;&lt;/div&gt;
      &lt;script&gt;
        ...
        gadgets.flash.embedCachedFlash(
          "http://example.org/content/movie.swf",
          "container", 11
        );
        ...
      &lt;/script&gt;
    ]]&gt;&lt/Content&gt;
  &lt;/Module&gt;
      </artwork></figure>
      
      <section title="JavaScript API">

        <t>The following JavaScript APIs are enabled when the "Flash"
        feature is enabled for an application.</t>

        <section title="gadgets.flash.embedCachedFlash" anchor="gadgets.flash.embedCachedFlash">
        
          <t>Embeds a cached Flash document into a container DOM 
          object.</t>
          
          <figure><artwork>
  &lt;static&gt; &lt;Boolean&gt; gadgets.flash.embedCachedFlash(url, container, version, options)
          </artwork></figure>

          <t>Input Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              
              <c>url</c>
              <c>String</c>
              <c>The IRI of the Flash resource to embed.</c>
              
              <c>container</c>
              <c>String | Object</c>
              <c>Specifies either the DOM identifier or object reference for
              the existing container object (e.g. a &lt;div&gt;) within which the 
              Flash content will be embedded.</c>
              
              <c>version</c>
              <c>Number</c>
              <c>Specifies the minimum Flash Player version required to 
              support the embedded content.</c>
              
              <c>options</c>
              <c>Object</c>
              <c>An optional object that MAY contain any property that is 
              valid for the HTML &lt;embed&gt; tag. These properties will be
              passed directly through the &lt;embed&gt; tag generated by the
              API call.</c>
              
            </texttable>
          </t>
 
          <t>The method will return either <spanx style="verb">True</spanx>
          or <spanx style="verb">False</spanx> to indicate whether the 
          method completed successfully or not.</t>
        </section>
        
        <section title="gadgets.flash.embedFlash" anchor="gadgets.flash.embedFlash">
          <t>Embeds a cached Flash document into a container DOM 
          object.</t>
          
          <figure><artwork>
  &lt;static&gt; &lt;Boolean&gt; gadgets.flash.embedCachedFlash(url, container, version, options)
          </artwork></figure>

          <t>Input Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              
              <c>url</c>
              <c>String</c>
              <c>The IRI of the Flash resource to embed.</c>
              
              <c>container</c>
              <c>String | Object</c>
              <c>Specifies either the DOM identifier or object reference for
              the existing container object (e.g. a &lt;div&gt;) within which the 
              Flash content will be embedded.</c>
              
              <c>version</c>
              <c>Number</c>
              <c>Specifies the minimum Flash Player version required to 
              support the embedded content.</c>
              
              <c>options</c>
              <c>Object</c>
              <c>An optional object that MAY contain any property that is 
              valid for the HTML &lt;embed&gt; tag. These properties will be
              passed directly through the &lt;embed&gt; tag generated by the
              API call.</c>
              
            </texttable>
          </t>
 
          <t>The method will return either <spanx style="verb">True</spanx>
          or <spanx style="verb">False</spanx> to indicate whether the 
          method completed successfully or not.</t>
        </section>
        
        <section title="gadgets.flash.getMajorVersion" anchor="gadgets.flash.getMajorVersion">
        
          <t>Returns the major version of the Flash player supported by the 
          container.</t>
          
          <figure><artwork>
  &lt;static&gt; &gt;Number&gt; gadgets.flash.getMajorVersion()
          </artwork></figure>
        </section>
      </section>
    </section>
    <!-- END FLASH -->

   <section title="The JavaScript Internationalization (i18n) Feature">
   
    <t>The "JavaScript i18n" feature provides a JavaScript 
    API for localized parsing and formatting of dates, times, numbers and 
    currency according to the rules for the application's locale as set
    by the container. The feature is specified by including either an 
    "Optional" or "Required" element within the "ModulePrefs" The feature 
    identifier is "opensocial-i18n".</t>
   
    <t>Once available, developer's can use the feature via the 
    "gadgets.i18n" JavaScript class.</t>
    
    <t>The locale used by an application is established by the container when 
    the view is rendered. The i18n feature will use the country 
    and language specified in the locale to load the appropriate formatter
    and parser for any given date, time, number or currency.</t>
    
    <t>The i18n feature provides four distinct methods, defined 
    <xref target="i18n.methods">here</xref>. These are formatDateTime,
    formatNumber, parseDateTime and parseNumber. At a minimum, each 
    method takes as input a format pattern that defines the structure 
    of the data being parsed or formatted and the value to which the 
    pattern is to be applied.</t>
    
    <t>For instance, to format an integer using a localized grouping 
    separator (e.g. the number 1234567 formatted as "1,234,567" when 
    the locale is "en-US"), the following can be used:</t>
    
    <figure><artwork>
  var str = gadgets.i18n.formatNumber("#,###", 1234567);
    </artwork></figure>
    
    <t>The i18n feature includes a number of common, predefined format 
    patterns that can be used. The specific definition of these formats
    are specific to the locale established by the container. For instance,
    using the predefined "gadgets.i18n.MEDIUM_DATE_FORMAT" pattern to 
    format the date for August, 4th 2006 using the "de" (German) locale 
    using the formatDateTime method would output "04.08.2006". Using the
    same predefined pattern using the "en-US" (United States) locale, 
    however, would output "08-04-2006".</t>
    
    <figure><artwork>
  var date = new Date(2006,7,4);
  var str = gadgets.i18n.formatDateTime(gadgets.i18n.MEDIUM_DATE_FORMAT, date);
    </artwork></figure>
    
    <t>When parsing and formatting currencies using the predefined patterns, 
    there are several considerations that need to be taken into account.
    For example, when the default locale is set to "fr-FR" (France), and the
    gadgets.i18n.CURRENCY_PATTERN is used to parse a string, the parser will
    assume that the input string is formatted according to the localized rules
    for the "fr-FR" locale:</t>
    
    <figure>
      <artwork xml:space="preserve">
  var num = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 \u20AC");
      </artwork>
     </figure>
     
     <t>Here, "num" will equal 20000. </t>
     
     <t>If a foreign currency is used, U.S. Dollars for instance, the input 
     string MUST still be formatted in accordance to the rules specified for
     the established locale and an optional currency code can be specified:</t>
     
     <figure><artwork>
  var num = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 $", 0, "USD");
     </artwork></figure>
     
     <t>If, however, the input string is not formatted in accordance to the 
     localized rules for the established locale, the predefined pattern will 
     not work and a custom pattern needs to be used:</t>

     <figure><artwork>
  var num = gadgets.i18n.parseNumber("#,###", "$20,000", 0, "USD");
     </artwork></figure>   
    
     <section title="Specifying Format and Parsing Patterns">
     
     <section title="Date/Time Pattern Specification">  
      <t>When formatting and parsing dates and times, the i18n feature 
      utilizes the patten specification defined in Appendix F of the
      <eref target="http://www.unicode.org/reports/tr35/#Date_Format_Patterns">
      Unicode Locale Data Markup Language</eref> with the exception that 
      support for the following symbols is not required:
       <list style="symbols">
         <t>w: Week of year</t>
         <t>W: Week of Month.</t>
         <t>D: Day of year.</t>
         <t>F: Day of Week in Month.</t>
         <t>g: Modified Julian day</t>
      </list></t>
     </section>
     
     <section title="Number Pattern Specification">
      <t>Patterns for formatting and parsing numbers are expressed using
      the same grammar used by the Java Standard Editon's
      as described <eref target="http://docs.oracle.com/javase/7/docs/api/java/text/NumberFormat.html">NumberFormat</eref> class.</t>

      <t>For example, assuming a locale of "en-US", using the pattern 
      "#,##0.00" to format the number 1234567.1234 using the formatNumber 
      method would output "1,234,567.12".</t>
     </section>
    </section>
        
    <section title="JavaScript API">
    
    <section title="Predefined Format Constants">
      <t>The Predefined Format Constants that MUST be supported are 
      listed in the table below. The specific pattern associated with 
      each constant will vary by locale.</t>
      
      <texttable>
        <ttcol align="left" width="15%">Property</ttcol>
        <ttcol align="left">Description</ttcol>        
        <c><spanx style="verb">gadgets.i18n.CURRENCY_PATTERN</spanx></c>
        <c>The default currency format, e.g. for the locale "en-US",
        the number 1234.235 would format as "$1,234.34".</c>        
        <c><spanx style="verb">gadgets.i18n.DECIMAL_PATTERN</spanx></c>
        <c>The default decimal number format, e.g. for the locale 
        "de-DE", the number 1234 with a fractional decimal of 13 
        would format as "1.234,13".</c>        
        <c><spanx style="verb">gadgets.i18n.PERCENT_PATTERN</spanx></c>
        <c>The default percentage number format, e.g. for the locale
        "en-US", the number 123 would format as "12,300%"</c>        
        <c><spanx style="verb">gadgets.i18n.SCIENTIFIC_PATTERN</spanx></c>
        <c>The default scientific-notation format, e.g. the number
        12345.0 would format as "1E4"</c>        
        <c><spanx style="verb">gadgets.i18n.FULL_DATE_FORMAT</spanx></c>
        <c></c>      
        <c><spanx style="verb">gadgets.i18n.FULL_DATETIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.FULL_TIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.LONG_DATE_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.LONG_DATETIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.LONG_TIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.MEDIUM_DATE_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.MEDIUM_DATETIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.MEDIUM_TIME_FORMAT</spanx></c>
        <c></c>
        <c><spanx style="verb">gadgets.i18n.SHORT_DATE_FORMAT</spanx></c>
        <c></c>      
        <c><spanx style="verb">gadgets.i18n.SHORT_DATETIME_FORMAT</spanx></c>
        <c></c>      
        <c><spanx style="verb">gadgets.i18n.SHORT_TIME_FORMAT</spanx></c>
        <c></c>
      </texttable>
    </section>
    
     <section title="gadgets.i18n.formatDateTime" anchor="gadgets.i18n.formatDateTime">

      <t>The <spanx style="verb">gadgets.i18n.formatDateTime</spanx> 
      method formats a "Date" object with provided pattern
      specification. The pattern could be a string using ICU notation or a
      predefined pattern. A string using ICU notation offers the most
      flexibility. Each field as specified in the pattern has locale specific
      behavior. The pattern string is allowed to contain string literals, and
      one type of pattern might not work for all locales. In those case, the
      pattern itself could also be locale specific, thus not good for sharing
      among locales.</t>
      
      <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.i18n.formatDateTime(pattern,date)
      </artwork></figure>
      
      <figure><preamble>For example:</preamble>
      <artwork xml:space="preserve">
  date = new Date(2006, 6, 27, 13, 10, 10, 250);
  assertEquals("13:10:10", gadgets.i18n.formatDateTime("HH:mm:ss", date));
      </artwork></figure></t>
      
      <t>Input Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>pattern</c>
          <c>string/number</c>
          <c>String to specify patterns or Number used to reference predefined
          pattern that a date should be formatted into.</c>
          <c>date</c>
          <c>Date</c>
          <c>Date object being formatted.</c>
        </texttable>
      </t>
      <t>The method returns a String representation of the provided date and time.</t>
     </section>
     
     <section title="gadgets.i18n.formatNumber" anchor="gadgets.i18n.formatNumber">

      <t>The <spanx style="verb">gadgets.i18n.formatNumber</spanx> method
      formats number using the pattern specified. The pattern
      can be a string pattern or one of the predefined patterns. The
      formatted string is returned. If an error is encountered, zero will be
      returned.</t>
      
      <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.i18n.formatNumber(pattern, value, opt_currencyCode)
      </artwork></figure>
      
      <figure><preamble>For example:</preamble><artwork xml:space="preserve">
  var str = gadgets.i18n.formatNumber("#,###", 1234567890);
  assertEquals("1,234,567,890", str);
  var str = gadgets.i18n.formatNumber(gadgets.i18n.CURRRENCY_PATTERN, 1234.569);
  assertEquals("$1,234.58", str);
      </artwork></figure>
      
      <t>Input Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>pattern</c>
          <c>string/number</c>
          <c>String to specify patterns or Number used to reference predefined
          pattern that a number should be formatted into.</c>
          <c>value</c>
          <c>number</c>
          <c>The number being formatted.</c>
          <c>opt_currencyCode</c>
          <c>string</c>
          <c>optional international currency code, it determines the currency
          code/symbol should be used in format/parse. If not given, the currency
          code for current locale will be used.</c>
        </texttable>
      </t>
      <t>The method returns the formatted string.</t>
     </section>
     
     <section title="gadgets.i18n.parseDateTime" anchor="gadgets.i18n.parseDateTime">
     
      <t>The <spanx style="verb">gadgets.i18n.parseDateTime</spanx> 
      method will parse the input string ("text"),
      interpretting it as specified by pattern. The parsed result will be saved
      into a Date object ("date"). "start" indicates from where in the string
      the parse should start. This method returns the number of characters
      consumed.</t>
      
      <figure><artwork>
  &lt;static&gt; &lt;Number&gt; gadgets.i18n.parseDateTime(pattern, text, start, date)
      </artwork></figure>
      
      <figure><preamble>For example:</preamble><artwork xml:space="preserve">
  var date = gadgets.i18n.parseDateTime("yyMMdd", "991202", 0, date);
  var year = date.getFullYear();
  var month = date.getMonth();
  var day = date.getDate();
      </artwork></figure>
      
      <t>Typically, the complete collection of characters in a string are 
      targeted for parsing. However, there are cases when parsing only
      a subset of the characters is preferred. For that purpose, the 
      optional "start" and "date" parameters can be used.</t> 
      
      <figure><preable>For example, suppose you want to parse a string like 
      "88/01, 99/03, 98/05, 97/02", and extract each pair of numbers
      (e.g. 88/01) as a separate Date:</preable><artwork xml:space="preserve">
  var date_array = [];
  var pos = 0;
  var text = "88/01, 99/03, 98/05, 97/02";
  while(1) {
    var date = new Date;
    var consumed = gadgets.i18n.parseDateTime("yy/MM", text, pos, date);
    if (consumed &lt;= 0) break;
    date_array.push(date);
    pos += consumed;
    if (pos &lt; text.length &amp;&amp; text[pos] == ',') ++pos;
    if (pos &lt; text.length &amp;&amp; text[pos] == ' ') ++pos;
  }
      </artwork></figure>
      
      <figure><preamble>As with the formatting functions, a predefined 
      pattern can also be passed in as the first parameter:</preamble>
      <artwork xml:space="preserve">
  //assume locale has already been set to zh_CN
  var date = new Date();
  gadgets.i18n.parseDateTime(gadgets.i18n.LONG_DATE_FORMAT, "2006年7月24日", 0, date);
  assertEquals(date.getFullYear(), 2006);
  assertEquals(date.getMonth(), 7 - 1);
  assertEquals(date.getDate(), 24);
      </artwork></figure>
      
      <t>Input Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>pattern</c>
          <c>string/number</c>
          <c>String to specify patterns or Number used to reference predefined
          pattern that a date should be parsed from.</c>
          <c>text</c>
          <c>string</c>
          <c>The string that need to be parsed.</c>
          <c>start</c>
          <c>number</c>
          <c>The character position in "text" where parse begins.</c>
          <c>date</c>
          <c>Date</c>
          <c>The date object that will hold parsed value.</c>
        </texttable>
      </t>
      <t>The method returns the number of characters parsed or 0 if the 
      attempt to parse failed.</t>
     </section>
     
     <section title="gadgets.i18n.parseNumber" anchor="gadgets.i18n.parseNumber">
      <t>The <spanx style="verb">gadgets.i18n.parseNumber</spanx> method
      parses a String to get a number the pattern specified. The
      pattern can be a string pattern or one of the predefined patterns.</t>
      
      <figure><artwork>
  &lt;static&gt; &lt;Number&gt; gadgets.i18n.parseNumber(pattern, text, opt_pos, opt_currencyCode)
      </artwork></figure>
      
      <figure><preamble>For example:</preamble><artwork xml:space="preserve">
  var value = gadgets.i18n.parseNumber("0E0", "1.2345E+4");
  assertEquals(12345.0, value);
  //assume locale has already been set to fr
  var value = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "0,30 €");
  assertEquals(0.30, value);
      </artwork></figure>
      
      <t>Input Parameters:
        <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>pattern</c>
          <c>string/number</c>
          <c>String to specify patterns or Number used to reference predefined
          pattern that a number should be parsed from.</c>
          <c>text</c>
          <c>string</c>
          <c>input text being parsed.</c>
          <c>opt_pos</c>
          <c>Array</c>
          <c>optional one element array that holds position information. It tells
          from where parse should begin. Upon return, it holds parse stop
          position.</c>
          <c>opt_currencyCode</c>
          <c>string</c>
          <c>optional international currency code, it determines the currency
          code/symbol should be used in format/parse. If not given, the currency
          code for current locale will be used.</c>
        </texttable>
      </t>
      
      <t>The method returns the parsed number or a 0 if the attempt to parse failed.</t>
     </section>
    </section>
    
   </section>
   <!-- END JAVASCRIPT i18n -->
  
    <section title="The MiniMessage Feature" anchor="gadgets.MiniMessage">

      <t>The "MiniMessage" feature provides a simple mechanism for displaying 
      temporary messages to users of an application. Such messages typically appear
      at the top of the area allocated by the container for display of the 
      application and are dismissed either programmatically or by user action.
      Examples of typical uses of the MiniMessage feature include:
        <list style="symbols">
         <t>Displaying temporary status messages: loading, saving, etc.</t>
         <t>Displaying promotional messages: new features, new application, etc.</t>
         <t>Displaying debug and error messages: bad input, failed connection to server, etc.</t>
        </list>
      </t>

      <t>Containers SHOULD support the "MiniMessage" feature.</t>

      <t>The "MiniMessage" feature is enabled by specifying feature="minimessage"
      within either a &lt;Require&gt; or &lt;Optional&gt; element within the 
      &lt;ModulePrefs&gt;. JavaScript APIs are used to create and manipulate
      the messages. No parameters are specified for the MiniMessage feature.</t>
      
      <figure><preamble>In the partial specification document below, the 
      "MiniMessage" feature is required and a simple message that dismisses
      automatically after 10 seconds is created:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="minimessage" /&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html" &gt;&lt;[CDATA[
      ...
      &lt;script&gt;
        ... 
        var messages = new gadgets.MiniMessage(gadgets.Prefs.getModuleId());
        var content = document.createElement('div');
        content.innerHTML = "Welcome to my application.";
        messages.createTimerMessage(content, 10);
        ...
      &lt;/script&gt;
      ...
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
      </artwork></figure>
      
      <t>Typically, only a single <spanx style="verb">gadgets.MiniMessage</spanx>
      object needs to be created for each view. Multiple messages can
      be created and managed by a single instance.</t>
      
      <t>By default, all messages will be displayed in a special reserved 
      area provided by the container at the top of the area allocated to 
      rendering the view. However, developers can select alternative 
      locations either for all messages or specific individual messages 
      by passing in additional parameters to the JavaScript API.</t>
      
      <figure><preamble>In the following example, all messages are rendered
      in an area dedicated by the view for messages:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="minimessage" /&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html" &gt;&lt;[CDATA[
      ...
      &lt;h2&gt;Messages&lt;/h2&gt;
      &lt;div id="messages"&gt;&lt;/div&gt;
      &lt;script&gt;
        ... 
        var messages = new gadgets.MiniMessage(
          gadgets.Prefs.getModuleId(), 
          document.getElementById("messages"));
        messages.createTimerMessage("This is my message", 10);
        ...
      &lt;/script&gt;
      ...
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
      </artwork></figure>
      
      <figure><preamble>Individual messages can be displayed anywhere within
      the application either by specifying the HTML markup directly within the
      application and referencing it when creating the message or by using DOM 
      methods in JavaScript. For example, in the following example, a message 
      is created and positioned individually:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="minimessage" /&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html" &gt;&lt;[CDATA[
      ...
      &lt;div id="status"&gt;This message can be dismissed&lt;/div&gt;
      &lt;script&gt;
        ... 
        var messages = new gadgets.MiniMessage(gadgets.Prefs.getModuleId());
        messages.createDismissableMessage(document.getElementById("status"));
        
        var div = document.createElement("div");
        ...
      &lt;/script&gt;
      ...
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;      
      </artwork></figure>

      <section title="JavaScript API">
      
        <t>When the "MiniMessage" feature is enabled for a application, the 
        follow JavaScript objects and methods are provided:</t>

        <section title="The gadgets.MiniMessage Object" anchor="gadgets.MiniMessage.ctor">
        
          <t>The <spanx style="verb">gadgets.MiniMessage</spanx> object is
          used to create and manage messages for an application. Typically, only a 
          single instance of the object needs to be created for all messages 
          within a given view.</t>
          
          <figure><preamble>Instances are created using the JavaScript "new" keyword:</preamble>
          <artwork>
  var messages = new gadgets.MiniMessage(id, container);
          </artwork></figure>
          
          <t>The object constructor takes two parameters, both of which are optional:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              <c>id</c>
              <c>String</c>
              <c>The container provided unique identifier of the application 
              instance. This value can be determined using the 
              <spanx style="verb">gadgets.Prefs.getModuleId()</spanx>
              method.</c>
              <c>container</c>
              <c>HTMLElement</c>
              <c>An object reference to the HTML element, typically a &lt;div&gt;
              that will serve as the container for all messages managed by this
              MiniMessage instance.</c>
            </texttable>           
          </t>
          
          <t>Once created, the <spanx style="verb">gadgets.MiniMessage</spanx>
          object provides four methods for working with messages.</t>
          
          <section title="gadgets.MiniMessage.createDismissibleMessage" anchor="gadgets.MiniMessage.createDismissibleMessage">
            <t>Creates a "dismissible" message that includes a container 
            defined icon that allows users to dismiss the message by clicking
            on it. When the message is, it is removed from the DOM and an 
            optional callback function, if defined, is invoked.</t>
            
            <figure><artwork>
  &lt;HTMLElement&gt; gadgets.MiniMessage.createDismissibleMessage(message, callback)
            </artwork></figure>
                  
            <t>Input Parameters:
              <texttable align="left">
                <ttcol>Name</ttcol>
                <ttcol>Type</ttcol>
                <ttcol>Description</ttcol>
                <c>message</c>
                <c>String | Object</c>
                <c>The message as an HTML string or DOM element</c>
                <c>callback</c>
                <c>Function</c>
                <c>Optional callback function to be called when the message is
                dismissed. The callback function will not be called until after the
                existing callstack has completed execution.</c>
              </texttable>
            </t>
            
            <t>If creation of the message is successful, the method will 
            return a reference to the HTMLElement that contains the 
            created message.</t>
          </section>  
         
          <section title="gadgets.MiniMessage.createStaticMessage" anchor="gadgets.MiniMessage.createStaticMessage">
          
            <t>Creates a "static" message that can only by dismissed programmatically
            by calling the <spanx style="verb">gadgets.MiniMessage.dismissMessage</spanx>
            method.</t>
            
            <figure><artwork>
  &lt;HTMLElement&gt; gadgets.MiniMessage.createStatusMessage(message)
            </artwork></figure>
          
            <t>Input Parameters:
              <texttable align="left">
                <ttcol>Name</ttcol>
                <ttcol>Type</ttcol>
                <ttcol>Description</ttcol>
                <c>message</c>
                <c>String | Object</c>
                <c>The message as an HTML string or DOM element</c>
              </texttable>
            </t>
            
            <t>If creation of the message is successful, the method will 
            return a reference to the HTMLElement that contains the 
            created message.</t>
          </section> 
              
          <section title="gadgets.MiniMessage.createTimerMessage" anchor="gadgets.MiniMessage.createTimerMessage">      
            <t>Creates a message that displays for a specified number of 
            seconds. When the timer expires, the message is dismissed automatically
            and an optional callback function, if provided, is invoked.</t>
            
            <figure><artwork>
  &lt;HTMLElement&gt; gadgets.MiniMessage.createTimerMessage(message, seconds, callback)
            </artwork></figure>
          
            <t>Input Parameters:
              <texttable align="left">
                <ttcol>Name</ttcol>
                <ttcol>Type</ttcol>
                <ttcol>Description</ttcol>
                <c>message</c>
                <c>String | Object</c>
                <c>The message as an HTML string or DOM element</c>
                
                <c>seconds</c>
                <c>Number</c>
                <c>The number of seconds to wait before dismissing the message.</c>
                
                <c>callback</c>
                <c>Function</c>
                <c>Optional callback function to be called when the message is
                dismissed. The callback function will not be called until after the
                existing callstack has completed execution.</c>
              </texttable>
            </t>
            
            <t>If creation of the message is successful, the method will 
            return a reference to the HTMLElement that contains the 
            created message.</t>
          </section> 
          
          <section title="gadgets.MiniMessage.dismissMessage" anchor="gadgets.MiniMessage.dismissMessage">
            
            <t>Dismisses the specified message.</t>
            
            <figure><artwork>
  &lt;Void&gt; gadgets.MiniMessage.dismissMessage(message)
            </artwork></figure>
            
            <t>The method takes a single input parameter which is the 
            HTMLElement of the message to dismiss as returned by one
            of the three creation messages.</t>
          </section>        
        </section>
      </section>
    </section>
    <!-- END MINIMESSAGE -->
      
   <section title="The OAuth Popup Feature" anchor="gadgets.oauth.Popup">

     <t>When an application attempts to access remote resources that are 
     protected using either the OAuth 1.0a or 2.0 protocol, the 
     container is required to first determine if the application has 
     received appropriate authorization in the form of an "Access Token".
     If a token is not available, the container must ask the application 
     to first acquire the appropriate authorization.</t>
     
     <t>With most scenarios, this is achieved by redirecting the user
     to the third party OAuth Authorization Service and asking them to 
     approve access. While application developers are responsible for determining 
     how such redirection occurs, they can use the OAuth Popup Feature to 
     simplify the process and to promote consistent, familiar behavior.</t>
     
     <t>The feature works by generating a hyperlink within the application's 
     user interface that, when clicked, opens a window that displays the
     third party OAuth Authoriation Service's interface. When opened, the
     application is notified via a callback function that the window is open. 
     The user will either approve or deny the request and then dismiss the 
     window, returning the user back to the application's user interface. The 
     application can either then automatically proceed with processing the 
     request or wait for the user to notify it when it continue.</t>
     
     <t>Use of the OAuth Popup Feature is enabled within an application by using
     feature="oauthpopup" in either a &lt;Require&gt; or &lt;Optional&gt;
     element with the &lt;ModulePrefs&gt;. Once enabled, the 
     <spanx style="verb">gadgets.oauth.Popup</spanx> object will become 
     available for use within the JavaScript of a view.</t>
     
     <figure><preamble>The example below illustrates the basic operation of
     the OAuth Popup Feature:</preamble><artwork>
  &lt;Module>
    &lt;ModulePrefs>
      &lt;Require feature="oauthpopup" />
      &lt;OAuth>
        &lt;Service>...&lt;/Service>
      &lt;/OAuth>
    &lt;/ModulePrefs>
    &lt;Content type="html">&lt;![CDATA[
      &lt;div>
        &lt;a href="#" id="personalize">Personalize this application&lt;/a>
      &lt;/div>
  
      &lt;div>Please click
        &lt;a href="#" id="approvaldone">I've approved access&lt;/a>
        once you've approved access to your data.
      &lt;/div>
  
      &lt;script type="text/javascript">
        function $(x) {
          return document.getElementById(x);
        }
  
        function fetchData() {
          var url = "http://localhost:8080/social/rest/people/@me/@self";
          var params = {};
          params[gadgets.io.RequestParameters.CONTENT_TYPE] =
            gadgets.io.ContentType.TEXT;
          params[gadgets.io.RequestParameters.AUTHORIZATION] =
            gadgets.io.AuthorizationType.OAUTH;
          params[gadgets.io.RequestParameters.METHOD] =
            gadgets.io.MethodType.GET;
          params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] =
            "shindig";
  
          gadgets.io.makeRequest(url, function (response) {
            if (response.oauthApprovalUrl) {
              var onOpen = function() {};
              var onClose = function() {
                fetchData();
              };
              var popup = new gadgets.oauth.Popup(
                response.oauthApprovalUrl,
                null, onOpen, onClose);
              $('personalize').onclick = popup.createOpenerOnClick();
              $('approvaldone').onclick = popup.createApprovedOnClick();
            } else if (response.data) {
              ...
            } else {
              ...
            }
          }, params);
        }
  
        gadgets.util.registerOnLoadHandler(fetchData);
      &lt;/script>
    ]]&gt;&lt;/Content>
  &lt;/Module>
     </artwork></figure>

     <t>Once the <spanx style="verb">gadgets.oauth.Popup</spanx> object 
     is created, the calls to <spanx style="verb">popup.createOpenerOnClick</spanx>
     and <spanx style="verb">popup.createApprovedOnClick</spanx> generate the 
     appropriate hyperlink targets for acquiring and completing the authorization.</t>

     <section title="JavaScript API">
     
       <t>When the OAuth Popup Feature is enabled for an application, the 
       <spanx style="verb">gadgets.oauth.Popup</spanx> object becomes 
       available for use within the application's JavaScript code.</t>
     
       <section title="The gadgets.oauth.Popup Object" anchor="gadgets.oauth.Popup.ctor">
       
         <t>The <spanx style="verb">gadets.oauth.Popup</spanx> object 
         is used to manage a window that is displayed and used to acquire
         OAuth Authorization from a third party. Instances of the object
         are created using the JavaScript new keyword.</t>
         
         <figure><preamble>For instance:</preamble><artwork>
  var popup = new gadgets.oauth.Popup(
    destination, 
    windowOptions, 
    openCallback, 
    closeCallback);
         </artwork></figure>
       
         <t>The constructor accepts the following input parameters:
          <texttable align="left">
          <ttcol>Name</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Description</ttcol>
          <c>destination</c>
          <c>String</c>
          <c>Target URL to display when the window opens.</c>
          <c>windowOptions</c>
          <c>String</c>
          <c>Options for window.open, used to specify look and feel of the
          window.</c>
          <c>openCallback</c>
          <c>Function</c>
          <c>Function to call when the window is opened.</c>
          <c>closeCallback</c>
          <c>Function</c>
          <c>Function to call when the window is closed.</c>
          </texttable>
         </t>
       
         <t>The <spanx style="verb">gadgets.oauth.Popup</spanx>
         object exposes two methods: <spanx style="verb">createOpenerOnClick</spanx>
         and createApprovedOnClick.</t>
         
         <section title="gadgets.oauth.Popup.createOpenerOnClick" anchor="gadgets.oauth.Popup.createOpenerOnClick">      
           <t>Generates a function that is intended to be assigned to either
           a hyperlink (e.g. the onclick event of the HTML anchor tag) or
           similar mechanism (e.g. an HTML button) that when invoked, will 
           display the OAuth Authorization window. The method accepts no 
           input parameters and returns a JavaScript Function object.</t>
           
           <figure><artwork>
  &lt;Function&gt; createOpenerOnClick()
           </artwork></figure>
         </section>
         
         <section title="gadgets.oauth.Popup.createApprovedOnClick" anchor="gadgets.oauth.Popup.createApprovedOnClick">
         
           <t>Generates a function that is intended to be assigned to either
           a hyperlink (e.g. the onclick event of the HTML anchor tag) or
           similar mechanism (e.g. an HTML button) that when invoked, will 
           notify the container that OAuth authorization is complete.</t>
           
           <t>Typically, when the OAuth Popup window closes, the container 
           will be able to automatically detect that authorization is complete
           and it will attempt to continue with the original request that 
           triggered the authorization step in the first place. However, some
           containers are unable to detect when the Popup is closed. For those
           cases, the <spanx style="verb">createdApprovedOnClick</spanx> method
           provides a alternative. In most typical scenarios, however, the 
           "Approved" function returned by this method will never be invoked.</t>
           
           <t>The method accepts no input parameters and returns a JavaScript
           Function object.</t>
        
           <figure><artwork>
  &lt;Function&gt; createApprovedOnClick()
           </artwork></figure>
         </section>
       </section> 
     </section>    
   </section>
   <!-- END OAUTH POPUP -->

   <section title="The OpenSearch Feature" anchor="OpenSearch">
       <t>The "opensearch" feature allows applications to declare
       that searchable material is provided using an
       <eref target="http://www.opensearch.org/Specifications/OpenSearch/1.1">OpenSearch 1.1</eref>
       description. Containers can use the search descriptions provided
       by multiple applications to, for example, provide a single, integrated container-wide
       search capability that aggregates results from multiple sources.</t>
       
       <t>The OpenSeach description can either be passed directly 
       as a parameter of the feature or by reference using the URL of a description document.</t>
       
       <figure><preamble>For example: </preamble>
                <artwork xml:space="preserve">
    &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
    &lt;Module&gt;
      &lt;ModulePrefs title="OpenSearch Example"&gt;
        &lt;Optional feature="opensearch"&gt;
          &lt;Param name="description"&gt;
            &lt;![CDATA[
              &lt;OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/"&gt;
                &lt;ShortName&gt;Example Search&lt;/ShortName&gt;
                &lt;Description&gt;Realtime Example Search&lt;/Description&gt;
                &lt;Url type="application/atom+xml" method="get" template="http://search.example.com/search.atom?q={searchTerms}"/&gt;
                &lt;Image width="16" height="16"&gt;http://search.example.com/favicon.png&lt;/Image&gt;
                &lt;InputEncoding&gt;UTF-8&lt;/InputEncoding&gt;
                &lt;SearchForm&gt;http://search.example.com/&lt;/SearchForm&gt;
              &lt;/OpenSearchDescription&gt;
            ]]&gt;
          &lt;/Param&gt;
        &lt;/Optional&gt;
      &lt;/ModulePrefs&gt;
      &lt;Content type="url" href="http://example.com/searchGadget.xml" /&gt;
    &lt;/Module&gt;
                </artwork>
              </figure>
              
              <figure><preamble>Or, alternatively, using a URL to reference the description document:</preamble>
                <artwork xml:space="preserve">
    &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
    &lt;Module&gt;
      &lt;ModulePrefs title="OpenSearch Example"&gt;
        &lt;Optional feature="opensearch"&gt;
          &lt;Param name="url"&gt;http://search.example.com/openSearchDescription.xml&lt;/Param&gt;
        &lt;/Optional&gt;
      &lt;/ModulePrefs&gt;
      &lt;Content type="url" href="http://example.com/searchGadget.xml" /&gt;
    &lt;/Module&gt;
                </artwork>
              </figure>
  
      <t>As illustrated, support for the "opensearch" feature is specified 
      by including either an "Optional" or "Required" element within the 
      "ModulePrefs" of the Gadget specification. The feature identifier is 
      "opensearch". Developers SHOULD declare the feature as "Optional"
      to allow for maximum interoperability in all containers.</t>
      
      <t>The feature has two possible parameters: description and url:
        <list style="symbols">
          <t>The description parameter contains the full XML of the
          <eref target="http://www.opensearch.org/Specifications/OpenSearch/1.1#OpenSearch_description_document">OpenSearch 1.1 description</eref>.
          This description contains the template url for fetching results, the
          type of results returned, the title of the search contribution, and
          other information.</t>
          <t>The url parameter contains a URL to an XML document containing
          the OpenSearch 1.1 description.</t>
        </list>
      </t>
   
    </section>
    <!-- END OPENSEARCH -->

      <section title="The OpenSocial API (osapi) Feature" anchor="osapi">
    
        <t>The OpenSocial API (osapi) Feature provides developers with 
        an interface for requesting and manipulating social data made
        available by the OpenSocial Container.</t>
        
        <t>While it is possible to use the <spanx style="verb">gadgets.io.makeRequest</spanx>
        method and associated methods to interact with information provided 
        by the container, the "osapi" feature provides a higher-level abstraction
        that is more specific to OpenSocial's specific data and API model.</t>
        
        <t>The OpenSocial API Feature is enabled for an application instance by specifying
        feature="osapi" using either the &lt;Require&gt; or &lt;Optional&gt;
        element within the &lt;ModulePrefs&gt;.</t>
        
        <figure><preamble>For example:</preamble><artwork><![CDATA[
  <Module>
    <ModulePrefs> 
      ...
      <Require feature="osapi" />
      ...
    </ModulePrefs>
    ...
  </Module>
        ]]></artwork></figure>
     
        <section title="JavaScript API">
        
          <t>When the "osapi" feature is enabled for an application instance,
          the container will generate and provide one Service object 
          instance for each Social Data Service provided by the container.
          Each Service object instance is accessible via a distinct 
          property on the static <spanx style="verb">osapi</spanx> 
          object. The property name is derived from and specific to each
          individual Social Data Service.</t>
          
          <t>For example, a container can implement the OpenSocial Person
          Service as defined by <xref target="social-app"/> and make that available 
          to developers via the "osapi" Feature by using the property name
          "people" as specified in the Person Service definition.</t>
          
          <figure><artwork>
  &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      ...
      &lt;Require feature="osapi" /&gt;
      ...
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        osapi.people.getViewer().execute(
          function(result) {
            // ...
          }
        );
      &lt;/script&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
          </artwork></figure>
          
          <t>Likewise, the container can implement the OpenSocial 
          Activity Stream Service as defined by <xref target="social-app"/>
          and make that available to developers using the property name
          "activities" as specified in the Activity Stream Service 
          definition.</t>
          
          <figure><artwork>
  &lt;?xml version="1.0" encoding="UTF-8" ?&gt;
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      ...
      &lt;Require feature="osapi" /&gt;
      ...
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        osapi.activities.get().execute(
          function(result) {
            // ...
          }
        );
      &lt;/script&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
          </artwork></figure>
          
          <t>The methods provided by the Service Objects returned by each 
          service property are unique to the corresponding service and are 
          defined by each individual service's specification.  Every method
          exposed by the Service Object SHOULD take, as input, a single 
          parameter whose value is a JavaScript object providing 
          that methods input parameters. This input parameter MAY be optional.
          Each method MUST return an <spanx style="verb">osapi.Request</spanx>
          Object instance that encapsulates the request and may be used to 
          either execute the request immediately or added to a 
          <spanx style="verb">osapi.BatchRequest</spanx> object for deferred
          and batched execution.</t>
          
          <figure><preamble>The example below, for instance, uses the OpenSocial 
          Person Service to access a listing of the current Viewer's friends. 
          First, the Service Object for the "people" service is accessed. Then
          the "get()" method is called with input parameters specifying the 
          data we wish to retrieve. The method returns an <spanx style="verb">osapi.Request</spanx>
          object that is then immediately executed to retrieve the data:</preamble>
          <artwork><![CDATA[
  var people = osapi.people;
  var params = { 
    "userId" : "@me", 
    "groupId" : "@friends" };
  var get_req = people.get(params);
  get_req.execute(
    function(result) {
      if (!result.error) {
        // ...
      }
    }
  );
          ]]></artwork></figure>
          
          <t>Containers are free to determine the set of Social Data Services
          they support and expose to applications. Definitions for a handful of 
          common Social Data Services are provided in <xref target="social-app"/>. Gadget
          developers cannot assume that all containers will support the same 
          set of services and MUST therefore be prepared to gracefully handle
          cases where any given service is not available.</t>
          
          <figure><preamble>One method developers can use to safely 
          prepare for such cases is to test for the existence of the service
          and method, as in the following example:</preamble><artwork>
  if (osapi.people && osapi.people.getViewer) {
    osapi.people.getViewer().execute(function(result) {
      // ...
    });
  }
          </artwork></figure>
        
          <section title="The osapi.Request Object" anchor="osapi.Request">
          
            <t>All methods on a Service Object are required to return an 
            instance of the <spanx style="verb">osapi.Request</spanx>
            object. These objects encapsulate the service request 
            being made to the container and wrap it in a consistent
            generic interface exposing a single "execute" method.</t>
            
            <section title="osapi.Request.execute" anchor="osapi.Request.execute">
            
              <t>The <spanx style="verb">osapi.Request.execute</spanx> method 
              invokes the encapsulated Service Object request and passes the
              result off to a specified callback function.</t>
              
              <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.execute(callback)
              </artwork></figure>
              
              <t>The method takes as input a single Function object that will
              be invoked upon completion of the request with a single input
              parameter representing the request results as a JavaScript object.
              The specific properties exposed by the result object depend 
              entirely on the specific Service Object, the request that was 
              executed and the status of the request.</t>
              
              <t>If the execution of the request results in an error, the 
              callback function provided will be invoked with details of 
              the error being passed in as described in 
              <xref target="osapi.error.handling"/>.</t>
              
              <figure><preamble>For example, if an error occurs during the 
              processing of the request, the response object passed to the 
              callback function would contain an <spanx style="verb">error</spanx>
              property whose value is an <xref target="core-api">Error Object</xref>:</preamble>
              <artwork>
  {
    "error": {
      "message": "Invalid Method Parameters",
      "code": -32602
    }
  }
              </artwork></figure>
              
              <t>The execute method has no return value.</t>
            
            </section>
          
          </section>
        
          <section title="The osapi.BatchRequest Object" anchor="osapi.BatchRequest">
          
            <t>The <spanx style="verb">osapi.BatchRequest</spanx> object allows
            multiple <spanx style="verb">osapi.Request</spanx> objects to be 
            grouped together and executed as a single unit.</t>
            
            <t>Instances of the <spanx style="verb">osapi.BatchRequest</spanx>
            object are created using the <spanx style="verb">osapi.newBatch</spanx>
            method.</t>
            
            <figure><artwork>
  &lt;static&gt; &lt;osapi.BatchRequest&gt; osapi.newBatch()
            </artwork></figure>
            
            <t>The method takes no input parameters.</t>
            
            <t>Once created, individual <spanx style="verb">osapi.Request</spanx>
            objects can be added to the <spanx style="verb">osapi.BatchObject</spanx>
            instance as executed at once using the "execute" method.</t>
            
            <figure><preamble>The following illustrates two batched requests:</preamble>
            <artwork xml:space="preserve">
  var batch = osapi.newBatch().
     add("viewer", osapi.people.getViewer()).
     add('activities', osapi.activities.get({ userId : '@viewer', groupId : '@self'})).
  batch.execute(function(result) {
    if (!result.error) {
      alert('Hi, ' + result.viewer.displayName + '!');
      alert('You have ' + result.activities.totalResults + ' activities.');
    }
  });
            </artwork></figure>
            
            <section title="osapi.BatchRequest.add" anchor="osapi.BatchRequest.add">
            
              <t>The <spanx style="verb">osapi.BatchRequest.add</spanx> method
              adds a <spanx style="verb">osapi.Request</spanx> object to the 
              batch and associates it with a given key.</t>
              
              <figure><artwork>
  &lt;osapi.BatchRequest&gt; &lt;instance&gt;.add(key, request)
              </artwork></figure>
              
              <t>The first input parameter is a String serving as an identifier
              for the request object provided by the second parameter. The 
              key value "error" MUST NOT be used. The method returns an 
              <spanx style="verb">osapi.BatchRequest</spanx> object containing 
              the just added <spanx style="verb">osapi.Request</spanx>
              object all all previously added requests.</t>
            
            </section>
          
            <section title="osapi.BatchRequest.execute" anchor="osapi.BatchRequest.execute">
            
              <t>The <spanx style="verb">osapi.BatchRequest.execute</spanx>
              method executes all of the requests contained within the 
              batch.</t>
              
              <figure><artwork>
  &lt;Void&gt; &lt;instance&gt;.execute(callback)
              </artwork></figure>
              
              <t>The method takes as input a single callback Function object
              that will be invoked when all of the batched requests have
              been processed. The callback Function will be passed a single
              JavaScript objects mapping each batched request key to a 
              response object specific to the individual batched request.</t>
              
              <t>When an error occurs during the processing of one or more 
              batched requests, the container will attempt to continue 
              processing of the remaining requests in the batch. The details
              of the specific error(s) that occur will be mapped to the 
              appropriate batched request key within the response object and 
              general error details will be included as top level properties
              of the batch response.</t>
              
              <figure><preamble>For example, if a Batch Request containing
              two individual requests mapped to the keys "foo" and "bar" is
              processed and an error occurs when the "foo" request is being 
              processed but the "bar" request succeeds, the callback function
              will be passed an object resembling the following structure:</preamble>
              <artwork>
  {
    "error" : {
      "message":"An Error Occurred",
      "code": -32099
    },
    "foo" : {
      "error" : {
        "message":"Invalid Method Parameters",
        "code": -32602
      }
    },
    "bar" : {
      "xyz" : "Some appropriate data"
    }
  }
              </artwork></figure>
              
              <t>Additional details covering error handling is provided 
              in <xref target="osapi.error.handling"/>.</t>
            
            </section>
          
          </section>
        
          <section title="Error Handling" anchor="osapi.error.handling">
            
            <t>When processing a batch of <spanx style="verb">osapi.Request</spanx>
            objects using the <spanx style="verb">osapi.BachRequest</spanx> object
            and an error occurs processing any of the individual requests, the 
            provided callback function will be invoked with a response object 
            passed in containing a single top-level "error" property whose value
            is an Error object generally describing that the batch response
            did not complete with errors. The object will also contain one property 
            key for each request contained in the batch whose value will either
            be the results of the operation if successful or an object containing
            a single "error" property whose value is an Error object describing
            the specific error that occurred.</t>
            
            <figure><preamble>For example:</preamble><artwork>
  {
    "error" : {
      "message":"An Error Occurred",
      "code": -32099
    },
    "foo" : {
      "error" : {
        "message":"Invalid Method Parameters",
        "code": -32602
      }
    },
    "bar" : {
      "xyz" : "Some appropriate data"
    }
  }
              </artwork></figure>
              
              <t>When a general error occurs that causes the container to be 
              unable to process either an individual or complete batch of requests,
              such as when the container is unable to communicate with the 
              Social Data Services, the callback function provided will be 
              invoked and passed a response object containing a single "error"
              property whose value is an Error object describing the specific
              nature of the error.</t>
              
              <figure><preamble>For example:</preamble><artwork>
  {
    "error" : {
      "message": "A network communication error occurred",
      "code": -32603
    }
  }
              </artwork></figure>
            
          </section>

          <section title="The osapi.http Service Object" anchor="osapi.http">
         
            <t>The <spanx style="verb">osapi.http</spanx> Object is a special
            Service Object that encapsulates HTTP Requests within 
            <spanx style="verb">osapi.Request</spanx> objects. These can,
            in turn, be directly invoked using the "execute" method or 
            added to <spanx style="verb">osapi.BatchRequest</spanx> objects.</t>
            
            <t>The <spanx style="verb">osapi.http</spanx> object exposes 
            one method for each of the following HTTP methods, each returning
            an appropriate <spanx style="verb">osapi.Request</spanx>:
              <texttable>
                <ttcol>HTTP Method</ttcol>
                <ttcol><spanx style="verb">osapi.http</spanx> Method</ttcol>
                <ttcol>Description</ttcol>
                <c>DELETE</c>
                <c><spanx style="verb">osapi.http.delete</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP DELETE request.</c>
                <c>GET</c>
                <c><spanx style="verb">osapi.http.get</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP GET request.</c>
                <c>HEAD</c>
                <c><spanx style="verb">osapi.http.head</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP HEAD request.</c>
                <c>PATCH</c>
                <c><spanx style="verb">osapi.http.patch</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP PATCH request.</c>
                <c>POST</c>
                <c><spanx style="verb">osapi.http.post</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP POST request.</c>
                <c>PUT</c>
                <c><spanx style="verb">osapi.http.put</spanx></c>
                <c>Returns an <spanx style="verb">osapi.Request</spanx>
                object encapsulating an HTTP PUT request.</c>
              </texttable>
            </t>
            
            <t>Implementations are free to provide additional methods for 
            other HTTP methods. It is RECOMMENDED that such additional 
            methods follow a consistent naming pattern as the lower-case
            form of the method name. For instance, the method provided for 
            the "OPTIONS" HTTP method would be "options".</t>
            
            <t>Each of the methods on the <spanx style="verb">osapi.http</spanx>
            Object take an input parameter in the form of an 
            <xref target="http.request.params.object">HTTP Request Parameters Object</xref> 
            that provides general request options for the request.</t>
            
            <section title="The HTTP Request Parameters Object" anchor="http.request.params.object"">
            
              <t>The HTTP Request Parameters Object is a JavaScript object
              whose individual properties define parameters used during the 
              execution of an HTTP Request.</t>
              
              <t>The properties of the HTTP Request Parameters Objects are:
                <texttable>
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  
                  <c>alias</c>
                  <c>String</c>
                  <c>When a specification document uses the &lt;ExternalService&gt;
                  element to define an alias for a Container-managed external 
                  service, the optional "alias" parameter can be used in place 
                  of the "href" property to identify the external service to which the 
                  request is to be directed. If unspecified, the default value 
                  for this parameter is assumed to be null.</c>
                  
                  <c>authz</c>
                  <c>String</c>
                  <c>Specifies the authorization method to use. Valid values are:
                  "none", "signed", "oauth" and "oauth2". For convenience, 
                  aliases for each of these values have been provided for 
                  use in JavaScript code. These aliases are: 
                  gadgets.io.AuthorizationType.NONE, gadgets.io.AuthorizationType.SIGNED,
                  gadgets.io.AuthorizationType.OAUTH and gadgets.ioAuthorizationType.OAUTH2.
                  If not specified, the default value for this parameter is assumed to be "none".</c>

                  <c>format</c>
                  <c>String</c>
                  <c>Optionally specifies the data format the requested wishes 
                  the response to use. Valid values are either "json" or "text",
                  respectively indicating that the data SHOULD be returned as 
                  either "application/json" or "text/plain". If not specified,
                  the default value is assumed to be "json". The value of this
                  parameter is used by the container to process the results of
                  the HTTP operation. If format is equal to JSON, the container
                  will attempt to parse the returned content as JSON, handing 
                  the parsed result back to the provided callback function. If 
                  the format is "text" or otherwise cannot be successfully parsed
                  as JSON, the "raw" unparsed and unprocessed data provided by 
                  the request will be passed to the callback function.</c>
                 
                  <c>headers</c>
                  <c>Object</c>
                  <c>Specifies the collection of HTTP Request Headers the container
                  SHOULD include in the request. The value is specified as an 
                  associative map using the header names as a key and either a
                  literal String value or an Array of Strings. For example, to 
                  include "Accept-Language" and two "X-Custom" headers in the request, 
                  the value of the "HEADERS" property would be set to 
                  <spanx style="verb">{"Accept-Language":"de-DE", "X-Custom":["abc","xyz"]}</spanx>.</c>
                  
                  <c>href</c>
                  <c>String</c>
                  <c>The IRI to which the request is to be sent. If a relative 
                  URI is provided, the request will be resolved relative to a 
                  Base URI established by the container.</c>

                  <c>oauth_service_name</c>
                  <c>String</c>
                  <c>When the "authz" parameter is equal to either "OAUTH"
                  or "OAUTH2", and the specification document uses the 
                  &lt;OAuth&gt; or &lt;OAuth2&gt; elements within the &lt;ModulePrefs&gt;
                  to define associated OAuth services, the "oauth_service_name" 
                  parameter specifies the name of the &lt;Service&gt; element 
                  that provides the OAuth Service details to use for the request.
                  When not specified, the default value is assumed to be an 
                  empty string (e.g. "").</c>
       
                  <c>oauth_request_token</c>
                  <c>String</c>
                  <c>When the "authz" parameter is equal to either "OAUTH"
                  or "OAUTH2", the "oauth_request_token" parameter can be used 
                  to specified a pre-authorized OAuth Request Token for use in the 
                  request. If the container does not already have an OAuth Access
                  Token suitable for use with the request, the container SHOULD
                  use the supplied Request Token to request and acquire a new 
                  Access Token. If not specified, the default value is assumed
                  to be null.</c>
                 
                  <c>oauth_request_token_secret</c>
                  <c>String</c>
                  <c>When the "oauth_request_token" parameter is specified,
                  the "oauth_request_token_secret" parameter can be used to 
                  supply an associated Request Token Secret. If not specified,
                  the default value is assumed to be null.</c>
                 
                  <c>oauth2_scope</c>
                  <c>String</c>
                  <c>When the "authz" parameter is equal to "OAUTH",
                  the "oauth2_scope" parameter specifies the value of the 
                  OAuth 2.0 scope parameter the container SHOULD use with 
                  the request. The scope parameter is defined in <xref target="I-D.draft-ietf-oauth-v2-25"/>.
                  If not specified, the default value is assumed to be null, indicating
                  that no scope parameter is to be provided.</c>
                 
                  <c>oauth_token_name</c>
                  <c>String</c>
                  <c>When the "authz" parameter is equal to either "OAUTH"
                  or "OAUTH2", the application MAY use the "oauth_token_name" to specify
                  an alias for the OAuth Access Token used for the request. If the 
                  container does not yet have an appropriate Access Token to use
                  with the request, it will follow the appropriate steps to acquire 
                  one and cache it using the specified oauth_token_name value. On 
                  subsequent requests, the specified oauth_token_name will be used
                  to locate and use the cached Access Token. If not specified, the
                  default value is assumed to be an empty string (e.g. "").</c>
                 
                  <c>oauth_use_token</c>
                  <c>String</c>
                  <c>When the "authz" parameter is equal to either "OAUTH"
                  or "OAUTH2", the container is typically required to acquire an
                  appropriate OAuth Access Token prior to sending the request to
                  the URL. The "oauth_use_token" parameter can be used to modify
                  this default behavior. Valid values are: "never", "if_available"
                  and "always". If not specified, the default value is assumed to 
                  be "always". When "oauth_use_token" is equal to "never", the 
                  container SHOULD NOT attempt to acquire an Access Token for the 
                  request but SHOULD send the request to the URL just as it would 
                  any other request using with OAuth 1.0a or OAuth 2.0 protocols. 
                  When "oauth_use_token" is equal to "if_available", the container 
                  SHOULD include the Access Token in the request only if an appropriate 
                  token is available. If an Access Token is not available, the request
                  SHOULD be sent to the URL without the Access Token. When "oauth_use_token"
                  is equal to "always", the container is required to acquire an 
                  Access Token prior to sending the request and MUST include that
                  token in the request sent to the URL.</c>
                 
                  <c>body</c>
                  <c>String or JSON Object</c>
                  <c>When used with <spanx style="verb">osapi.http</spanx> method
                  representing an HTTP Method for which a request payload is 
                  expected (e.g. <spanx style="verb">osapi.http.patch</spanx>,
                  <spanx style="verb">osapi.http.post</spanx> or 
                  <spanx style="verb">osapi.http.put</spanx>), the "body" parameter 
                  specifies the data that is to be included as the payload of the 
                  request. The value is specified as either a String or a JSON 
                  object. If a JSON Object is provided, the Content-Type of the 
                  request payload will be "application/json" unless a specific 
                  value for the Content-Type header is provided within the "headers" 
                  property. If not specified, the value defaults to null, indicating 
                  that no payload is to be sent.</c>
                     
                  <c>refresh_interval</c>
                  <c>Number (non-negative integer)</c>
                  <c>Explicitly sets the numer of seconds content will be cached 
                  by the container as specified by <xref target="caching" />.</c>
                 
                  <c>sign_owner</c>
                  <c>Boolean</c>
                  <c>When the "authz" parameter equals either "SIGNED" or 
                  "OAUTH", the "sign_owner" parameter indicates whether the 
                  container SHOULD include the identity of the 
                  <xref target="Application-Roles">Instance Owner</xref> when signing 
                  the request. The value is specified as a Boolean. When not 
                  specified, the default value is assumed to be False.</c>
                 
                  <c>sign_viewer</c>
                  <c>Boolean</c>
                  <c>When the "authz" parameter equals either "SIGNED" or
                  "OAUTH", the "sign_viewer" parameter indicates whether the 
                  container SHOULD include the identity of the current Viewer when
                  signing the request. The value is specified as a Boolean. When 
                  not specified, the default value is assumed to be False.</c>  
                </texttable>
              </t>

            </section>  

            <section title="Processing osapi.http Requests">
            
              <t>The container is responsible for processing all <spanx style="verb">osapi.http</spanx>
              request objects in much the same way requests are processed using the 
              <spanx style="verb">gadgets.io.makeRequest</spanx> API.</t>
              
              <t>If the "authz" property on the HTTP Request Parameters
              Object passed in when the request object was created specifies
              any value other than "NONE", the container is required to apply
              the appropriate authentication mechanism to the request in exactly the
              same fashion described for the <spanx style="verb">gadgets.io.makeRequest</spanx>
              method.</t>
            
              <t>Upon completion of the HTTP request, the container shall 
              create an <xref target="http.response.object">HTTP Response Object</xref>
              which with either be passed as a parameter to the callback function
              provided when invoking the request object's "execute" method, or 
              added to the batch response object is the HTTP request object is 
              being executed as part of a <spanx style="verb">osapi.BatchRequest</spanx>.</t>
              
              <t>When preparing the HTTP Response Object, the container will
              check the valid of the "format" property provided in the 
              HTTP Request Parameters Object. If the value is unspecified or
              equals the literal String "json", the container will attempt to 
              parse any content returned within the HTTP Response as if it
              were an "application/json" response. If the the parse succeeds, 
              the container will included the parsed JSON structure within 
              the HTTP Response Object. If the parse fails, only the raw 
              content of the HTTP Response message, encoded as character 
              data, will be included in the HTTP Response Object.</t>
            
              <figure><preamble>For example, suppose that an application wishes to 
              retrieve a JSON document located at http://example.org/latest-photos.
              For the sake of the example, the JSON document has the following
              structure:</preamble><artwork>
  {
    photos : [ "http://www.somephotosite.com/photos/1.jpg",
               "http://www.somephotosite.com/photos/2.jpg",
               "http://www.somephotosite.com/photos/3.jpg",
             ],
    lastUpdate : "Mon, 13 Apr 2009 23:17:04 GMT"
  }
              </artwork></figure>
              
              <figure><preamble>This document can be retrieved using the 
              <spanx style="verb">osapi.http.get</spanx> method which, by 
              default, will parse the returned JSON and make it
              available directly from the HTTP Response Object:</preamble>
              <artwork>
  osapi.http.get({"href":"http://example.org/latest-photos"})
    .execute(
      function(response) {
        if (!response.error) {
          alert("There are " + response.content.photos.length + " new photos");
        }
      }
    );
              </artwork></figure>
              
              <t>The container MAY choose to provide cached responses in 
              response to an <spanx style="verb">osapi.http</spanx> Request 
              as specified by <xref target="caching"/>.</t>
              
              <t>When an error occurs during the processing of an HTTP 
              request, or when the HTTP Response uses a status code that
              indicates an error condition (4xx or 5xx), the HTTP Response
              Object passed to the callback function will contain a single
              "error" property whose value is an 
              <xref target="core-api">Error Object</xref> describing
              the specific error that occurred.</t>
              
            </section>
            
            <section title="The HTTP Response Object" anchor="http.response.object">
            
              <t>The HTTP Response Object is a JavaScript object whose
              properties provide details about the HTTP Response received 
              when processing an <spanx style="verb">osapi.http</spanx> 
              request object.</t>
              
              <t>TODO: Need to define the properties</t>
            
            </section>
          </section>
        </section>
      </section>
      <!--  END OSAPI FEATURE -->

  <section title="The PubSub Feature" anchor="interGadgetEventing">

    <t>The inter-application eventing feature, common known as "pub/sub", provides
    for loosely-coupled and asynchronous inter-application communication based
    on the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Hub_2.0_Specification_Introduction">
    OpenAjax Hub 2.0</eref> specification.</t>
    
    <t>The "pub/sub" feature provides:
      <list style="symbols">
        <t>An event hub, provided by the container and fully compliant 
        with OpenAjax Hub 2.0, that manages the subscription and publication 
        of events,</t>
        <t>Methods for publishing and subscribing to events, and </t>
        <t>Mechanisms for declaratively specifying metadata within
        a application's XML definition relevant to publishing and subscribing 
        to events.</t>
      </list>
    </t>
    
    <t>The process is straightforward:
      <list style="symbols">
        <t>First, a container that supports the "pub/sub" feature needs to 
        initialize the Hub and all default settings.</t>
        <t>Second, a container can bootstrap and simplify the connection of 
        an application to the hub by registering an onLoad handler using the 
        gadgets.util.registerOnLoadHandler API. </t>
        <t>Third, once the Hub is initialized by the container, individual applications
        that declare support for the "pubsub-2" feature using either the 
        "Optional" or "Required" tag within the Gadget specifications 
        "ModulePrefs" can use the provided JavaScript APIs to publish 
        events to the hub using "topics", or use the JavaScript APIs to
        subscribe to "topics" published by the Hub. When an application publishes
        an event to the Hub using a specific topic, all application's connected 
        to that Hub and subscribed to the same topic will receive a copy 
        of the event.</t>
      </list>
    </t>

    <t>A "topic" is a String value that conforms to the OpenAjax Hub 2.0 
    specification's <xref target="OAHub2.0">Topic Name Rules</eref>.
    All topic names prefixed with "org.opensocial." are reserved for use by
    the OpenSocial specification. Developers MUST NOT use the "org.opensocial."
    prefix when defining their own topics.</t>
    
    <t>Note that topic names are case-sensitive such that "org.example.foo" is 
    not equivalent to "org.example.Foo".</t>
    
    <section title="Initializing the Hub within the Container" anchor="ContainerExample">

      <t>The following example illustrates a non-normative example how a 
      container could provide support for this feature.</t>

      <list style="numbers">
        <t>Set default values:
          <figure><artwork type="code">
  // Create a pubsub settings object
  gadgets.HubSettings = {};

  // Set default HubClient constructor params object
  gadgets.HubSettings.params = {
   HubClient: {
      onSecurityAlert: function( alertSource, alertType ) {
        alert( "Gadget stopped attempted security breach: " + alertType );
        window.location.href = "about:blank"; // Forces container to see Frame Phish alert and probably close this application
      },
      scope: gadgetInstance
    } }; 
  
  // Set default onComplete function for HubClient.connect
  gadgets.HubSettings.onConnected = function( hub, suc, err ) { };
            </artwork></figure>
        </t>
        <t>Register an onLoad handler
          <t>An onLoad handler to actually create the HubClient and connect it
          to the ManagedHub. Delaying the HubClient creation and
          connection allows the application to override default values stored
          in gadgets.HubSettings. For example, IframeHubClient
          supports params properties such as seed, tokenLength and log,
          which are not set by default; and an application might need to
          override onSecurityAlert and/or scope, for which default values
          are provided. More importantly, the onComplete function for
          HubClient.connect usually sets up the application's subscriptions by
          calling gadgets.Hub.subscribe, or if the connection fails
          asynchronously, the onComplete function handles the error.</t>
          <figure><artwork type="code">
  // Register an onLoad handler
  gadgets.util.registerOnLoadHandler( function() {
    try {
      // Create the HubClient.
      gadgets.Hub = new OpenAjax.hub.IframeHubClient(  gadgets.HubSettings.params ) ;
  
      // Connect to the ManagedHub
      gadgets.Hub.connect( gadgets.HubSettings.onConnect );
  
    } catch(e) {
      // ... 
    }
  } );
          </artwork></figure>
        </t>
      </list>
    </section>
    
    <section title="Examples" anchor="GadgetExample">

      <t>The following illustrates a non-normative example of an application that 
      subscribes to a topic published by the Hub.</t>
      
      <t>Note that, by default, all of the necessary defaults parameters
      on the underlying HubClient connected for the application were initialized
      when the application was loaded. If the developer wishes to override the 
      default parameters to the HubClient constructor, it can do so by 
      setting values on gadgets.HubSettings as illustrated in the example.</t>

      <figure><artwork type="code">
  &lt;Module&gt;
    &lt;ModulePrefs title="Sample PubSub Subscriber" height="250"&gt;
      &lt;Require feature="pubsub-2"&gt;
        &lt;Param name="topics"&gt;&lt;![CDATA[ 
          &lt;Topic title="Random Number" 
            name="org.apache.shindig.random-number"
            description="Subscribes to random number generator." 
            type="number"
            subscribe="true"/&gt;
          ]]&gt;&lt;/Param&gt;
      &lt;/Require&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
  var subId;
  
  // Example of setting a parameter to the HubClient used by pubsub-2 feature.
  gadgets.HubSettings.params.HubClient.onSecurityAlert = function(alertSource, alertType) {
    alert("SECURITY ERROR!");
    window.location.href = "about:blank";
  };
  
  function callback(topic, data, subscriberData) {
    document.getElementById("output").innerHTML =
      "message : " + gadgets.util.escapeString(data + "") + "&lt;br/&gt;" +
      "received at: " + (new Date()).toString();
  }
  
  function subscribe() {
    subId = gadgets.Hub.subscribe("org.apache.shindig.random-number", callback);
  }
  
  function unsubscribe() {
    gadgets.Hub.unsubscribe(subId);
    document.getElementById("output").innerHTML = "";
  }
      &lt;/script&gt;
      &lt;div&gt;
        &lt;input type="button" value="Subscribe" onclick="subscribe()"/&gt;
        &lt;input type="button" value="Unsubscribe" onclick="unsubscribe()"/&gt;
      &lt;/div&gt;
      &lt;div id="output"&gt;&lt;/div&gt;
    ]]>&lt;/Content&gt;
  &lt;/Module&gt;
   </artwork></figure>

     <t>Similarly, below is a non-normative example of an application that 
     publishes events to the Hub:</t>
     
     <figure><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs title="Sample PubSub Publisher" height="250"&gt;
      &lt;Require feature="pubsub-2"&gt;
        &lt;Param name="topics"&gt;
          &lt;![CDATA[ 
            &lt;Topic title="Random Number" 
              name="org.apache.shindig.random-number"
              description="Publishes a random number." 
              type="number"
              publish="true" /&gt;
        ]]>&lt;/Param&gt;
      &lt;/Require&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
  function publish() {
    var message = Math.random();
    gadgets.Hub.publish("org.apache.shindig.random-number", message);
    document.getElementById("output").innerHTML = message;
  }
      &lt;/script&gt;
      &lt;div&gt;
        &lt;input type="button" value="Publish a random number" onclick="publish()"/&gt;
      &lt;/div&gt;
      &lt;div id="output">&lt;/div&gt;
    ]]>&lt;/Content&gt;
  &lt;/Module&gt;
     </artwork></figure>

    </section>

    <section title="JavaScript API" anchor="pubsub.javascript">
 
      <section title="The gadgets.Hub Object">
      
        <t>The <spanx style="verb">gadgets.Hub</spanx> object is a fully 
        compliant Hub as defined by the OpenAjax Hub 2.0 specification.
        When the specification document specifies a dependency on the 
        "pubsub-2" feature, an instance of the Hub is created automatically 
        by the container and provided to the application.</t>
      
        <section title="gadgets.Hub.publish" anchor="publish">
        
          <t>The <spanx style="verb">gadgets.Hub.publish</spanx> method is 
          used to publish a message to a specific topic managed by the Hub.</t>

          <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.Hub.publish(topic, payload)
          </artwork></figure>
        
          <t>Input Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              <c>topic</c>
              <c>String</c>
              <c>A string identifying the topic, conforming to the OpenAjax Hub
              Topic Naming Rules. Topic wildcard values (e.g. "*") are NOT permitted.</c>
              <c>payload</c>
              <c>JSON Object or Primitive</c>
              <c>The data that is being published. This can be be any object
              serializable as JSON or a JavaScript primitive such as a String,
              number, boolean or null. Copies of this data will be delivered, 
              by-value, to all subscribers to the named topic.</c>
            </texttable>
          </t>    
        
          <t>The "publish" method is anonymous. That is, the method does not
          automatically include any information identifying the source of 
          the message.</t>

          <figure><preamble>For example,</preamble><artwork>
  var message = {
    "id":"http://example.org/foo/bar",
    "title": "My Example"
  };
  gadgets.Hub.publish("org.example.my.object", message);
          </artwork></figure>
        
          <t>See the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Hub_2.0_Specification_Managed_Hub_APIs#OpenAjax.hub.Hub.prototype.publish">OpenAjax Hub 2.0 documentation</eref> for more information.</t>
        </section>
        
        <section title="gadgets.Hub.subscribe" anchor="subscribe">
        
          <t>The <spanx style="verb">gadgets.Hub.subscribe</spanx> method is 
          used to register interest in receiving messages published to a 
          specific topic. When a message is published, the Hub will invoke all 
          of the callback methods registered for the topic.</t>
          
          <t>The subscribe method will return a unique subscription identifier
          that can be used to subsequently unsubscribe from the topic.</t>
   
          <figure><artwork>
  &lt;static&gt; &lt;String&gt; gadgets.Hub.subscribe(topic, callback [,scope [,onCompleteCallback [,subscriberData]]])
          </artwork></figure>      
           
          <t>Input Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              <c>topic</c>
              <c>String</c>
              <c>A string identifying the topic, conforming to the OpenAjax Topic
              Naming Rules. Wildcards (e.g. "*") MAY be used in order to subscribe 
              to multiple topics in a single subscription request.</c>
              <c>callback</c>
              <c>Function</c>
              <c>A callback function that is invoked when a message is published
              to the topic.</c>
              <c>scope</c>
              <c>object</c>
              <c>When the callback or onCompleteCallback functions are invoked, the
              JavaScript "this" keyword refers to this scope object. If no scope is
              provided, default is window.</c>
              <c>onCompleteCallback</c>
              <c>Function</c>
              <c>A callback function that is invoked to tell the client 
              application whether the subscribe operation succeeded or failed.</c>
              <c>subscriberData</c>
              <c>JSON Object</c>
              <c>Arbitrary, subscriber provided data that is returned back to the
              client application in the subscriberData parameter of the callback
              function.</c>
            </texttable>
          </t>
          <t>The method returns an opaque subscription identifier. This identifier is 
          an arbitrary, unique ID string that is used to unsubscribe 
          from the topic.</t>
            
          <figure><preamble>For example,</preamble><artwork>
  callback = new Function(topic, data, subscriberData) {
    //...
  }
  
  subId = gadgets.Hub.subscribe("org.example.my.object", callback);
          </artwork></figure>  
            
          <t>See the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Hub_2.0_Specification_Managed_Hub_APIs#OpenAjax.hub.Hub.prototype.subscribe">OpenAjax Hub documentation</eref> for
          more information</t>
        </section>
        
        <section title="gadgets.Hub.unsubscribe" anchor="unsubscribe">  
          <t>The <spanx style="verb">gadgets.Hub.unsubscribe</spanx> method 
          is used to remove a subscription from the hub. The identifier 
          returned by the subscribe method is used to identify the subscription 
          to be removed. An exception is thrown if the referenced subscription 
          does not exist.</t>       
          <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.Hub.unsubscribe(subscriptionId)
          </artwork></figure>

          <t>Input Parameters:
            <texttable align="left">
              <ttcol>Name</ttcol>
              <ttcol>Type</ttcol>
              <ttcol>Description</ttcol>
              <c>subscriptionId</c>
              <c>String</c>
              <c>The subscriptionId is the opaque string that is returned from the
                  subscribe(...) method.</c>
            </texttable>
          </t>
            
          <figure><preamble>For example,</preamble><artwork>
  gadgets.Hub.unsubscribe(subId);
          </artwork></figure>
            
          <t>See the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Hub_2.0_Specification_Managed_Hub_APIs#OpenAjax.hub.Hub.prototype.unsubscribe">OpenAjax Hub documentation</eref> for
          more information.</t>
        </section>

        <section  title="Additional Methods" anchor="OtherMethods">
          <t>The 'gadgets.Hub' object is an instance of the IframeHubClient 
          as defined by the OpenAjax Hub specification and supports the 
          additional methods defined for objects of that type. Please refer
          to the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Hub_2.0_Specification_Managed_Hub_APIs#OpenAjax.hub.IframeHubClient">OpenAjax Hub documentation</eref> 
          for more information.</t>
        </section>
      </section>
    </section>

    <section title="The &lt;Topic&gt; Element">
    
      <t>As illustrated by the previous example, the "pubsub-2" feature 
      provides a means of allowing developers to declaratively describe
      the which topics an application utilizes directly within the feature 
      declaration within the "ModulePrefs" element.</t>
      
      <figure><preamble>For example:</preamble>
      <artwork>
  &lt;Module&gt;
    &lt;ModulePrefs title="Sample PubSub Publisher" height="250"&gt;
      &lt;Require feature="pubsub-2"&gt;
        &lt;Param name="topics"&gt;
          &lt;![CDATA[ 
            &lt;Topic title="Random Number" 
              name="org.apache.shindig.random-number"
              description="Publishes a random number." 
              type="number"
              publish="true" /&gt;
        ]]>&lt;/Param&gt;
      &lt;/Require&gt;
    &lt;/ModulePrefs&gt;
    ...
  &lt;/Module&gt;
      </artwork></figure>
    
      <t>When applications use the &lt;Topic&gt; element, containers are able
      to "wire" applications together either automatically or via a user interface
      that allows a user to connect applications that publish events to a given
      topic to applications that subscribe to those events.</t>

      <t>No XML namespace is defined for the &lt;Topic&gt; element.</t>
      
      <figure><artwork>
  Topic = element Topic {
    attribute name { text },
    attribute type { text }?
    attribute title { text }?,
    attribute publish { "true" | "false" }?,
    attribute subscribe { "true" | "false" }?,
    attribute description { text }?,
    attribute aboutUrl { text }?,
    undefinedAttribute*
  }
      </artwork></figure>

      <t>The &lt;Topic&gt; element has the following attributes:</t>
      <texttable align="left">
          <ttcol>Attribute</ttcol>
          <ttcol>Type</ttcol>
          <ttcol>Usage</ttcol>
          <ttcol>Description</ttcol>
          <c>name</c>
          <c>String</c>
          <c>Required</c>
          <c>
          The dot-delimited topic name, e.g. "org.example.randomNumber". This
          name follows the rules defined in the <eref target="http://www.openajax.org/member/wiki/OpenAjax_Metadata_1.0_Specification_Widget_Metadata#topic_element_name_attribute">OpenAjax Widget Metadata
          specification</eref>. Expression Language statements MAY be used 
          within the value so long as the resulting substitution results in a
          properly formatted topic name.</c>

          <c>type</c>
          <c>String</c>
          <c>Optional</c>
          <c>Type name for the event's payload data. When not specificed, any
          type will be allowed. See <xref target="EventDataTypes">Event Data Types</xref>.</c>

          <c>title</c>
          <c>String</c>
          <c>Optional</c>
          <c>A human-readable descriptive title for this topic. When 
          not specified, the value of the "name" attribute will be used.</c>

          <c>publish</c>
          <c>boolean</c>
          <c>Optional</c>
          <c>Indicates if the application publishes data to this topic. 
          The default value is "false".</c>

          <c>subscribe</c>
          <c>boolean</c>
          <c>Optional</c>
          <c>Indicates if the application subscribes to data published to this topic. 
          The default value is "false".</c>

          <c>description</c>
          <c>String</c>
          <c>Optional</c>
          <c>
          The textual description of the application's publish or subscribe
          endpoint. This can be used as an indication of the application's behavior.
          Consider an application that subscribes to a topic "com.example.address".
          The description might read, "When this application receives an event on 
          the com.example.address topic, it displays mass transit options 
          within 10km of the address received as the event payload."</c>

          <c>aboutUrl</c>
          <c>String</c>
          <c>Optional</c>
          <c>
          A URL pointing to a resource that provides more extensive
          descriptive information than can be provided in the description
          attribute.</c>
      </texttable>
 
      <section title="Event Data Types" anchor="EventDataTypes">

        <t>The OpenAjax Hub specification allows any data serializable as 
        JSON to be published to any given topic. Such data is inherently 
        "untyped" and unstructured.</t>
        
        <figure><preamble>For instance, it is possible -- albeit
        unlikely -- that code publishing data to a topic can include two 
        entirely dissimilar values to the same topic:</preamble><artwork>
  gadgets.Hub.publish("my.topic", {"foo":"bar"});
  gadgets.Hub.publish("my.topic", "my data");
        </artwork></figure>
        
        <t>Subscribers to a topic need to be prepared to deal with such
        differences in payloads by inspecting received data to see what has 
        been published.</t>
        
        <t>Container implementations MAY allow type information to be 
        associated with the payloads published to a given Topic. How such
        type information is specified when the data is published to a topic 
        is undefined by this specification.</t> 
        
        <t>A developer can use the "type" attribute on the &lt;Topic&gt; element to indicate 
        the specific type of data it publishes to a topic or is interested in 
        receiving. Containers that support typing of payloads can use this 
        information to more intelligently route data to interested subscribers.
        For instance, one application might only be interested in receiving payloads
        of type "org.example.foo" from the topic "my.topic" while another might
        only want type "org.example.bar" payloads.</t>

        <t>If data types are supported, they MUST be identified using the 
        following dot-delimited syntax and SHOULD conform to the "reverse DNS" 
        naming convention (e.g. "org.example.foo"):</t>
        
        <figure><artwork>
  prefix = token *["." token] "."
  datatype = [prefix] token
        </artwork></figure>
        
        <t>Any type other than those listed in the table below MUST have 
        a prefix consisting of at least one token. The prefix "org.opensocial." 
        is reserved for types defined by the OpenSocial specification 
        (e.g. "org.opensocial.Person").</t>

        <texttable align="left">
          <ttcol>Type Name</ttcol>
          <ttcol>Description</ttcol>
          <c>string</c>
          <c>A JavaScript string</c>
          <c>number</c>
          <c>A JavaScript number </c>
          <c>boolean</c>
          <c>A JavaScript boolean </c>
          <c>array</c>
          <c>A JSON-serializable Array, e.g. [ 1, 1, 2, 3, 5, 8 ]. The element type/s 
          are not specified when the generic "array" type is used.</c>
          <c>object</c>
          <c>A JSON-serializable Object, e.g. { foo: "bar", baz: "boo" }. The specifics 
          of the object are not specified when the generic "object" type is used.</c>
          <c>null</c>
          <c>A JavaScript null</c>
          <c>length</c>
          <c>Any CSS length value (e.g. "3px")</c>
          <c>color</c>
          <c>Any CSS color value (e.g. "#00ff00")</c>
          <c>id</c>
          <c>A string value that is used as a unique identifier</c>
          <c>class</c>
          <c>Zero or more CSS class names, separated by spaces</c>
          <c>style</c>
          <c>A string that could be used as value for a CSS 'style' attribute</c>
          <c>url</c>
          <c>An absolute URL value</c>
          <c>html</c>
          <c>A fragment of HTML markup</c>
          <c>countrycode</c>
          <c>An ISO 3166 Country Code</c>
          <c>languagecode</c>
          <c>An ISO 639-2 Language Code</c>
          <c>email</c>
          <c>A string that represents an e-mail address</c>
          <c>person</c>
          <c>A string that holds a person's name</c>
          <c>postalcode</c>
          <c>A string that represents a postal code</c>
          <c>phone</c>
          <c>A string that represents a phone number</c>
          <c>date</c>
          <c>A string that represents a date. MUST be expressed using the 
          "Date Time String Format" defined in the 
          [http://www.ecmascript.org/docs/tc39-2009-043.pdf ECMAScript5 specification] 
          using one of the date-only forms. For example: "2009-12-15"</c>
          <c>time</c>
          <c>A string that represents a time of day. MUST be expressed using 
          the "Date Time String Format" defined in the 
          [http://www.ecmascript.org/docs/tc39-2009-043.pdf ECMAScript5 specification] 
          using one of the time-only forms. For example: "18:45:00Z" or "10:26:24-05:00"</c>
          <c>timestamp</c>
          <c>A string that represents a date and time of day. MUST be expressed 
          using the "Date Time String Format" defined in the 
          [http://www.ecmascript.org/docs/tc39-2009-043.pdf ECMAScript5 specification]. 
          For example: "2009-12-15:18:45.000Z"</c>
          <c>duration</c>
          <c>A string that represents a duration. MUST have format 
          "PYYYY-DDDThh:mm:ss.fff". For example, "P0400-152T20:45:33.123" means 
          "400 years, 152 days, 20 hours, 45 minutes, 33.123 seconds, while 
          "P0003-000T01:56:22.000" means "3 years, 1 hour, 56 minutes and 22.000 seconds." 
          (Must use this one variant defined in the ISO 8601 standard). </c>
          <c>*</c>
          <c>Asterisk, or missing type attribute, means "any datatype"</c>
        </texttable>
      </section>
    </section>
  </section>
  <!-- END PUBSUB -->
      
    <section title="The Security Policy Feature" anchor='SecurityPolicy'>
  
      <t>Gadget's often require the ability to perform potentially 
      dangerous or sensitive operations or work with sensitive information.
      Such application's SHOULD only be allowed to perform those operations 
      if explicitly granted permission to do so by the container or the
      user.</t>
   
      <t>The Security Policy feature is used by an application to request 
      permissions under which to run.  Specific permissions are requested 
      with &lt;Param&gt; elements, with the "name" attribute on the 
      Param element identifying the feature and the text content of
      the element providing any additional required feature-specific information. 
      The Security Policy feature is specified within the &lt;ModulePrefs&gt;
      with the feature name "security-policy" using either the &lt;Optional&gt;
      or &lt;Require&gt; element. A container MAY support the 
      Security Policy feature.</t>
      
      <t>Containers MAY override any requested permission with its own 
      more restrictive security policy. The container SHOULD NOT grant 
      permissions to any application that are less restrictive than those
      explicitly requested by the application.</t>
  
      <figure><preamble>An application requesting optional permissions from the 
      container:</preamble><artwork xml:space="preserve">
    &lt;ModulePrefs &gt;
      &lt;Optional feature="security-policy" &gt;
        &lt;Param name="foo"&gt;bar&lt;/Param&gt;
      &lt;/Optional &gt;
    &lt;/ModulePrefs &gt;
      </artwork></figure>  
      
      <t>If an application requests a security policy that is not supported, 
      the container MUST log an error to the gadgets.log.  A container MAY 
      render that application using a supported security policy, or display an 
      appropriate error message. TODO: Clarify this</t>
      
      <t>Containers are free to define their own permissions for any purpose.
      TODO: should we have a registry of common permissions???</t>
       
    </section>
    <!-- END SECURITY POLICY -->
   
   <section title="The Selection Feature" anchor="gadgets.selection">
       
    <t>It is common for an OpenSocial container to display multiple applications 
    within a single display area. Often, when a user performs some action 
    in one view, another other displayed application needs to respond in some 
    appropriate manner. For instance, if the user selects a person in their
    contact list in one view, another view can be triggered to display
    the selected person's profile information, while another can display 
    a listing of documents owned by that person. In order to enable such 
    functionality, the container needs to provide applications with a way of 
    determining the currently selected object.</t>
    
     <t>The Selection feature provides the ability to participate in 
     the container's selection eventing. It is enabled for an application by 
     specifying feature="selection" within either a &lt;Require&gt; or 
     &lt;Optional&gt; element within the &lt;ModulePrefs&gt;.</t>
     
     <t>Once the feature is enabled, the application can either get or set the 
     current selection for the container.</t>
     
     <figure><preamble>The example below illustrates how an application can set 
     the current selection for the container:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs title="Sample Selection Changer" height="250"&gt;
      &lt;Require feature="selection"/&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        function setSelection(selection) {
          selection = [{type:'com.example.food', dataObject: selection}];
          gadgets.selection.setSelection(selection);
          document.getElementById("output").innerHTML = 'selection: '
           + gadgets.util.escapeString('' + gadgets.json.stringify(selection)) + '&lt;br/&gt;';
        }
      &lt;/script&gt;
      &lt;div&gt;
        &lt;input type="radio" name="group1" value="Milk" onclick="setSelection('Milk')"/&gt; Milk&lt;br&gt;
        &lt;input type="radio" name="group1" value="Butter" onclick="setSelection('Butter')"/&gt; Butter&lt;br&gt;
        &lt;input type="radio" name="group1" value="Cheese" onclick="setSelection('Cheese')"/&gt; Cheese&lt;br&gt;
      &lt;/div&gt;
      &lt;div id="output"&gt;&lt;/div&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;     
     </artwork></figure>
     
     <t>At any given time, a container only has one selected object that is 
     visible to all applications for which selection is enabled. Any application can 
     access the currently selected object for the container by using either
     the <spanx style="verb">gadgets.selection.getSelection</spanx> method
     or by registering a callback function that the container will invoke
     whenever a new selection object is set.</t>

    <section title="JavaScript API">
    
      <t>The following JavaScript methods are provided to applications 
      when the "selection" feature is enabled.</t>
    
      <section title="The Selection Object">
      
        <t>Selection Objects are simple JSON-serializable Objects that 
        consist of two basic properties:
          <texttable align="left">
            <ttcol>Name</ttcol>
            <ttcol>Type</ttcol>
            <ttcol>Description</ttcol>
            
            <c>type</c>
            <c>String</c>
            <c>A required data type identifier as defined in <xref target="EventDataTypes"/>
            that specifies the kind of object that has been selected.</c>
            
            <c>dataObject</c>
            <c>Object or Primitive</c>
            <c>Any valid JSON-serializable object or JavaScript primitive that
            represents the selected data.</c>
          </texttable>
        </t>
        
        <t>The current selection for a container will consist of an array
        of zero or more individual Selection Objects, each of which MAY 
        specify a different type value. For example:</t>
        
        <figure><preamble>For example:</preamble><artwork>
  var selection = [
    {"type": "org.example.food", "dataObject": "Cheese"},
    {"type": "org.example.drink", "dataObject": "Wine"}
  ]
  gadgets.selection.setSelection(selection);
        </artwork></figure>
      
      </section>
    
      <section title="gadgets.selection.setSelection" anchor="gadgets.selection.setSelection">
      
        <t>The <spanx style="verb">gadgets.selection.setSelection</spanx>
        method sets the current selection for the container, replacing the 
        current selection.</t>
      
        <figure><artwork>
   &lt;Static&gt; &lt;Void&gt; gadgets.selection.setSelection (selection)
        </artwork></figure>

        <t>Input Parameters:
        <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>selection</c>
             <c>Selection Objects[]</c>
             <c>An array of zero or more Selection objects.</c>
            </texttable>
        </t>
        <t>No return value is specified.</t> 
        
        <t>Calling the <spanx style="verb">gadgets.selection.setSelection</spanx>
        method will trigger the container to send notifications to all applications
        that have registered selection listener callback functions.</t>
        
      </section>
      
      <section title="gadgets.selection.getSelection" anchor="gadgets.selection.getSelection">
      
        <t>The <spanx style="verb">gadgets.selection.getSelection</spanx>
        method returns the current selection for the container. The method 
        takes no input parameters and returns an array of Selection objects.</t>
      
        <figure><artwork>
  &lt;static&gt; &lt;Selection Object[]&gt; gadgets.selection.getSelection()
        </artwork></figure>
     
      </section>
      
      <section title="gadgets.selection.addListener" anchor="gadgets.selection.addListener">
      
        <t>The <spanx style="verb">gadgets.selection.addListener</spanx>
        method registers a callback function that the container will 
        use to notify the container of changes in the current selection.</t>
      
        <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.selection.addListener(event, callback)
        </artwork></figure>
        
        <t>Input Parameters:
          <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>event</c>
             <c>String</c>
             <c>The type of selection event (currently unused). Valid values 
             are "selection", "preselection", "postselection" or null.</c>
             <c>callback</c>
             <c>Function</c>
             <c>The callback function that is called for the specified 
             selection event.</c>
          </texttable>
        </t>
        
        <t>Note that, currently, the "event" parameter is unused.</t>
        
        <t>No return value is specified.</t>
        
      </section>
      
      <section title="removeListener" anchor="gadgets.selection.removeListener">
      
        <t>The <spanx style="verb">gadgets.selection.removeListener</spanx>
        method unregisters a selection callback function.</t>
      
        <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.selection.removeListener(event, callback)
        </artwork></figure>
        
        <t>Input Parameters:
          <texttable align="left">
             <ttcol>Name</ttcol>
             <ttcol>Type</ttcol>
             <ttcol>Description</ttcol>
             <c>event</c>
             <c>String</c>
             <c>The type of selection event (currently unused). Valid values 
             are "selection", "preselection", "postselection" or null.</c>
             <c>callback</c>
             <c>Function</c>
             <c>The callback function to be unregistered.</c>
          </texttable>
        </t>
        <t>Note that, currently, the "event" parameter is unused.</t>
        
        <t>No return value is specified.</t>
        
      </section>

    </section>
   </section>
   <!--  END SELECTION  -->


      <section title="The View Features" anchor="gadgets.views">

        <t>The View Features provide operations for interacting with 
        the collection of Views provided by a specification document. There
        are two distinct View-related features, each of which are enabled
        for an application instance by specifying their respective feature 
        identifiers using either the &lt;Require&gt; or &lt;Optional&gt;
        elements within the &lt;ModulePrefs&gt;</t>
        
        <section title="The &quot;views&quot; Feature">
        
          <t>The "views" feature provides the basic operations for accessing
          information about and changing the current View being rendered.</t>
          
          <figure><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="views"/&gt;
    &lt;/ModulePrefs&gt;
    ...
  &lt;/Module&gt;          
          </artwork></figure>
        
          <section title="JavaScript API">
          
            <t>Once enabled, the "views" feature provides the following
            objects a methods:</t>
            
            <section title="The gadgets.views.ViewType Constants" anchor="gadgets.views.ViewType">
            
              <t>For the convenience of Gadget developers, JavaScript aliases for
              the handful of common View names defined in <xref target="content-processing-model"/>
              have been defined.</t>
              
              <texttable>
                <ttcol>View Name</ttcol>
                <ttcol>Alias</ttcol>
                
                <c>about</c>
                <c>gadgets.views.ViewType.ABOUT</c>
                
                <c>canvas</c>
                <c>gadgets.views.ViewType.CANVAS</c>
                
                <c>embedded</c>
                <c>gadgets.views.ViewType.EMBEDDED</c>
                
                <c>home</c>
                <c>gadgets.views.ViewType.HOME</c>
                
                <c>preferences</c>
                <c>gadgets.views.ViewType.PREFERENCES
                
                <c>preview</c>
                <c>gadgets.views.ViewType.PREVIEW</c>
                
                <c>profile</c>
                <c>gadgets.views.ViewType.PROFILE</c>
                
                <c>support</c>
                <c>gadgets.views.ViewType.SUPPORT</c>
              </texttable>
            </section>
            
            <section title="View Targets" anchor="gadgets.views.ViewType.ViewTarget">
              
              <t>View targets are specific areas defined by a container where
              the views of an application can be rendered. The specific targets
              supported are specific to each individual implementation. At a 
              minimum, containers SHOULD support the following targets:</t>
              
              <texttable>
                <ttcol>View Target</ttcol>
                <ttcol>Alias</ttcol>
                <ttcol>Description</ttcol>
                
                <c>TAB</c> 
                <c>gadgets.views.ViewType.TAB</c>
                <c>When containers support the ability to display content using
                a tabbed interface (similar to those used by modern Web browser
                user agents), the <spanx style="verb">TAG</spanx> View Target
                is used to request that a particular Application View be displayed
                within it's own separate tab.</c>
                
                <c>DIALOG</c>
                <c>gadgets.views.ViewType.DIALOG</c>
                <c>The <spanx style="verb">DIALOG</spanx> View Target is used
                to request that a particular Application View be displayed within
                a popup up box in a way that allows the Viewer to continue 
                interacting with the rest of the container.</c>
                
                <c>MODALDIALOG</c>
                <c>gadgets.views.ViewType.MODALDIALOG</c>
                <c>The <spanx style="verb">MODALDIALOG</spanx> View Target is 
                used to request that a particular Application View be displayed
                within a popup box in a way that requires the Viewer to interact
                with it prior to continuing any further interaction with the 
                rest of the container.</t>
                
                <c>FLOAT</c>
                <c>gadgets.views.ViewType.FLOAT</c>
                <c>The <spanx style="verb">FLOAT</spanx> View Target is similar
                to the <spanx style="verb">DIALOG</spanx> View Target with the 
                exception that, when using <spanx style="verb">FLOAT</spanx>, 
                the container SHOULD render the view without including any 
                additional User Interface elements (also known as "chrome").</c>
                
                <c>SIDEBAR</c> 
                <c>gadgets.views.ViewType.SIDEBAR</c>
                <c>Some containers can reserve a portion of the visible user 
                interface to the right or left of the primary content for the 
                display of one or more application views. The <spanx style="verb">SIDEBAR</spanx>
                View Target can be used to request that an application view be
                rendered within this dedicated space.</t>
              </texttable>

            </section>
             
            <section title="The gadgets.views.View Object" anchor="gadgets.views.View">

              <t>The <spanx style="verb">gadgets.views.View</spanx> object 
              represents a View supported by an application. Instances of the 
              <spanx style="verb">gadgets.views.View</spanx> object are 
              provided by the container </t>
              
              <t>The methods exposed by the object are:</t>
            
              <section title="gadgets.views.View.getName"anchor="gadgets.views.View.getName">
              
                <t>The <spanx style="verb">gadgets.views.View.getName</spanx>
                method returns the name of the View object. The method requires
                no input parameters.</t>
                
                <figure><artwork>
  &lt;String&gt; &lt;instance&gt;.getName()
                </artwork></figure>
              
              </section>
              
              <section title="gadgets.views.View.isOnlyVisibleGadget" anchor="gadgets.views.View.isOnlyVisibleGadget">
              
                <t>The <spanx style="verb">gadgets.views.View.isOnlyVisibleGadget</spanx>
                returns True if the application instance is the only application currently 
                visibly displayed by the container. No input parameters are specified.</t>
              
                <figure><artwork>
  &lt;Boolean&gt; &lt;instance&gt;.isOnlyVisibleGadget()
                </artwork></figure>
                
              </section>

            </section>
                  
            <section title="gadgets.views.getCurrentView" anchor="gadgets.views.getCurrentView">
            
              <t>The <spanx style="verb">gadgets.views.getCurrentView</spanx>
              returns a <spanx style="verb">gadgets.views.View</spanx> object
              representing the currently rendered View. The method takes no
              input parameters.</t>
              
              <figure><artwork>
  &lt;static&gt; &lt;gadgets.views.View&gt; gadgets.views.getCurrentView()
              </artwork></figure>
              
            </section>
               
            <section title="gadgets.views.getParams" anchor="gadgets.views.getParams">
            
              <t>The <spanx style="verb">gadgets.views.getParams</spanx> method
              returns the parameters provided when the request to render the 
              current view was received.</t>
              
              <figure><artwork>
  &lt;static&gt; &lt;Object&gt; gadgets.views.getParams()
              </artwork></figure>
              
              <t>The method takes no input parameters and returns a JavaScript
              object whose properties represent each of the provided view 
              parameters.</t>
      
            </section>
            
            <section title="gadgets.views.getSupportedViews" anchor="gadgets.views.getSupportedViews">
            
              <t>The <spanx style="verb">gadgets.views.getSupportedViews</spanx>
              method returns a JavaScript object mapping all of the supported
              primary <spanx style="verb">gadgets.views.View</spanx> objects for an application 
              to the view name. Note that only primary views will be included, 
              for instance, if the specification document defines views named 
              "Canvas.About", "Profile.About", "Home.About", "Canvas.Help", etc,
              the returned views will be: "Canvas", "Home" and "Profile".</t>
              
              <figure><artwork>
  &lt;static&gt; &lt;Object&gt; gadgets.views.getSupportedViews();
              </artwork></figure>
            
            </section>
            
            <section title="gadgets.views.requestNavigateTo" anchor="gadgets.views.requestNavigateTo">
            
              <t>The <spanx style="verb">gadgets.views.requestNavigateTo</spanx>
              method is used to request that the container render a specific 
              view. If the container supports parameter passing, it will 
              pass the optional parameters when rendering the new view. </t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.requestNavigateTo(view, opt_params, opt_ownerId)
              </artwork></figure>
              
              <t>TODO: Finish this</t>

            </section>
  
          </section>
        
        </section>
        
        <section title="The &quot;open-views&quot; Feature">
        
          <t>The "open-views" feature provides additional methods for 
          opening and closing views within a container.</t>
          
          <figure><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="open-views"/&gt;
    &lt;/ModulePrefs&gt;
    ...
  &lt;/Module&gt; 
          </artwork></figure>
          
          <section title="JavaScript API">
       
            <t>Enabling the "open-views" feature provides the
            following additional methods on the <spanx style="verb">gadgets.views</spanx>
            object.</t>
      
            <t>The "open-views" feature depends directly on the more basic
            functionality provided by the "views" feature; so by including 
            "open-views" in a specification document using either the 
            &lt;Require&gt; or &lt;Optional&gt; elements, the Objects and methods
            of the "views" feature are also made available.</t>
      
            <section title="gadgets.views.openGadget" anchor="gadgets.views.openGadget">
            
              <t>The <spanx style="verb">gadgets.views.openGadget</spanx> 
              method requests that a view be rendered by the 
              container.</t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.openGadget(resultCallback, navigateCallback, opt_params)
              </artwork></figure>
              
              <t>The method accepts three parameters as input.
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>resultCallback</c>
                  <c>Function</c>
                  <c>Specifies a callback Function that will be invoked by the
                  container when the requested application has been closed using the 
                  <spanx style="verb">gadgets.views.close</spanx> method. If 
                  the <spanx style="verb">gadgets.views.setReturnValue</spanx> 
                  was called within the opened view, then the value specified
                  will be passed to the callback function as a parameter.</c>
                  <c>navigateCallback</c>
                  <c>Function</c>
                  <c>Specifies a callback Function that will be invoked by the 
                  container when the requested view has been rendered. The 
                  identifier the container assigns to the rendered view, 
                  along with any additional appropriate metadata will be passed
                  to the function as parameters. The identifier can be used 
                  with the <spanx style="verb">gadgets.views.close</spanx> method
                  to subsequently close the opened view.</c>
                  <c>opt_params</c>
                  <c>Object</c>
                  <c>Specifies optional parameters that affect how the
                  view is to be rendered.</c>
                </texttable>              
              </t>
             
              <t>No return value is specified for the method.</t>

              <t>The following optional items MAY be specified as properties
              on the "opt_params" parameter value:
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>view</c>
                  <c>String </c>
                  <c>Identifies the specific view the container is to 
                  render. If not provided, the container will render the
                  default unnamed view.</c>
                  <c>viewTarget </c>
                  <c>String </c>
                  <c>Identifies where and how the container is to render the 
                  view, specified as a 
                  <xref target="gadgets.views.ViewType.ViewTarget">View Target</xref>.
                  For example, specifying a viewTarget of <spanx style="verb">MODALDIALOG</spanx> 
                  will cause the view to be rendered by the container in a modal
                  popup dialog box; whereas specifying a viewTarget of "tab"
                  will cause the container to render the view within a new 
                  container tab.</c>  
                  <c>viewParams </c>
                  <c>Object</c>
                  <c>An arbitrary collection of view parameters to pass along
                  to the view being rendered.</c>
                  <c>coordinates</c>
                  <c><xref target="gadgets.views.coordinates">Coordinate Object</xref></c>
                  <c>When viewTarget equals "FLOAT", the coordinates object
                  MAY be used to provide suggested positioning information
                  the container can use when deciding where, within the 
                  container, the view is to be renderered relative to the 
                  opening application.</c>
                </texttable>
              </t>
              
              <figure><preamble>For example, in the following sample, code 
              running with the default view opens the view named "foo" in 
              a modal dialog, passing along an arbitrary set of view parameters:</preamble>
              <artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="open-views"/&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        function bar() {
            gadgets.views.openGadget(
              function(result) {}, 
              function(id) {
                // id is the identifier of the dialog box
              }, 
              {
                viewTarget: "dialog",
                view: "foo",
                viewParams: {
                  "abc": "123",
                  "xyz": "foo"
                }
              }
            );
        }
      &lt;/script&gt;
        &lt;a href="#" onclick="bar()"&gt;Open!&lt;/a&gt;
    ]]&gt;&lt;/Content&gt;
    &lt;Content type="html" view="foo"&gt;&lt;![CDATA[
      ...
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
              </artwork></figure>
            </section>

            <section title="gadgets.views.openEmbeddedExperience" anchor="gadgets.views.openEmbeddedExperience">
            
              <t>The <spanx style="verb">gadgets.views.openEmbeddedExperience</spanx>
              method requests that an <xref target="Embedded-Experiences">embedded experience</xref>
              by rendered by the container.</t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.openEmbeddedExperience(resultCallback, navigateCallback, dataModel, opt_params)
              </artwork></figure>
             
              <t>The method accepts four parameters as input.
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>resultCallback</c>
                  <c>Function</c>
                  <c>Specifies a callback Function that will be invoked by the
                  container when the specified view has been closed using the 
                  <spanx style="verb">gadgets.views.close</spanx> method. If 
                  the <spanx style="verb">gadgets.views.setReturnValue</spanx> 
                  was called within the opened view, then the value specified
                  will be passed to the callback function as a parameter.</c>
                  <c>navigateCallback</c>
                  <c>Function</c>
                  <c>Specifies a callback Function that will be invoked by the 
                  container when the requested view has been rendered. The 
                  identifier the container assigns to the rendered view, 
                  along with any additional appropriate metadata will be passed
                  to the function as parameters. The identifier can be used 
                  with the <spanx style="verb">gadgets.views.close</spanx> method
                  to subsequently close the opened view.</c>
                  <c>dataModel</c>
                  <c></c>
                  <c>Specifies the Embedded Experiences Data model to use 
                  when rendering. The model is passed in as a JavaScript 
                  object conforming to the JSON embedded experiences format
                  as defined in <xref target="Embedded-Experiences"/>.</c>
                  <c>opt_params</c>
                  <c>Object</c>
                  <c>Specifies optional parameters that affect how the
                  view is to be rendered.</c>
                </texttable>              
              </t>
              
              <t>No return value is specified for the method.</t>

              <t>The following optional items MAY be specified as properties
              on the "opt_params" parameter value:
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>view</c>
                  <c>String </c>
                  <c>Identifies the specific view the container is to 
                  render. If not provided, the container will render the
                  default unnamed view.</c>
                  <c>viewTarget </c>
                  <c>String </c>
                  <c>Identifies where and how the container is to render the 
                  view, specified as a 
                  <xref target="gadgets.views.ViewType.ViewTarget">View Target</xref>.
                  For example, specifying a viewTarget of "modalDialog" will
                  cause the view to be rendered by the container in a modal
                  popup dialog box; whereas specifying a viewTarget of "tab"
                  will cause the container to render the view within a new 
                  container tab.</c>  
                  <c>viewParams</c>
                  <c>Object</c>
                  <c>An arbitrary collection of view parameters to pass along
                  to the view being rendered.</c>
                  <c>coordinates</c>
                  <c><xref target="gadgets.views.coordinates">Coordinate Object</xref></c>
                  <c>When viewTarget equals "FLOAT", the coordinates object
                  MAY be used to provide suggested positioning information
                  the container can use when deciding where, within the 
                  container, the view is to be renderered relative to the 
                  opening view.</c>
                </texttable>
              </t>
              
              <figure><preamble>For example, in the following sample, code 
              running with the default view opens a URL as an embedded 
              experience:</preamble>
              <artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="open-views"/&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        function bar() {
            gadgets.views.openEmbeddedExperience(
              function(result) {}, 
              function(id) {
                // id is the identifier of the dialog box
              }, 
              {
                "url" : "http://example.org/foo.html"
              }
            );
        }
      &lt;/script&gt;
        &lt;a href="#" onclick="bar()"&gt;Open!&lt;/a&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
              </artwork></figure>
              
              <t>TODO: This only works when EE container has been 
              properly initialized...</t>
                            
            </section>

            <section title="gadgets.views.openUrl" anchor="gadgets.views.openUrl">
            
              <t>The <spanx style="verb">gadgets.views.openUrl</spanx> method
              requests that a URL be opened and rendered by the container.</t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.openUrl(url, navigateCallback, opt_viewTarget)
              </artwork></figure>
             
              <t>The method accepts three parameters as input:
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>url</c>
                  <c>String</c>
                  <c>The URL of the web page whose content will be displayed.</c>
                  <c>navigateCallback</c>
                  <c>Function</c>
                  <c>Specifies a callback Function that will be invoked by the 
                  container when the requested view has been rendered. The 
                  identifier the container assigns to the rendered view, 
                  along with any additional appropriate metadata will be passed
                  to the function as parameters. The identifier can be used 
                  with the <spanx style="verb">gadgets.views.close</spanx> method
                  to subsequently close the opened view.</c>
                  <c>opt_viewTarget </c>
                  <c>String </c>
                  <c>Optionally identifies where and how the container is to render the 
                  view, specified as a <xref target="gadgets.views.ViewType.ViewTarget">View Target</xref>.
                  For example, specifying a viewTarget of "modalDialog" will
                  cause the URL to be rendered by the container within a modal
                  popup dialog box; whereas specifying a viewTarget of "tab"
                  will cause the container to render the URL within a new 
                  container tab.</c>
                </texttable>
              </t>
              
              <figure><preamble>For example:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="open-views"/&gt;
      &lt;Require feature="embedded-experiences" /&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        function bar() {
            gadgets.views.openUrl(
              "http://example.org/foo.html", 
              function(id) {
                // id is the identifier of the dialog box
              },
              "modaldialog"
            );
        }
      &lt;/script&gt;
        &lt;a href="#" onclick="bar()"&gt;Open!&lt;/a&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
              </artwork></figure>
              
            </section>

            <section title="gadgets.views.close" anchor="gadgets.views.close">
            
              <t>The <spanx style="verb">gadgets.views.close</spanx> method 
              requests that a given view be closed.</t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.close(opt_site_handler)
              </artwork></figure>
               
              <t>Parameters:
                <texttable align="left">
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  <c>opt_site_handler</c>
                  <c>Object</c>
                  <c>Optional parameter which specifies handler to what site 
                  to close. If null or unspecified, it will close the view 
                  within which the call to <spanx style="verb">gadgets.views.close</spanx>
                  was made.</c>
                </texttable>
              </t>
            </section>
            
            <section title="gadgets.views.setReturnValue" anchor="gadgets.views.setReturnValue">
      
              <t>Often, code running within one view will require the ability
              to programmatically open a second view for the purpose of 
              collecting input from the user. In such cases, the 
              <spanx style="verb">gadgets.views.setReturnValue</spanx> method
              can be used within the code of the second opened view to 
              specify the data that is to be returned to the first.</t>
      
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.views.setReturnValue(returnValue)
              </artwork></figure>
              
              <t>The method takes either a JavaScript primitive value, a
              JSON-serializable Object, or an Array of primitives or 
              JSON-serializable Objects as an input parameter. No return 
              value is specified for the method.</t>
              
              <figure><preamble>For example, in the following instance, code
              running within the default view opens a view named "foo" within
              a modal dialog and awaits a response. The value set using the 
              <spanx style="verb">gadgets.views.setReturnValue</spanx> 
              method is passed to the calling view via a callback function
              provided to the <spanx style="verb">gadgets.views.openGadget</spanx>
              method:</preamble><artwork>
  &lt;Module&gt;
    &lt;ModulePrefs&gt;
      &lt;Require feature="open-views"/&gt;
    &lt;/ModulePrefs&gt;
    &lt;Content type="html"&gt;&lt;![CDATA[
      &lt;script&gt;
        function bar() {
            gadgets.views.openGadget(
              function(returnValue) {
                alert(returnValue);
              }, 
              function() {}, 
              {
                viewTarget: "dialog",
                view: "foo"
              }
            );
        }
      &lt;/script&gt;
        &lt;a href="#" onclick="bar()"&gt;Open!&lt;/a&gt;
    ]]&gt;&lt;/Content&gt;
    &lt;Content type="html" view="foo"&gt;&lt;![CDATA[
      &lt;script&gt;
        function foo() {
          gadgets.views.setReturnValue({"a":"b"});
          gadgets.views.close();
        }
      &lt;/script&gt;
      &lt;a href="#" onclick="foo()"&gt;Close&lt;/a&gt;
    ]]&gt;&lt;/Content&gt;
  &lt;/Module&gt;
              </artwork></figure>
            </section>
            
            <section title="gadgets.window.getContainerDimensions" anchor="gadgets.window.getContainerDimensions">
            
              <t>The <spanx style="verb">gadgets.window.getContainerDimensions</spanx>
              method detects the height and width of the container 
              displaying the view and passes those to a provided 
              callback function.</t>
            
              <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.window.getContainerDimensions(resultCallback)
              </artwork></figure>
              
              <t>The method accepts as input a single Function object that will
              be invoked with a single JavaScript object parameter. The object
              will contain "height" and "width" properties whose numeric values
              specify the vertical and horizontal dimensions, in pixels, of the 
              container.</t>
            </section>
            
            <section title="The Coordinates Object" anchor="gadgets.views.coordinates">
            
              <t>When using the <spanx style="verb">gadgets.views.openGadget</spanx>,
              <spanx style="verb">gadgets.views.openEmbeddedExperience</spanx>, 
              or <spanx style="verb">gadgets.views.openUrl</spanx> methods, 
              developers can use the "opt_params" input parameter to provide the
              container with information about how and where the gadget, Embedded
              Experience or URL content is to be rendered.</t>
              
              <t>Within the "opt_params" object, when the "viewTarget" property
              is equal to the literal value "FLOAT", an additional optional 
              "coordinates" property can be specified to provide the specific
              preferred coordinates at which the floating content is to be 
              positioned. The value of the "coordinates" property is a JavaScript
              object with the following four properties:
              
                <texttable>
                  <ttcol>Name</ttcol>
                  <ttcol>Type</ttcol>
                  <ttcol>Description</ttcol>
                  
                  <c>top</c>
                  <c>Number</c>
                  <c>Specifies the suggested absolute top position, in pixels,
                  of the rendered content relative to the top position of the 
                  opening view. If "top" is specified, the "bottom" property
                  MUST NOT be specified.</c>
                  
                  <c>bottom</c>
                  <c>Number</c>
                  <c>Specifies the suggested absolute bottom position, in pixels,
                  of the rendered content relative to the bottom position of the 
                  opening view. If "bottom" is specified, the "top" property
                  MUST NOT be specified.</c>
                  
                  <c>left</c>
                  <c>Number</c>
                  <c>Specifies the suggested absolute left position, in pixels,
                  of the rendered content relative to the bottom position of the
                  opening view. If "left" is specified, the "right" property
                  MUST NOT be specified.</c>
                  
                  <c>right</c>
                  <c>Number</c>
                  <c>Specifies the suggested absolute right position, in pixels,
                  of the rendered content relative to the right position of the
                  opening view. If "right" is specified, the "left" property
                  MUST NOT be specified.</c>
                  
                </texttable>
                
                <t>Support for the "coordinates" property is only defined when
                the "viewTarget" property is equal to "FLOAT".</t>
              
                <figure><preamble>For example:</preamble><artwork>
  gadgets.views.openGadget(
    function(response) {},
    function(id) {},
    {
      "view": "foo",
      "viewTarget": "FLOAT",
      "coordinates": {
        "top": 10,
        "left": 20
      }
    }
  );
                </artwork></figure>
              
              </t>
            
            </section>
      
          </section>
        
        </section>

      </section>
      <!-- END VIEW FEATURES -->

   <section title="The Window Features" anchor="gadgets.window">
    
     <t>Window features are a range of additional capabilities that can 
     be enabled for an application for getting information about and modifying the
     display area for a view.</t>
     
     <section title="The &quot;settitle&quot; Feature">
     
       <t>The "settitle" feature allows an application to modify the displayed 
       title the container uses for the application instance. Whether or not
       the title is displayed is up to the container.</t>
       
       <t>The "settitle" feature is enabled by specifying feature="settitle"
       within either the &lt;Require&gt; or &lt;Optional&gt; element within 
       the &lt;ModulePrefs&gt;.</t>
       
       <figure><artwork>
  <Module>
    <ModulePrefs>
      <Require feature="settitle" />
    </ModulePrefs>
    <Content type="html"><![CDATA[
      gadgets.util.registerOnLoadHandler(
        function() {
          gadgets.window.setTitle("New Title");
        }
      );
    ]]></Content>
  </Module>
       </artwork></figure>
       
       <t>When the "settitle" feature is enabled for an application the
       <spanx style="verb">gadgets.window.setTitle</spanx> method is 
       provided:</t>
       
       <figure><artwork>
  &lt;static&gt; &gt;Void&gt; gadgets.window.setTitle(title)
       </artwork></figure>
       
       <t>The method takes a single String input parameter providing the 
       text to display as the title. No return value is specified.</t>
     </section>
     
     <section title="The &quot;dynamic-height&quot; Feature">

       <t>The "dynamic-height" feature allows an application to request that the 
       container dynamically change the vertical display area allocated to
       the view based on either the current content of the rendered View
       or an optionally provided numeric value that specifies the preferred
       height in pixels.</t>
       
       <t>The "dynamic-height" feature is enable by specifying feature="dynamic-height"
       within either the &lt;Require&gt; or &lt;Optional&gt; element within the
       &lt;ModulePrefs&gt;.</t>
       
       <figure><artwork>
  <Module>
    <ModulePrefs>
      <Require feature="dynamic-height" />
    </ModulePrefs>
    <Content type="html"><![CDATA[
      gadgets.util.registerOnLoadHandler(
        function() {
          for (var n = 0; n < 100; n++) {
            document.write("foo " + n + "<br />");
          }
          gadgets.window.adjustWidth();
        }
      );
    ]]></Content>
  </Module>
       </artwork></figure>
       
       <t>When the "dynamic-height" feature is enabled for an application, both the
       <spanx style="verb">gadgets.window.getViewportDimensions</spanx> and 
       <spanx style="verb">gadgets.window.adjustHeight</spanx> methods are 
       provided:</t>
       
       <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.window.adjustHeight(opt_height)
       </artwork></figure>
       
       <t>The method takes as input one optional numeric parameter that 
       specifies the preferred height, in pixels, the application would like
       the container to allocate for the view. The container is free
       to ignore the provided value. If not specified, the container will
       calculate an appropriate height for the view based on the content 
       currently displayed within the rendered view.</t>

     </section>

     <section title="The &quot;dynamic-width&quot; Feature">

       <t>The "dynamic-width" feature allows an application to request that the 
       container dynamically change the horizontal display area allocated to
       the view based on either the current content of the rendered View
       or an optionally provided numeric value that specifies the preferred
       width in pixels.</t>
       
       <t>The "dynamic-width" feature is enable by specifying feature="dynamic-width"
       within either the &lt;Require&gt; or &lt;Optional&gt; element within the
       &lt;ModulePrefs&gt;</t>
       
       <figure><artwork>
  <Module>
    <ModulePrefs>
      <Require feature="dynamic-width" />
    </ModulePrefs>
    <Content type="html"><![CDATA[
      gadgets.util.registerOnLoadHandler(
        function() {
          for (var n = 0; n < 100; n++) {
            document.write("foo&nbsp;");
          }
          gadgets.window.adjustWidth();
        }
      );
    ]]></Content>
  </Module>
       </artwork></figure>
       
       <t>When the "dynamic-width" feature is enabled for an application, both the
       <spanx style="verb">gadgets.window.getViewportDimensions</spanx> and 
       <spanx style="verb">gadgets.window.adjustWidth</spanx> methods are 
       provided:</t>
       
       <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.window.adjustWidth(opt_width)
       </artwork></figure>
       
       <t>The method takes as input one optional numeric parameter that 
       specifies the preferred width, in pixels, the application would like
       the container to allocate for the view. The container is free
       to ignore the provided value. If not specified, the container will
       calculate an appropriate width for the view based on the content 
       currently displayed within the rendered view.</t>

     </section>

     <section title="The &quot;dynamic-size&quot; Feature">

       <t>The "dynamic-size" feature allows an application to request that the 
       container dynamically change the vertical and horizontal display area 
       allocated to the view based on either the current content of the 
       rendered View or optionally provided numeric values that specify the 
       preferred height and width in pixels.</t>
       
       <t>The "dynamic-size" feature is enable by specifying feature="dynamic-size"
       within either the &lt;Require&gt; or &lt;Optional&gt; element within the
       &lt;ModulePrefs&gt;</t>
       
       <figure><artwork>
  <Module>
    <ModulePrefs>
      <Require feature="dynamic-size" />
    </ModulePrefs>
    <Content type="html"><![CDATA[
      gadgets.util.registerOnLoadHandler(
        function() {
          for (var n = 0; n < 100; n++) {
            document.write("foo&nbsp;");
          }
          gadgets.window.adjustSize();
        }
      );
    ]]></Content>
  </Module>
       </artwork></figure>
       
       <t>When the "dynamic-size" feature is enabled for an application, both the
       <spanx style="verb">gadgets.window.getViewportDimensions</spanx> and 
       <spanx style="verb">gadgets.window.adjustSize</spanx> methods are 
       provided:</t>
       
       <figure><artwork>
  &lt;static&gt; &lt;Void&gt; gadgets.window.adjustSize(opt_height, opt_width)
       </artwork></figure>
       
       <t>The method takes as input two optional numeric parameters that 
       specifies, respectively, the preferred height and width, in pixels, 
       the application would like the container to allocate for the view. The 
       container is free to ignore the provided values. If not specified, 
       the container will calculate appropriate values based on the content 
       currently displayed within the rendered view.</t>

     </section>

     <section title="gadgets.window.getViewportDimensions" anchor="gadgets.window.getViewportDimensions">
     
       <t>The <spanx style="verb">gadgets.window.getViewportDimensions</spanx>
       method detects and returns the height and width of area allocated by
       the container for the renderable content of the View.</t>
     
       <figure><artwork>
  &lt;static&gt; &lt;Object&gt; gadgets.window.getViewportDimensions()
       </artwork></figure>
       
       <t>The method takes no parameters as input and returns a single
       JavaScript object with "height" and "width" properties whose values
       specify the number of pixels allocated by the container for the 
       vertical and horizontal display area.</t>
       
     </section>

   </section>
   <!--  END WINDOW FEATURES -->


    </section>
    <!--  END RECOMMENDED FEATURES -->
    
    <!--section title="Optional Features">
    
      <t>Optional Features MAY be implemented by a container and
      made available to gadget instances that specify the feature
      ID using either the &lt;Require&gt; or &lt;Optional&gt; element in
      the &lt;ModulePrefs&gt;</t>
        
    </section-->

    
    <!--section title="Deprecated Features">
    
      <t>Deprecated Features SHOULD NOT be used by new gadget 
      specifications but MAY be implemented by a container to 
      provide backwards-compatible support for older, existing
      gadget specification documents. Such features are made 
      available to gadget instances that specify the feature ID
      using either the &lt;Require&gt; or &lt;Optional&gt; element
      in the &lt;ModulePrefs&gt;</t>
      
    </section-->
    
  </section>
  <!--  END FEATURES  -->
  
 </middle>
 <back>
  <references>
    &rfc2119;
    &rfc2606;
    &rfc2616;
    &rfc3986;
    &rfc3987;
    &rfc5849;
    &rfc5988;
    &rfc2617;
    &oauth2;
    &bearer;
    &mac;
    &infoset;
    &xmlbase;
    &relaxng;
    &jspel;
    &oahub;
    &opensocial;
    &coreapi;
    &socialapi;
    &templating;
  </references>
 </back>
</rfc>

