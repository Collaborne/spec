


Network Working Group
Internet-Draft                                                  May 2012
Expires: October 31, 2012

                OpenSocial Application Specification 3.0

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 31, 2012.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (http://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . . . .  5
     1.1.  Notation and Conventions . . . . . . . . . . . . . . . . .  6
     1.2.  Versioning . . . . . . . . . . . . . . . . . . . . . . . .  7
     1.3.  Application Roles  . . . . . . . . . . . . . . . . . . . .  9
   2.  The Application Specification Document . . . . . . . . . . . . 11
     2.1.  Conventions and Notes  . . . . . . . . . . . . . . . . . . 11
     2.2.  Document Structure . . . . . . . . . . . . . . . . . . . . 12
       2.2.1.  The <Module> Element . . . . . . . . . . . . . . . . . 12
       2.2.2.  The <ModulePrefs> Element  . . . . . . . . . . . . . . 12
       2.2.3.  The <Require> and <Optional> Elements  . . . . . . . . 14
         2.2.3.1.  The <Param> Element  . . . . . . . . . . . . . . . 16
       2.2.4.  The <Preload> Element  . . . . . . . . . . . . . . . . 17
       2.2.5.  The <Link> Element . . . . . . . . . . . . . . . . . . 18

(surname)               Expires October 31, 2012                [Page 1]

Internet-Draft                Core-Gadget                       May 2012

       2.2.6.  The <Locale> Element . . . . . . . . . . . . . . . . . 19
       2.2.7.  The <OAuth> Element  . . . . . . . . . . . . . . . . . 21
       2.2.8.  The <OAuth2> Element . . . . . . . . . . . . . . . . . 23
       2.2.9.  The <UserPref> Element . . . . . . . . . . . . . . . . 25
         2.2.9.1.  User Preference Data Types . . . . . . . . . . . . 27
       2.2.10. The <Data> Element . . . . . . . . . . . . . . . . . . 28
       2.2.11. The <ExternalServices> Element . . . . . . . . . . . . 28
       2.2.12. The <Content> Element  . . . . . . . . . . . . . . . . 30
         2.2.12.1.  Processing Model  . . . . . . . . . . . . . . . . 32
           2.2.12.1.1.  HTML Content  . . . . . . . . . . . . . . . . 35
           2.2.12.1.2.  Proxied Content . . . . . . . . . . . . . . . 36
           2.2.12.1.3.  Redirected Content  . . . . . . . . . . . . . 37
           2.2.12.1.4.  Authentication for Proxied and Redirected
                        Content . . . . . . . . . . . . . . . . . . . 38
       2.2.13. Extensibility  . . . . . . . . . . . . . . . . . . . . 40
   3.  Container-Provided Capabilities  . . . . . . . . . . . . . . . 41
     3.1.  Authentication . . . . . . . . . . . . . . . . . . . . . . 41
       3.1.1.  Signed Fetch . . . . . . . . . . . . . . . . . . . . . 42
         3.1.1.1.  Using Signed Fetch . . . . . . . . . . . . . . . . 45
       3.1.2.  OAuth Support  . . . . . . . . . . . . . . . . . . . . 46
         3.1.2.1.  Declaring and Using OAuth Services . . . . . . . . 47
           3.1.2.1.1.  The "OAUTH_USE_TOKEN" parameter  . . . . . . . 57
         3.1.2.2.  Processing Model . . . . . . . . . . . . . . . . . 57
           3.1.2.2.1.  Acquiring Access Tokens  . . . . . . . . . . . 58
           3.1.2.2.2.  Sending OAuth 2.0 Protected Requests . . . . . 59
           3.1.2.2.3.  401 Unauthorized Responses . . . . . . . . . . 60
     3.2.  Caching  . . . . . . . . . . . . . . . . . . . . . . . . . 61
     3.3.  Variable Substitution  . . . . . . . . . . . . . . . . . . 63
       3.3.1.  Using Literal Statements . . . . . . . . . . . . . . . 64
       3.3.2.  Using Data Pipeline Variables  . . . . . . . . . . . . 64
       3.3.3.  Using Reserved Variable Keys . . . . . . . . . . . . . 65
       3.3.4.  Deprecated Expression Syntax . . . . . . . . . . . . . 67
       3.3.5.  Processing Requirements  . . . . . . . . . . . . . . . 69
     3.4.  Localization . . . . . . . . . . . . . . . . . . . . . . . 70
       3.4.1.  Considerations for Bidirectional Text  . . . . . . . . 71
       3.4.2.  Message Bundle Documents . . . . . . . . . . . . . . . 72
     3.5.  Application Lifecycle Events . . . . . . . . . . . . . . . 73
       3.5.1.  Lifecycle Event Notifications  . . . . . . . . . . . . 80
       3.5.2.  Legacy Support . . . . . . . . . . . . . . . . . . . . 81
     3.6.  Data Pipelining  . . . . . . . . . . . . . . . . . . . . . 82
       3.6.1.  The DataContext  . . . . . . . . . . . . . . . . . . . 83
       3.6.2.  Data Pipeline Elements and the Data Block  . . . . . . 83
       3.6.3.  Data Pipeline Elements within HTML Content . . . . . . 84
       3.6.4.  Data Pipeline Elements and Proxied Content . . . . . . 85
       3.6.5.  The Data Pipeline Elements . . . . . . . . . . . . . . 88
         3.6.5.1.  The <os:DataRequest> Element . . . . . . . . . . . 89
         3.6.5.2.  The <os:HttpRequest> Element . . . . . . . . . . . 90
         3.6.5.3.  The <os:Var> Element . . . . . . . . . . . . . . . 92
         3.6.5.4.  Expression Statements within Data Pipeline Attribute 93
   4.  Container-Provided Features  . . . . . . . . . . . . . . . . . 94
     4.1.  Core Features  . . . . . . . . . . . . . . . . . . . . . . 94
       4.1.1.  The Logging Feature  . . . . . . . . . . . . . . . . . 95
         4.1.1.1.  JavaScript API . . . . . . . . . . . . . . . . . . 95
           4.1.1.1.1.  gadgets.log  . . . . . . . . . . . . . . . . . 95
           4.1.1.1.2.  gadgets.warn . . . . . . . . . . . . . . . . . 95
           4.1.1.1.3.  gadgets.error  . . . . . . . . . . . . . . . . 96

(surname)               Expires October 31, 2012                [Page 2]

Internet-Draft                Core-Gadget                       May 2012

           4.1.1.1.4.  gadgets.setLogLevel  . . . . . . . . . . . . . 96
       4.1.2.  The IO Feature . . . . . . . . . . . . . . . . . . . . 97
         4.1.2.1.  JavaScript API . . . . . . . . . . . . . . . . . . 97
           4.1.2.1.1.  gadgets.io.encodeValues  . . . . . . . . . . . 97
           4.1.2.1.2.  gadgets.io.getProxyUrl . . . . . . . . . . . . 98
           4.1.2.1.3.  gadgets.io.makeRequest . . . . . . . . . . . . 99
             4.1.2.1.3.1.  The callback parameter and the Response
                           Object . . . . . . . . . . . . . . . . .  110
       4.1.3.  The JSON Feature . . . . . . . . . . . . . . . . . .  112
         4.1.3.1.  JavaScript API . . . . . . . . . . . . . . . . .  112
           4.1.3.1.1.  gadgets.json.parse . . . . . . . . . . . . .  112
           4.1.3.1.2.  gadgets.json.stringify . . . . . . . . . . .  113
       4.1.4.  The User Preferences Feature . . . . . . . . . . . .  113
         4.1.4.1.  JavaScript API . . . . . . . . . . . . . . . . .  113
           4.1.4.1.1.  The gadgets.Prefs Object . . . . . . . . . .  113
             4.1.4.1.1.1.  gadgets.Prefs.getArray . . . . . . . . .  114
             4.1.4.1.1.2.  gadgets.Prefs.getBool  . . . . . . . . .  114
             4.1.4.1.1.3.  gadgets.Prefs.getCountry . . . . . . . .  115
             4.1.4.1.1.4.  gadgets.Prefs.getFloat . . . . . . . . .  115
             4.1.4.1.1.5.  gadgets.Prefs.getInt . . . . . . . . . .  115
             4.1.4.1.1.6.  gadgets.Prefs.getLang  . . . . . . . . .  115
             4.1.4.1.1.7.  gadgets.Prefs.getModuleId  . . . . . . .  116
             4.1.4.1.1.8.  gadgets.Prefs.getMsg . . . . . . . . . .  116
             4.1.4.1.1.9.  gadgets.Prefs.getString  . . . . . . . .  116
         4.1.4.2.  The "setprefs" Feature . . . . . . . . . . . . .  117
           4.1.4.2.1.  JavaScript API . . . . . . . . . . . . . . .  117
             4.1.4.2.1.1.  gadgets.Prefs.set  . . . . . . . . . . .  117
             4.1.4.2.1.2.  gadgets.Prefs.setArray . . . . . . . . .  117
       4.1.5.  The Utility Feature  . . . . . . . . . . . . . . . .  118
         4.1.5.1.  JavaScript API . . . . . . . . . . . . . . . . .  118
           4.1.5.1.1.  gadgets.util.escapeString  . . . . . . . . .  118
           4.1.5.1.2.  gadgets.util.getFeatureParameters  . . . . .  118
           4.1.5.1.3.  gadgets.util.hasFeature  . . . . . . . . . .  119
           4.1.5.1.4.  gadgets.util.registerOnLoadHandler . . . . .  119
           4.1.5.1.5.  gadgets.util.sanitizeHtml  . . . . . . . . .  119
           4.1.5.1.6.  gadgets.util.unescapeString  . . . . . . . .  120
     4.2.  Recommended Features . . . . . . . . . . . . . . . . . .  120
       4.2.1.  The Action Contributions Feature . . . . . . . . . .  120
         4.2.1.1.  The <action> Element . . . . . . . . . . . . . .  123
         4.2.1.2.  Action Contribution Paths  . . . . . . . . . . .  125
         4.2.1.3.  JavaScript API . . . . . . . . . . . . . . . . .  126
           4.2.1.3.1.  The Action Object  . . . . . . . . . . . . .  126
           4.2.1.3.2.  gadgets.actions.addAction  . . . . . . . . .  126
           4.2.1.3.3.  gadgets.actions.updateAction . . . . . . . .  127
           4.2.1.3.4.  gadgets.actions.removeAction . . . . . . . .  128
           4.2.1.3.5.  gadgets.actions.getActionsByPath . . . . . .  128
           4.2.1.3.6.  gadgets.actions.getActionsByDataType . . . .  129
           4.2.1.3.7.  gadgets.actions.runAction  . . . . . . . . .  129
           4.2.1.3.8.  gadgets.actions.registerShowActionsListener   130
           4.2.1.3.9.  gadgets.actions.registerHideActionsListener   130
       4.2.2.  The Content Rewriting Feature  . . . . . . . . . . .  131
       4.2.3.  The DataContext Feature  . . . . . . . . . . . . . .  133
         4.2.3.1.  JavaScript API . . . . . . . . . . . . . . . . .  134
           4.2.3.1.1.  opensocial.data.getContext . . . . . . . . .  134
           4.2.3.1.2.  The DataContext Object . . . . . . . . . . .  134
             4.2.3.1.2.1.  opensocial.data.DataContext.getDataSet .  134

(surname)               Expires October 31, 2012                [Page 3]

Internet-Draft                Core-Gadget                       May 2012

             4.2.3.1.2.2.  opensocial.data.DataContext.putDataSet .  134
             4.2.3.1.2.3.  opensocial.data.DataContext.putDataSets   135
             4.2.3.1.2.4.  opensocial.data.DataContext.registerListe 135
       4.2.4.  The Embedded Experiences Feature . . . . . . . . . .  136
         4.2.4.1.  Additional Examples  . . . . . . . . . . . . . .  138
         4.2.4.2.  Considerations for Embedded Gadgets  . . . . . .  139
           4.2.4.2.1.  The "embedded" View  . . . . . . . . . . . .  139
           4.2.4.2.2.  Accessing The Context  . . . . . . . . . . .  139
             4.2.4.2.2.1.  Additional Container Specific Context  .  140
         4.2.4.3.  Preferred Experiences  . . . . . . . . . . . . .  141
           4.2.4.3.1.  Display Types  . . . . . . . . . . . . . . .  143
           4.2.4.3.2.  Target Types . . . . . . . . . . . . . . . .  144
         4.2.4.4.  Security . . . . . . . . . . . . . . . . . . . .  146
         4.2.4.5.  Embedded Experiences within Activity Streams . .  146
         4.2.4.6.  Embedded Experiences within Email  . . . . . . .  147
       4.2.5.  The Flash Feature  . . . . . . . . . . . . . . . . .  148
         4.2.5.1.  JavaScript API . . . . . . . . . . . . . . . . .  149
           4.2.5.1.1.  gadgets.flash.embedCachedFlash . . . . . . .  149
           4.2.5.1.2.  gadgets.flash.embedFlash . . . . . . . . . .  150
           4.2.5.1.3.  gadgets.flash.getMajorVersion  . . . . . . .  150
       4.2.6.  The JavaScript Internationalization (i18n) Feature .  150
         4.2.6.1.  Specifying Format and Parsing Patterns . . . . .  151
           4.2.6.1.1.  Date/Time Pattern Specification  . . . . . .  151
           4.2.6.1.2.  Number Pattern Specification . . . . . . . .  152
         4.2.6.2.  JavaScript API . . . . . . . . . . . . . . . . .  152
           4.2.6.2.1.  Predefined Format Constants  . . . . . . . .  152
           4.2.6.2.2.  gadgets.i18n.formatDateTime  . . . . . . . .  153
           4.2.6.2.3.  gadgets.i18n.formatNumber  . . . . . . . . .  154
           4.2.6.2.4.  gadgets.i18n.parseDateTime . . . . . . . . .  155
           4.2.6.2.5.  gadgets.i18n.parseNumber . . . . . . . . . .  156
       4.2.7.  The MiniMessage Feature  . . . . . . . . . . . . . .  157
         4.2.7.1.  JavaScript API . . . . . . . . . . . . . . . . .  159
           4.2.7.1.1.  The gadgets.MiniMessage Object . . . . . . .  159
             4.2.7.1.1.1.  gadgets.MiniMessage.createDismissibleMess 160
             4.2.7.1.1.2.  gadgets.MiniMessage.createStaticMessage   161
             4.2.7.1.1.3.  gadgets.MiniMessage.createTimerMessage .  161
             4.2.7.1.1.4.  gadgets.MiniMessage.dismissMessage . . .  161
       4.2.8.  The OAuth Popup Feature  . . . . . . . . . . . . . .  162
         4.2.8.1.  JavaScript API . . . . . . . . . . . . . . . . .  164
           4.2.8.1.1.  The gadgets.oauth.Popup Object . . . . . . .  164
             4.2.8.1.1.1.  gadgets.oauth.Popup.createOpenerOnClick   164
             4.2.8.1.1.2.  gadgets.oauth.Popup.createApprovedOnClick 165
       4.2.9.  The OpenSearch Feature . . . . . . . . . . . . . . .  165
       4.2.10. The OpenSocial API (osapi) Feature . . . . . . . . .  166
         4.2.10.1.  JavaScript API  . . . . . . . . . . . . . . . .  167
           4.2.10.1.1.  The osapi.Request Object  . . . . . . . . .  169
             4.2.10.1.1.1.  osapi.Request.execute . . . . . . . . .  169
           4.2.10.1.2.  The osapi.BatchRequest Object . . . . . . .  170
             4.2.10.1.2.1.  osapi.BatchRequest.add  . . . . . . . .  170
             4.2.10.1.2.2.  osapi.BatchRequest.execute  . . . . . .  171
           4.2.10.1.3.  Error Handling  . . . . . . . . . . . . . .  172
           4.2.10.1.4.  The osapi.http Service Object . . . . . . .  172
             4.2.10.1.4.1.  The HTTP Request Parameters Object  . .  173
             4.2.10.1.4.2.  Processing osapi.http Requests  . . . .  178
             4.2.10.1.4.3.  The HTTP Response Object  . . . . . . .  180
       4.2.11. The PubSub Feature . . . . . . . . . . . . . . . . .  180

(surname)               Expires October 31, 2012                [Page 4]

Internet-Draft                Core-Gadget                       May 2012

         4.2.11.1.  Initializing the Hub within the Container . . .  181
         4.2.11.2.  Examples  . . . . . . . . . . . . . . . . . . .  182
         4.2.11.3.  JavaScript API  . . . . . . . . . . . . . . . .  184
           4.2.11.3.1.  The gadgets.Hub Object  . . . . . . . . . .  184
             4.2.11.3.1.1.  gadgets.Hub.publish . . . . . . . . . .  184
             4.2.11.3.1.2.  gadgets.Hub.subscribe . . . . . . . . .  185
             4.2.11.3.1.3.  gadgets.Hub.unsubscribe . . . . . . . .  186
             4.2.11.3.1.4.  Additional Methods  . . . . . . . . . .  187
         4.2.11.4.  The <Topic> Element . . . . . . . . . . . . . .  187
           4.2.11.4.1.  Event Data Types  . . . . . . . . . . . . .  190
       4.2.12. The Security Policy Feature  . . . . . . . . . . . .  192
       4.2.13. The Selection Feature  . . . . . . . . . . . . . . .  192
         4.2.13.1.  JavaScript API  . . . . . . . . . . . . . . . .  193
           4.2.13.1.1.  The Selection Object  . . . . . . . . . . .  193
           4.2.13.1.2.  gadgets.selection.setSelection  . . . . . .  194
           4.2.13.1.3.  gadgets.selection.getSelection  . . . . . .  194
           4.2.13.1.4.  gadgets.selection.addListener . . . . . . .  195
           4.2.13.1.5.  removeListener  . . . . . . . . . . . . . .  195
       4.2.14. The View Features  . . . . . . . . . . . . . . . . .  195
         4.2.14.1.  The "views" Feature . . . . . . . . . . . . . .  196
           4.2.14.1.1.  JavaScript API  . . . . . . . . . . . . . .  196
             4.2.14.1.1.1.  The gadgets.views.ViewType Constants  .  196
             4.2.14.1.1.2.  View Targets  . . . . . . . . . . . . .  196
             4.2.14.1.1.3.  The gadgets.views.View Object . . . . .  199
               4.2.14.1.1.3.1.  gadgets.views.View.getName  . . . .  199
               4.2.14.1.1.3.2.  gadgets.views.View.isOnlyVisibleGadg 199
             4.2.14.1.1.4.  gadgets.views.getCurrentView  . . . . .  199
             4.2.14.1.1.5.  gadgets.views.getParams . . . . . . . .  199
             4.2.14.1.1.6.  gadgets.views.getSupportedViews . . . .  199
             4.2.14.1.1.7.  gadgets.views.requestNavigateTo . . . .  200
         4.2.14.2.  The "open-views" Feature  . . . . . . . . . . .  200
           4.2.14.2.1.  JavaScript API  . . . . . . . . . . . . . .  200
             4.2.14.2.1.1.  gadgets.views.openGadget  . . . . . . .  200
             4.2.14.2.1.2.  gadgets.views.openEmbeddedExperience  .  203
             4.2.14.2.1.3.  gadgets.views.openUrl . . . . . . . . .  206
             4.2.14.2.1.4.  gadgets.views.close . . . . . . . . . .  207
             4.2.14.2.1.5.  gadgets.views.setReturnValue  . . . . .  208
             4.2.14.2.1.6.  gadgets.window.getContainerDimensions .  209
             4.2.14.2.1.7.  The Coordinates Object  . . . . . . . .  209
       4.2.15. The Window Features  . . . . . . . . . . . . . . . .  210
         4.2.15.1.  The "settitle" Feature  . . . . . . . . . . . .  211
         4.2.15.2.  The "dynamic-height" Feature  . . . . . . . . .  211
         4.2.15.3.  The "dynamic-width" Feature . . . . . . . . . .  212
         4.2.15.4.  The "dynamic-size" Feature  . . . . . . . . . .  213
         4.2.15.5.  gadgets.window.getViewportDimensions  . . . . .  214
   5.  References . . . . . . . . . . . . . . . . . . . . . . . . .  214
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . .  216

1.  Overview

   OpenSocial Applications are Web-based software components that are






(surname)               Expires October 31, 2012                [Page 5]

Internet-Draft                Core-Gadget                       May 2012

   based on HTML, CSS and JavaScript.  Such applications can be used
   independently or composed together in a variety of ways.  For
   instance, several individual applications can be embedded within a
   single Web page and can either operate independently of one another
   or can interact and communicate with each other.

   Each OpenSocial Application is defined by a declarative XML syntax
   known commonly as an "Application Specification".  These documents
   contain the meta-data, content and code necessary for the application
   to function.  It is the responsibility of an OpenSocial Application
   Container to parse and process specification documents in order to
   render the application's content for a user.  In the course of doing
   so, containers provide a range of capabilities and features the
   application can leverage.  Examples of such capabilities include
   providing access to data, facilitating communication with other
   applications, or allowing an application to extend the capabilities
   of the container itself.

   This specification describes the XML-document format used to define
   OpenSocial Applications as well as the capabilities and core features
   provided to application instances by the container.

1.1.  Notation and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   Domain name examples use RFC2606 [RFC2606].

   Some sections of this specification are illustrated with fragments of
   a Augmented Backus-Naur Form [RFC5234] (ABNF) grammar.  The rules
   specified are normative.

   The following core rules are included by reference, as defined in
   [RFC5234], Appendix B.1: ALPHA (letters), DIGIT (decimal 0-9), HTAB
   (horizontal tab), and SP (space).

   The following additional ABNF rules are defined:

   OWS = *( SP / HTAB )

   Some sections of this specification are illustrated with fragments of
   a non-normative RELAX-NG Compact Schema [RNC].  However, the text of
   the specification provides the definition of conformance.  In several
   cases, portions of the non-normative RELAX-NG schema will reference
   ABNF rules.

   For example, the following example ABNF rule:






(surname)               Expires October 31, 2012                [Page 6]

Internet-Draft                Core-Gadget                       May 2012

   abc = "a" "b" "c"

   Can be referenced within the RELAX-NG schema fragment to define the
   acceptable value of an XML attribute:

   foo = element foo {
     attribute a { abc }?
   }

   Within the RELAX-NG grammar, the rules "undefinedAttribute" and
   "extensionElement" are defined as follows:

     namespace local = ""
   
     undefinedAttribute =
       attribute * - (xml:base | xml:lang) { text }
   
     anyElement =
       element * {
         (attribute * { text }
          | text
          | anyElement)*
         }
   
     simpleExtensionElement =
       element * {
         text
       }
   
     structuredExtensionElement =
       element * {
         (attribute * { text }+,
         (text|anyElement)*)
         | (attribute * { text }*,
         (text?, anyElement+, (text|anyElement)*))
       }
   
     extensionElement =
       simpleExtensionElement |
       structuredExtensionElement

   This specification allows the use of IRIs [RFC3987].  Every URI
   [RFC3986] is also an IRI, so a URI may be used wherever an IRI is
   named.  There are two special considerations: (1) when an IRI that is
   not also a URI is given for dereferencing, it MUST be mapped to a URI
   using the steps in Section 3.1 of RFC 3987.  and (2) when an IRI is
   serving as an identifier, it MUST NOT be so mapped.

1.2.  Versioning






(surname)               Expires October 31, 2012                [Page 7]

Internet-Draft                Core-Gadget                       May 2012


   Both the overall OpenSocial specification and individual features are
   versioned.  Application specification documents SHOULD specify the
   version of the OpenSocial specification to which they conform by
   including the "specificationVersion" attribute on the root <Module>
   element, as well as the versions of any optional or required features
   used by including the "version" attribute on <Require> and <Optional>
   elements.

   Version identifiers are composed of a series of up to three non-
   negative integers separated by the dot (.) character.  For example,
   "1.0.0", "1.2.1", etc.

     major = 1*DIGIT
     minor = 1*DIGIT
     patch = 1*DIGIT
   
     version = major [ "." minor [ "." patch ] ]

   The first number in the sequence represents a "major version".
   Changes in the major version signify possible backward-incompatible
   changes from previous versions.  For instance, when the methods are
   removed from the JavaScript API provided by a feature, or when the
   definitions of XML elements or attributes used within an application
   specification document are changed, or when the processing
   requirements for any feature or capability are modified, the major
   version MUST be incremented.

   The second number in the sequence is a "minor version" that is
   interpreted relative to the preceding major version number.  When the
   major version is incremented, the "minor version" MUST be reset to 0.
   Changes in the minor version signify backward-compatible but forward-
   incompatible changes from previous versions.  For example, when new
   methods are added to the JavaScript API provided by a feature, or
   when new elements or attributes are added to the application
   specification document format, the minor version SHOULD be
   incremented and the major version SHOULD NOT be incremented.

   The third and final number in the sequence is the "patch version"
   that is interpreted relative to the preceding minor version.  When
   the minor version is incremented, the "patch version" MUST be reset
   to 0. Changes in the patch version signify changes that are both
   backward- and forward- compatible with previous versions.  For
   example, when making minor clarifications, fixing errors in the
   description of a method or element, or making other small changes
   that neither affect existing functionality or introduce new
   functionality that would be incompatible with existing versions, the
   patch version MUST be incremented but the minor and major versions
   SHOULD NOT change.






(surname)               Expires October 31, 2012                [Page 8]

Internet-Draft                Core-Gadget                       May 2012


   Version identifiers are hierarchical and can either reference a
   specific individual version by specifying all three elements (e.g.
   "1.2.3") or can identify all versions at a particular major or minor
   level.  For instance, the identifier "2.4" would apply to all
   combinations of versions specifying a major version of "2" and a
   minor version of "4" (e.g.  "2.4", "2.4.0", "2.4.1", "2.4.2", and so
   on) but not any other minor version (e.g.  "2.3", "2.5.2", etc).

   When processing application specification documents and determining
   the appropriate method of processing the application itself as well
   as determining the correct features to enable, containers are
   required to appropriately match the version identifiers specified
   within the application specification to those provided by the
   container.  For instance, if the application requires version "2.3"
   of a particular feature, the container MUST provide an implementation
   of the feature whose version matches the given major and minor value
   (e.g.  "2.3.1", "2.3.2", etc).

   It is RECOMMENDED that developers specify the most general version
   that will satisfy the requirements of the application.  Usually,
   major and minor versions will suffice.  The patch version MAY be
   omitted from application specification documents.

   When a version identifier is omitted from various locations within
   the application specification, the value is assumed to be "1.0".  As
   described above, this value will match any version beginning with
   "1.0", including 1.0.0, 1.0.1, 1.0.22, etc., but not 1.1.0, 2.0.0,
   etc.  This default value will not change in future versions of the
   specification, ensuring that Applications that omit these values will
   not have sudden, unexpected changes in behavior when containers adopt
   new versions of the OpenSocial specification or features.

1.3.  Application Roles

   Before developing OpenSocial applications it is important to
   understand the roles and relationships between the various key
   elements.

   The basic elements of an OpenSocial application are:

   Application A reusable software component, defined using the syntax
      established by this document, that can be generally deployed and
      utilized across multiple OpenSocial implementations.

   Source The entity from which the application originated.  This may be
      the author of the application or a company that publishes the
      application, etc.

   Instance A specific instance of an Application that has been
      provisioned for use by one or more users within a given context or
      for a specific purpose.



(surname)               Expires October 31, 2012                [Page 9]

Internet-Draft                Core-Gadget                       May 2012


   Context The context within which an application instance is being
      used.  For instance, a website that represents a work project
      might utilize an instance of an application that lists the names
      of everyone involved with the project.  The "Context" within which
      the application instance is being used is the work project.

   Container Is the software component that is directly responsible for
      hosting and managing instances of one or more applications within
      their respective contexts.

   Viewer Is the entity that is currently interacting with the instance
      of an application within a given context.

   Instance Owner Is the entity that is responsible for the application
      instance.

   Context Owner Is the entity that is responsible for the context
      within which an application instance is being used.

   To understand the relationships between each of these elements,
   consider the following example scenario:

   o  A company deploys an internal project management system that is to
      be used by multiple teams to manage individual projects.

   o  Each project within this system is "owned" by a single individual
      project manager, and is worked on by any number of other people.

   o  When a project is created, the project manager creates a webpage
      representing the project and selects the members of the project.

   o  On each project page, the application automatically creates an
      instance of two separate application components: one that lists
      the names of the current members of the project and another that
      lists the current schedule and master task list for the entire
      project.

   o  When each project member views the page, they are asked to login
      and are given the opportunity to customize the page by selecting
      from a list of available application components that will display
      information relevant to their participation in the project.
      Examples include a component that lists only the current task
      items assigned to them; or a component that shows the most recent
      tasks completed by other users.

   Within this scenario:








(surname)               Expires October 31, 2012               [Page 10]

Internet-Draft                Core-Gadget                       May 2012

   o  The project management system is the Container;

   o  Each individual project is a Context;

   o  The project manager is the Context Owner;

   o  Each of the components added to each project's page is an
      individual Instance of an Application;

   o  For the components that list the project members and master task
      list, the project manager is the Instance Owner;

   o  For each of the components added to the page by individual project
      members, the Instance Owner is the user that added it to the page;

   o  When a user logs in to view a project's page, they are the current
      Viewer.

   Each instance of an Application will be generally configurable only
   by the Instance or Context Owner.  That is, while the instance can
   store and access information about the current Viewer, the Viewer
   typically is not permitted to modify configuration options that
   affect the operation of the application unless the Viewer happens to
   also be the owner of the Instance or the Context.

   Further, when an Application requires access to secure or private
   data hosted by the container or a third party, authentication and
   authorization might be required for not only the current viewer, but
   also for the Application Instance, Context and Application Source.
   That is, containers MUST NOT assume that simply because a particular
   Viewer has been authorized to access some secure piece of data within
   one Application Instance, that the same authorization applies to all
   instances of that same Application, or Instances of other
   Applications that happen to be used by the same Viewer.

2.  The Application Specification Document

   An OpenSocial Application Specification is an XML document that
   contains the meta-data and content for an application.

2.1.  Conventions and Notes

   The document format is specified in terms from the XML Infoset  [W3C
   .REC-xml-infoset-20040204].  However, this specification uses the
   term "element" when referring to "Element Information Items" as
   defined by the XML Infoset specification, and the term "attribute"
   when referring to "Attribute Information Items".

   Currently, no XML Namespace is defined for any of the elements
   defined by this specification.  Neither is there a MIME Media Type





(surname)               Expires October 31, 2012               [Page 11]

Internet-Draft                Core-Gadget                       May 2012

   specific for Gadget Specification Documents.

   All relative IRI and URI references contained within the Application
   Specification document, including those contained within the the
   textual content of <Content> elements, are relative to the
   Application Specification Document's URL as known by the container.

2.2.  Document Structure

2.2.1.  The <Module> Element

   The root of the Application Specification Document is the <Module>
   element.  At a minimum, it's children MUST consist of no more than
   one <ModulePrefs> element, no more than one <UserPref> element, and
   one or more <Content> elements.

   Module = element Module {
     attribute specificationVersion { version }?,
     undefinedAttribute*,
     ModulePrefs?,
     UserPref*,
     Content+,
     extensionElement*
   }

   The "specificationVersion" attribute identifies the version of the
   OpenSocial specification the container MUST use to process and render
   the Application Specification.  The value is a string conforming to
   the version identifier described in Section 1.2. If absent, the
   default value is assumed to be "1.0".

   Text nodes included as children of the <Module> element will be
   ignored by the container.

   The <Module> element MAY contain an "xml:base" attribute as specified
   by [W3C.REC-xmlbase-20090128] whose value establishes a base for all
   relative IRI's and URI's contained within the specification document.
   If specified, containers are required to use the base to resolve all
   relative IRI and URI references.

2.2.2.  The <ModulePrefs> Element

   The <ModulePrefs> element serves as a container for all metadata,












(surname)               Expires October 31, 2012               [Page 12]

Internet-Draft                Core-Gadget                       May 2012

   features and processing rules dealing with the application.  The
   children of the element consist of a variety of optional attributes
   and elements.

   ModulePrefs = element ModulePrefs {
     attribute title { text }?,
     attribute title_url { IRI }?,
     attribute description { text }?,
     attribute author { text }?,
     attribute author_email { text }?,
     attribute screenshot { IRI }?,
     attribute thumbnail { IRI }?,
     attribute height { text }?,
     attribute width { text }?,
     attribute doctype { "quirksmode" | text },
     undefinedAttribute*,
     (Require*
      & Optional*
      & Preload*
      & Icon*
      & Locale*
      & Link*
      & OAuth?
      & OAuth2?,
      extensionElement*)
   }

   The <ModulePrefs> element MAY contain zero or more <Require>,
   <Optional>, <Preload>, <Icon>, <Locale> and <Link> elements and MAY
   contain no more than one each of the <OAuth> and <OAuth2> elements.

   The "title" attribute specifies the application's title.  If
   provided, a container SHOULD use this value in any situation where a
   title bar or other identifying name is required.  The value MAY be
   localized as described in Section 3.4.

   If provided, containers SHOULD use the value of the "title_url"
   attribute to provide a link target whenever the value of the "title"
   attribute is displayed.

   The "description" attribute provides an optional, human-readable
   description of the application.  The value MAY be localized as
   described in Section 3.4.

   The "author" attribute optionally provides the name of the author of
   the application.

   The "author_email" attribute optionally provides an email address to
   serve as a point of contact for the author of the application.






(surname)               Expires October 31, 2012               [Page 13]

Internet-Draft                Core-Gadget                       May 2012


   The "screenshot" attribute provides an optional IRI of a visual
   representation of the application.  Typically such images depict an
   image of the application that reflects a typical user's experience.
   The referenced resource MUST be an image on a publicly-accessible web
   site that is not blocked by a robots.txt file.  The preferred format
   is PNG, though GIF and JPG are also acceptable.  Gadget screenshots
   SHOULD be 280 pixels wide.  The height of the screenshot SHOULD be
   the "natural" height of the application, in pixels, when it is in
   use.

   The "thumbnail" attribute provides an optional IRI of a smaller
   visual representation of the application.  The referenced resource
   MUST be an image on a publicly-accessible web site that is not
   blocked by a robots.txt file.  The preferred format is PNG, though
   GIF and JPG are also acceptable.  Thumbnails SHOULD be 120x60 pixels
   and SHOULD be smaller than images referenced using the "screenshot"
   attribute but larger than any images linked to using <Link> elements
   that specify "rel="icon"".

   The optional "height" and "width" attributes respectively define, in
   pixels, the preferred default display height and width of the
   application.  Container's SHOULD use these values when establishing
   the appropriate display dimensions for the application.

   The optional "doctype" attribute is a string that identifies the
   preferred rendering model for the application.  When set to the
   literal value "quirksmode", the application SHOULD be rendered using
   the so-called "browser quirks mode".  Additional values MAY be used
   to support other rendering modes but only "quirksmode" is defined by
   this specification.

2.2.3.  The <Require> and <Optional> Elements

   The <Require> and <Optional> elements share a common structure and
   are each used to declare OpenSocial features that are either required
   or optional for the application to operate.  Each element consists of
   a feature identifier, a version, a list of specific application views
   the feature dependency applies to, and zero or more <Param> elements
   that provide specific feature-dependent detail.















(surname)               Expires October 31, 2012               [Page 14]

Internet-Draft                Core-Gadget                       May 2012


     Param = element Param {
       attribute name { text },
       undefinedAttribute*,
       text?
     }
   
     dependency =
       attribute feature { text },
       attribute version { version },
       attribute views { viewnames },
       undefinedAttribute*,
       Param*,
       extensionElement,
   
     Optional = element Optional { dependency }
     Require = element Require { dependency }

   Features are collections of processing rules and JavaScript Library
   APIs that provide specific functionality to a application.  A feature
   might also place various constraints and rules on the container and
   application when in use.  Containers are required to honor the
   constraints and rules of any feature it claims to support.

   The "feature" attribute on the <Optional> and <Require> elements
   specifies the unique identifier of a Feature.

   The "version" attribute specifies the specific version of the
   identified Feature, using the syntax described in Section 1.2.

   The "views" attribute specifies a comma separated list of views
   (Section 2.2.12.1) for which the Feature is either optional or
   required.  Containers SHOULD only load features when an appropriate
   view is being rendered.

   For every feature identified using a <Require> element, the container
   to required to provide an implementation that matches the version
   specified by the "version" attribute.  The container is required to
   display an error if it is incapable of providing an appropriate
   implementation for a required Feature.

   For every feature identified using a <Optional> element, the
   container MAY provide an implementation of the feature.  If an
   implementation is provided, it MUST match the version specified by
   the "version" attribute.

   Containers MUST NOT substitute versions of features that do not match
   that which is requested by the application.

   Containers SHOULD support as many versions of a feature as is
   practical to facilitate backwards compatibility with existing
   applications.



(surname)               Expires October 31, 2012               [Page 15]

Internet-Draft                Core-Gadget                       May 2012


   Containers are permitted to refuse to support features or specific
   versions of features that are known or assumed to be incompatible
   with the specification version required by the Gadget, or that are
   known to be incompatible with other Features or versions of Features
   required by the Gadget.  For example, a container MAY not support the
   combination of a <ModulePrefs> element using
   "specificationVersion="1.0"" and a <Require feature="opensocial"
   version="2.0">; or the combination of <Require feature="opensocial"
   version="1.0"> and <Require feature="opensocial-data" version="1.1">.
   In cases where such combinations are requested, the Features are said
   to be conflicting.  Conflicting features are to be treated by
   Containers as if they were unsupported.  Containers SHOULD provide an
   error message describing conflicts to developers when a conflict is
   detected.  If one or more of the conflicting Features is specified as
   Optional by a Gadget, and the set of Required features and
   specification version do not conflict, Containers SHOULD attempt to
   render the application by removing the conflicting optional Features.
   Containers SHOULD include the largest set of Optional Features that
   do not produce conflicts.

   It is possible for there to be feature version conflicts when two
   valid feature dependencies exist for the same feature.  This
   situation can occur when the same feature is declared at a global
   scope (no "views" attribute specified on the <Require> or <Optional>
   element) and at a view scope ("views" attribute specified) but with
   differing "version" values; for example, if we are rendering an
   Application's "home" view and the specification document contains
   both <Require feature="myfeature" version="1"> and <Require
   feature="myfeature" version="2" views="home">.  In such cases,
   containers SHOULD use the Feature version from the element that
   explicitly matches the view being rendered over other feature
   references.  Developers can easily correct such conflicts by always
   using the "views" attribute in applications that use mixed Feature
   versions.

2.2.3.1.  The <Param> Element

   The <Param> element provides configuration details for a feature
   dependency.  The element consists of a single "name" attribute and
   text content.  The element MUST NOT contain un-escaped markup.  If
   the value of the parameter being specified contains markup such as
   XML or HTML tags, the value MUST either be properly escaped or
   wrapped within a CDATA section.

   For instance:

   <Require feature="my-feature" version="1.0">
     <Param name="foo"><![CDATA[<a>bar</a>]]></Param>
   </Require>





(surname)               Expires October 31, 2012               [Page 16]

Internet-Draft                Core-Gadget                       May 2012

   Or, alternatively:

   <Require feature="my-feature" version="1.0">
     <Param name="foo">&lt;a&gt;bar&lt;/a&gt;</Param>
   </Require>

   Each <Require> and <Optional> element can contain any number of
   <Param> elements.  The specific parameter names allowed are specific
   to each individual feature.

   When specified, each parameter will be made available by the
   container to the application code using the
   "gadgets.util.getFeatureParameters" API, with the value of the "name"
   attribute serving as the parameter key and the text value of the
   element serving as the parameter value.

   When a feature dependency for a specific view has been defined, the
   container SHOULD make only the parameters from the view-specific
   dependency available to the application using the
   getFeatureParameters API.

2.2.4.  The <Preload> Element

   The <Preload> element is used to identify resources that a container
   SHOULD load automatically when an application view is processed and
   rendered.

   Preload = element Preload {
     SignedFetch,
     attribute href { IRI },
     attribute views { viewnames }?
   }

   The "href" attribute specifies the IRI of the resource to fetch.

   <Preload> elements MAY use the Signed Fetch mechanism defined by
   Section 3.1.1 and MAY contain the same optional attributes used to
   configure <Content> elements for signed fetch as described in Section
   2.2.12.1.4.

   The "views" attribute provides a comma-separated list of views
   (Section 2.2.12.1) for which this <Preload> element applies.
   Containers SHOULD NOT preload resources that are not specified for
   the view being rendered.  If no "views" attribute is specified, then
   the content SHOULD be preloaded for all views.

   The container will process all of the <Preload> elements defined for
   a particular view when it begins rendering the view by sending an
   HTTP GET request to the location specified in the "href" attribute.
   The responses to these requests will then be cached by the container
   as described in Section 3.2




(surname)               Expires October 31, 2012               [Page 17]

Internet-Draft                Core-Gadget                       May 2012


   When an HTTP GET request for the same IRI is submitted using either
   the "gadgets.io.makeRequest" or "osapi.http.get" APIs, the container
   will use any cached responses previously generated as a result of
   processing the <Preload> elements.

2.2.5.  The <Link> Element

   The <Link> element is used to associate a variety of additional
   resources with the specification document.  At a minimum, the element
   MUST contain the "rel" and "href" attributes.

   Link = element Link {
     SignedFetch,
     attribute rel { text },
     attribute href { IRI },
     attribute method { "GET" | "POST" }?,
     undefinedAttribute*,
     text
   }

   The "href" attribute specifies the IRI of the resource being linked
   to.  The value MUST be usable for dereferencing and therefore MUST be
   mapped to a URL following the rules specified in [RFC3987].

   The specific relationship between the specification document and the
   referenced resource is specified by the value of the "rel" attribute.
   The value of the "rel" attribute MUST be a Link Relation Type as
   defined by [RFC5988].

   This specification defines a number of "rel" attribute values that
   are significant.  Implementations MUST NOT use any "rel" attribute
   value prefixed with the characters "opensocial", "gadgets", or
   "events" that are not defined by this specification.

   The "rel" attribute values currently supported by this specification
   are:


















(surname)               Expires October 31, 2012               [Page 18]

Internet-Draft                Core-Gadget                       May 2012


   +--------------------+----------------------------------------------+
   | rel                | Description                                  |
   +--------------------+----------------------------------------------+
   | "icon"             | Used to link an image resource to the        |
   |                    | specification document that serves as a      |
   |                    | representative icon for the application.     |
   | "license"          | Used to reference the license under which    |
   |                    | the code and content of an application       |
   |                    | specification document is being provided.    |
   |                    | For example, the JavaScript code contained   |
   |                    | within the specification document can be     |
   |                    | considered to be "open source" and           |
   |                    | distributed using a common "open source      |
   |                    | license" such as the Apache Software         |
   |                    | License, v2 [1] or a Creative Commons        |
   |                    | License [2], etc.  Multiple <Link> elements  |
   |                    | using the "license" link relation MAY be     |
   |                    | used within a specification document with    |
   |                    | each representing an alternative             |
   |                    | distribution license.                        |
   | "privacy-policy"   | Used to reference a document describing the  |
   |                    | privacy policy associated with the           |
   |                    | application. Such documents SHOULD disclose  |
   |                    | what personal information is collected by    |
   |                    | the application and how that information is  |
   |                    | stored, used, managed and disclosed to other |
   |                    | parties. A specification document SHOULD     |
   |                    | contain no more than one <Link> element      |
   |                    | using the "privacy-policy" link relation.    |
   | "terms-of-service" | Used to reference a document describing the  |
   |                    | the rules to which a user of the application |
   |                    | agree to follow when using the application.  |
   |                    | Note that such "Terms of Service" carry no   |
   |                    | legal weight and can be ignored with         |
   |                    | impunity in the absence of an explicit,      |
   |                    | legally enforceable contract. A              |
   |                    | specification document SHOULD contain no     |
   |                    | more than one <Link> element using the       |
   |                    | "terms-of-service" link relation.            |
   +--------------------+----------------------------------------------+

   Additional link relations specific to the Application Lifecycle
   Events capability are described in Section 3.5.

   The <ModulePrefs> element can contain any number of <Link> elements
   but MUST NOT contain more than one with the same combination of "rel"
   and "href" attribute values.

   The optional "method" attribute can be used with certain links to
   specify the HTTP method that is to be used when dereferencing the
   link's "href".



(surname)               Expires October 31, 2012               [Page 19]

Internet-Draft                Core-Gadget                       May 2012

2.2.6.  The <Locale> Element

   The <Locale> element is used to provide localization information for
   an application.  Containers are required to honor localization rules
   as specified in Localization (Section 3.4). Each Locale tag
   represents localization information for a single locale.

     Msg = element msg {
       attribute name { text },
       undefinedAttribute*,
       text
     }
   
     CommonLocale = {
       attribute lang { "all" | text }?,
       attribute country { "all" | text }?,
       attribute language_direction { "rtl" | "ltr" }?,
       attribute views { viewnames },
       undefinedAttribute*
     }
   
     RemoteLocale = element Locale {
       CommonLocale,
       attribute messages { IRI }
     }
   
     InLineLocale = element Locale {
       CommonLocale,
       Msg*
     }
   
     Locale = RemoteLocale | InLineLocale

   The "lang" attribute specifies the language for the locale specified
   as an ISO-639-1 Language Code, or the special value "all", which
   containers MUST interpret as applying to all languages unless a more
   specific match is found.  If the lang attribute is not specified, the
   default is considered to be "all".

   The "country" attribute specifies the country code for the locale
   specified as an ISO-3166-1 Country code, or the special value "all",
   which containers MUST interpret as applying to all countries unless a
   more specific match is found.  If the country attribute is not
   specified, the default is considered to be "all".

   The optional "language_direction" attribute is used to specify the
   default text rendering direction.  Valid values are "ltr", to
   indicate "Left-to-Right" ordering, or "rtl" to indicate "Right-to-
   Left" ordering.  If not specified, the default text rendering
   direction is determined by the container.  Directional rendering of
   text is discussed in detail in Section 3.4.




(surname)               Expires October 31, 2012               [Page 20]

Internet-Draft                Core-Gadget                       May 2012


   The optional "views" attribute specifies a comma-separated list of
   views (Section 2.2.12.1) for which the Locale information applies.
   Containers SHOULD only use the information provided by the containing
   <Locale> element when an appropriate view is being rendered.

   The optional "messages" attribute specifies the IRI of an XML
   document conforming to the Message Bundle Document (Section 3.4.2)
   format.  The IRI specified MUST be suitable for dereferencing.  The
   container MUST fetch the referenced resource and treat all child
   elements of the root XML element in the document as though they are
   child nodes of the containing <Locale> element.

   Unless the "messages" attribute is specified, the <Locale> element
   MAY contain zero or more <msg> elements, each of which provide a
   singular localized value.  The key used to identify the value is
   specified using the "name" attribute.  The text content of the <msg>
   element provides the localized value.  If the "messages" attribute is
   specified, the <Locale> element MUST NOT contain any <msg> elements.

   An example <Locale> that uses a referenced Message Bundle Document:

   <Locale language="en" country="US"
     messages="http://example.org/i18n/en/messages.xml" />

   An example <Locale> that uses contained <msg> elements:

   <Locale language="en" country="US">
     <msg name="foo">This is the American English Version</msg>
     <msg name="bar">Hello From My Gadget</msg>
   </Locale>

2.2.7.  The <OAuth> Element

   The <OAuth> element supplies the container with OAuth 1.0 specific
   configuration details for the application.  For details see Section
   3.1.2.

   OAuth = element OAuth {
     undefinedAttribute*,
     Service*,
     extensionElement*
   }

   The <OAuth> element contains zero or more <Service> elements, each of
   which detail a specific OAuth 1.0 service associated with the
   application.








(surname)               Expires October 31, 2012               [Page 21]

Internet-Draft                Core-Gadget                       May 2012


     Service = element Service {
       attribute name { text }?,
       attribute view { text }?,
       attribute realm { text }?,
       undefinedAttribute*,
       element Request { OAuthResourceType }?,
       element Access { OAuthResourceType }?,
       element Authorization {
         attribute url { IRI },
         undefinedAttribute*,
         extensionElement*
       }?,
       extensionElement*
     }
   
     OAuthResourceType = {
       attribute url { IRI },
       attribute method { "GET" | "POST" }?,
       attribute param_location {
         "auth-header" | "uri-query" | "post-body" }?,
       extensionElement*
     }

   The optional "name" attribute on the <Service> element specifies a
   name used to reference the service at runtime.  If unspecified, the
   value is assumed to be an empty string.  Gadget developers specify
   which OAuth Service they wish to use by passing the service name, for
   example, as a parameter to the "gadgets.io.makeRequest" and
   "osapi.http" APIs.

   The optional "view" attribute on the <Service> element specifies the
   name of a View the container SHOULD display to the Viewer when the
   container determines that an OAuth Access Token needs to be acquired.
   If the specified view does not exist within the Application
   specification document, the attribute MUST be ignored.

   The optional "realm" attribute specifies a realm-value as specified
   by [RFC2617].  The given realm-value is used to select an appropriate
   <Service> element to use when authenticating a request for a remote
   resource should the container receive a 401 Unauthenticated response.
   See Section 3.1.2.2.3 for additional detail.

   The child elements of the <Service> element consist of the <Request>,
   <Access> and <Authorization> elements, each of which are optional but
   MUST NOT appear more than once within a single <Service> element.









(surname)               Expires October 31, 2012               [Page 22]

Internet-Draft                Core-Gadget                       May 2012


   The <Request> element identifies the endpoint for acquiring OAuth
   request tokens.  The "url" attribute specifies the IRI of the
   endpoint.  This IRI MUST be suitable for dereferencing.  The "method"
   attribute specifies the HTTP verb to use when sending the request,
   valid values are either "GET" or "POST".  If not specified, the value
   is assumed to be "POST".  The "param_location" attributes specifies
   how OAuth parameters are to be passed in the request.  Valid options
   are either "uri-query", "auth-header", and "post-body", corresponding
   to the options described in Section 3.5 of the OAuth specification
   [RFC5849].  If not specified, the value is assumed to be "auth-
   header".

   The <Access> element identifies the endpoint for acquiring OAuth
   access tokens.  The <Access> element shares the same attribute
   definitions as the <Request> element.

   The <Authorization> element identifies the endpoint used to acquire
   authorization.  The "url" attribute specifies the IRI of the
   endpoint.  This IRI MUST be suitable for dereferencing.

2.2.8.  The <OAuth2> Element

   The <OAuth2> element supplies the container with OAuth 2.0 specific
   configuration details for the application.  For details see Section
   3.1.2.

   OAuth2 = element OAuth2 {
     undefinedAttribute*,
     Service*,
     extensionElement*
   }

   The <OAuth2> element contains zero or more <Service> elements, each
   of which detail a specific OAuth 2.0 service associated with the
   application.



















(surname)               Expires October 31, 2012               [Page 23]

Internet-Draft                Core-Gadget                       May 2012


   Service = element Service {
     attribute name { text }?,
     attribute view { text }?,
     attribute realm { text }?,
     attribute scope { text }?,
     undefinedAttribute*,
     element Authorization {
       attribute url { IRI },
       attribute method { "GET" | "POST" }?,
       undefinedAttribute*,
       extensionElement*
     }?,
     element Token {
       attribute url {IRI},
       undefinedAttribute*,
       extensionElement*
     }?,
     extensionElement*
   }

   The optional "name" attribute on the <Service> element specifies a
   name used to reference the service at runtime.  If unspecified, the
   value is assumed to be an empty string.  Gadget developers specify
   which OAuth Service they wish to use by passing the service name as a
   parameter, for example, to the "gadgets.io.makeRequest" or
   "osapi.http" APIs.

   The optional "view" attribute on the <Service> element specifies the
   name of a View the container SHOULD display to the Viewer when the
   container determines that an OAuth Access Token needs to be acquired.
   If the specified view does not exist within the Application
   specification document, the attribute MUST be ignored.

   The optional "realm" attribute specifies a realm-value as specified
   by [RFC2617].  The given realm-value is used to select an appropriate
   <Service> element to use when authenticating a request for a remote
   resource should the container receive a 401 Unauthenticated response.
   See Section 3.1.2.2.3 for additional detail.

   OAuth2 Service elements MAY also specify an optional "scope"
   attribute providing the scope used by default in all requests.
   Access Token Scope is defined in Section 3.3 of the OAuth 2.0
   specification.  [I-D.ietf-oauth-v2]

   The child elements of the <Service> element consist of the
   <Authorization>, <Token> elements, each of which are optional but
   MUST NOT appear more than once within a single <Service> element.







(surname)               Expires October 31, 2012               [Page 24]

Internet-Draft                Core-Gadget                       May 2012


   The <Authorization> element identifies the endpoint for acquiring
   OAuth authorization tokens.  The "url" attribute specifies the IRI of
   the endpoint.  This IRI MUST be suitable for dereferencing.  The
   "method" attribute specifies the HTTP verb to use when sending the
   request, valid values are either "GET" or "POST".  If not specified,
   the value is assumed to be "GET".

   The <Token> element is used to acquire OAuth 2.0 access tokens.  The
   "url" attribute specifies the IRI of the endpoint.  This IRI MUST be
   suitable for dereferencing.  For details, refer to Section 3.2 of the
   OAuth 2.0 specification.  [I-D.ietf-oauth-v2]

2.2.9.  The <UserPref> Element

   The <UserPref> element is used within a specification document to
   define a "user preference" for use within instances of the
   application.  Each instance of the <UserPref> element defines exactly
   one preference value.  Multiple <UserPref> elements MAY be used
   within a specification document.

   Containers MUST process each <UserPref> by making each available to
   the application via the "gadgets.Prefs" API, using the value of
   <UserPref> element's required "name" attribute as the index key for
   storing and retrieving preferences using the API.






























(surname)               Expires October 31, 2012               [Page 25]

Internet-Draft                Core-Gadget                       May 2012


     BaseUserPref = {
       attribute name { text },
       attribute display_name { text }?,
       attribute default_value { text }?,
       attribute required { "true" | "false" }?,
       undefinedAttribute*,
       extensionElement*
     }
   
     SimpleUserPref = element UserPref {
       BaseUserPref,
       attribute datatype {
         "string" |
         "hidden" |
         "bool" |
         "list" |
         "number" }?
     }
   
     EnumUserPref = element UserPref {
       BaseUserPref,
       attribute datatype { "enum" },
       element EnumValue {
         attribute value { text },
         attribute display_value { text }?,
         undefinedAttribute*,
         extensionElement*
       }*
     }
   
     UserPref = element SimpleUserPref | EnumUserPref

   The "datatype" attribute specifies the data type for the instances of
   the preference value at runtime.  Valid values are "string",
   "hidden", "bool", "list" and "number".  If not specified, the value
   is assumed to be "string".  For more information on "datatype", refer
   to Section 2.2.9.1 below.

   The "display_name" attribute specifies a preferred display name for
   the preference.  The value SHOULD be localized as described in
   Section 3.4.

   The "default_value" attribute specifies the default value for
   instances of the preference.  The value of the attribute depends on
   the value of the "datatype" attribute.  Container's are required to
   provide the value of the "default_value" attribute as the value of
   the preference when using the "gadgets.Prefs" API and a stored value
   for the preference does not yet exist.






(surname)               Expires October 31, 2012               [Page 26]

Internet-Draft                Core-Gadget                       May 2012


   The "required" attribute specifies whether instances of the
   preference require a valid value in order for the application to
   function correctly.  Valid values are either "true" or "false".  If
   not specified, the value is assumed to be "false".  If the value is
   "true", Containers are required to display an error message or a
   prompt if there is no value stored.

2.2.9.1.  User Preference Data Types

   The default data type for all user preference values is "string",
   represented either by omitting the "datatype" attribute on the
   <UserPref> element or by explicitly specifying "datatype="string"".
   When datatype is "string", The value of the "default_value" attribute
   and the stored value of the user preference at runtime MUST be a
   String.

   An example "string" preference:

   <UserPref name="foo" datatype="string" default_value="foo"
             display_name="Foo" required="true" />

   When datatype equals "number", the value of the "default_value"
   attribute and the stored value of the user preference at runtime MUST
   be a numeric value.  The value MAY be any integer, decimal or
   floating point value.

   An example "number" preference:

   <UserPref name="foo" datatype="number" default_value="123"
             display_name="Foo" required="true" />

   When datatype equals "bool", the value of the "default_value"
   attribute and the stored value of the user preference MUST evaluate
   to either True or False when accessed via the "gadgets.Prefs.getBool"
   API.

   An example "bool" preference:

   <UserPref name="foo" datatype="bool" default_value="true"
             display_name="Foo" required="true" />

   When datatype equals "list", the value of the "default_value"
   attribute and the stored value of the user preference MUST be a pipe-
   delimited (|) string of values, returned as a JavaScript array when
   accessed via the "gadgets.Prefs.getArray" API.

   An example "list" preference:

   <UserPref name="foo" datatype="list" default_value="foo|bar|baz"





(surname)               Expires October 31, 2012               [Page 27]

Internet-Draft                Core-Gadget                       May 2012

             display_name="Foo" required="true" />

   When datatype equals "hidden", the value of the "default_value"
   attribute and the stored value of the user preference MUST be a
   String.  The difference between "hidden" and "string" is that
   "hidden" user preferences are not visible and are not editable by
   users by can be accessible via the "gadgets.Prefs.getString" API.

   An example "hidden" preference:

   <UserPref name="foo" datatype="hidden" default_value="foo"
             display_name="Foo" required="true" />

   When datatype equals "enum", the <UserPref> element SHOULD contain
   one or more <EnumValue> elements, each of which define a single
   possible value for the preference.  Each <EnumValue> element contains
   a required "value" attribute that specifies a string value, and an
   optional "display_value" attribute that specifies a textual
   representation of the "value".  If unspecified, the "display_value"
   defaults to the "value".  Containers SHOULD display the
   "display_value" in place of "value" when rendering a user interface
   for editing purposes.  The value of the "default_value" attribute and
   the stored value of the user preference MUST equal one of the
   supplied <EnumValue> "value" attributes.

   An example "enum" preference:

   <UserPref name="foo" datatype="string" default_value="foo"
             display_name="Foo" required="true">
     <EnumValue value="foo" display_value="Foo" />
     <EnumValue value="bar" display_value="Bar" />
     <EnumValue value="baz" display_value="Baz" />
   </UserPref>

2.2.10.  The <Data> Element

   The <Data> element contains data pineline elements as defined by
   Section 3.6. All data pipeline elements defined in this block are
   registered globlly for all views by default.  Individual data
   pipeline elements MAY be specified for particular views by adding the
   "view" attribute to the tag.

   Data = element Data {
     undefinedAttribute*,
     extensionElement*
   }

   See Section 3.6 for complete information on the data pipelining
   mechanism and element definitions.

2.2.11.  The <ExternalServices> Element




(surname)               Expires October 31, 2012               [Page 28]

Internet-Draft                Core-Gadget                       May 2012


   The <ExternalServices> element contains zero or more <ServiceTag>
   elements used to establish an "alias" for container-managed external
   services utilized by the application.

   ExternalServices = element ExternalServices {
     undefinedAttribute*,
     element ServiceTag {
       attribute alias { text },
       text
     }*
   }

   The <ServiceTag> element has a single "alias" attribute whose value
   is a string and textual content that provides an application-specific
   plain-text label for the alias.  Additional markup within the
   <ServiceTag> is not allowed.

   Currently, when making a remote request from within an application
   using either the "osapi.http" or "gadgets.io.makeRequest" APIs, the
   full URL of the remote service that is being invoked must be known to
   the application and specified within the request, along with all
   other details of the request.  Often, however, it is desirable to
   offload the responsibility of managing access to external services to
   the container, for instance, when multiple services are available
   that implement the same protocol and it would be difficult for a
   single application to keep track of all instances; or when a
   potentially untrusted application needs to be given access to secure
   backend systems.  In such cases, a container can choose to manage all
   of the details involved with connecting to and communicating with the
   service and expose that service to the application via an "alias".

   Once an alias for a service is established, a specification document
   can use the <ServiceTag> element within <ExternalServices> to declare
   an application-specific reference label for the alias that can be
   used when invoking the "osapi.http" or "gadgets.io.makeRequest" APIs
   in place of the URL.

   For example, suppose that an application requires access to a backend
   enterprise application that implements a proprietary communications
   protocol.  Software is added to the container that allows it to
   communicate with the backend system.  All of the details including
   the URL, authentication details, authorization, and so forth are
   configured within the container by an administrator and an alias is
   assigned to the service: "opensocial:service://example.com/
   api?version=1".

   The developer then creates the specification document and adds a
   <ServiceTag> element referencing the alias and created a lobel for
   the alias that can be used within the application's Javascript:





(surname)               Expires October 31, 2012               [Page 29]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     ...
     <ExternalServices>
       <ServiceTag alias="opensocial:service://example.com/api?version=1">
         EnterpriseService
       </ServiceTag>
     </ExternalServices>
     <Content>
       ...
       <script>
         ...
         var params = {
           'alias' : 'EnterpriseService',
           'href'  : '/files',
           'format': 'json',
         };
         osapi.http.get(params).execute(
           function(result) {
             ...
           }
         );
         ...
       </script>
       ...
     </Content>
   </Module>

   When the application is installed, the container will attempt to
   match the alias specified in the <ServiceTag> to any known configured
   services -- in this case, our backend enterprise service -- and will
   automatically proxy all requests to the "EnterpriseService" label to
   the backend service.

   It is possible for multiple service instances managed by a single
   container to share the same alias; for instance, when there are
   multiple servers available that implement the same communication
   protocols.  In such cases, when the application is installed, the
   container can either automatically select an appropriate service
   instance to map the <ServiceTag> to or provide a choice to the user
   installing the application to select which service instance to use.

   If a <ServiceTag> specifies an alias that is not currently known to
   the container, installation of the application SHOULD fail and an
   error reported.

2.2.12.  The <Content> Element

   The <Content> element provides the user interface and runtime code
   for the application.  A specification document MUST have at least one
   <Content> element.




(surname)               Expires October 31, 2012               [Page 30]

Internet-Draft                Core-Gadget                       May 2012


     CommonContent = {
       attribute preferred_height { text }?,
       attribute preferred_width { text }?,
       attribute view { text }?,
       undefinedAttribute*
     }
   
     RedirectedContent = element Content {
       CommonContent,
       SignedFetch,
       attribute type { "url" },
       attribute href ( IRI )
     }
   
     ProxiedContent = element Content {
       CommonContent,
       SignedFetch,
       attribute type { "html" }?,
       attribute href { IRI },
       extensionElement*
     }
   
     HtmlContent = element Content {
       CommonContent,
       attribute type { "html" }?,
       text
     }
   
     Content = RedirectedContent | HtmlContent | ProxiedContent

   The required "type" attribute specifies the type of content provided
   by the <Content> element.  Valid values are either "html" or "url".
   Containers MUST process the <Content> element according to the
   specific rules for each type.

   The <Content> element MUST conform to the following rules:

   1.  If the value of "type" is "html" and the "href" attribute is
       specified, the content of <Content> MAY contain one or more Data
       Pipeline elements as defined in Section 3.6.  The <Content>
       element MAY also contain any combination of the "Signed Fetch"
       attributes defined by Section 2.2.12.1.4.

   2.  If the value of "type" is "html", and the "href" attribute is not
       specified, the content of <Content> MUST NOT contain child









(surname)               Expires October 31, 2012               [Page 31]

Internet-Draft                Core-Gadget                       May 2012

       elements and SHOULD be suitable for handling as HTML markup.  The
       HTML markup SHOULD be wrapped within a CDATA tag otherwise it
       MUST be escaped in order to prevent the HTML from being
       interpreted by the XML parser; for example, "<br>" as "&lt;br>".

   3.  If the value of "type" is "url", the <Content> element MUST
       contain the "href" attribute and MUST NOT contain child elements
       or text.  Containers SHOULD ignore any elements or text contained
       within the <Content>.  The element MAY contain any combination of
       the "Signed Fetch" attributes defined by Section 2.2.12.1.4.

   4.  Any <Content> element MAY contain "preferred_height" and
       "preferred_width" attributes that specify the preferred
       dimensions, in pixels, the container SHOULD use when rendering
       the content.

   5.  Any <Content< element MAY contain a "view" attribute that
       specifies a comma-separated list of views.  A single application
       can support multiple views.  Each view is associated with at
       least one <Content> element.  When the container renders an
       application with multiple <Content> elements, it will use the
       view name to select the appropriate content.

   When a <Content> element uses the "href" attribute, the view names
   listed in it's "view" attribute MUST NOT be used in any other
   <Content> element.  A single view name MAY appear within multiple
   <Content> elements that specify a "type" attribute value of "html"
   and do not include an "href" attribute.  How multiple <Content>
   elements sharing the same view name are processed to provide the
   rendered content for a view is defined in Section 2.2.12.1.

2.2.12.1.  Processing Model

   The full collection of <Content> elements contained within a single
   application specification document belong to one or more abstract
   Views.  A View consists of all the stylesheets, script, and markup
   that comprise the application's visual interface to a user and can be
   constructed from one or more individual <Content> elements either
   from markup contained directly within the application specification
   document or from external documents and resources referenced by IRI.

   All applications have a single unnamed default view and zero or more
   named views.

   View names are Strings consisting of one or two groups of one or more
   ASCII alpha-numeric characters, with each group optionally separated
   by the ASCII period (".") character, e.g.  "home", "canvas", "foo",
   "home.About", etc.  View names are case-sensitive such that "Home",
   "home", and "HOME" are NOT considered to be equivalent.

   name = 1*(ALPHA / DIGIT)
   viewname = name *["." name]
   viewnames = viewname *[ OWS "," OWS name]


(surname)               Expires October 31, 2012               [Page 32]

Internet-Draft                Core-Gadget                       May 2012


   Containers MAY assign specific meaning to particular view names.  In
   particular, this specification assigns the following special meanings
   to each of the given view names:

   +--------------+----------------------------------------------------+
   | Name         | Description                                        |
   +--------------+----------------------------------------------------+
   | about        | Identifies a View that provides descriptive        |
   |              | information about the application.                 |
   | canvas       | Identifies a View that is typically rendered by    |
   |              | the container in a large area that is generally    |
   |              | not shared with other application views.           |
   | embedded     | Identifies a View that is intended for use         |
   |              | primarily with Embedded Experiences (Section       |
   |              | 4.2.4).  When a container displays an application  |
   |              | View using the                                     |
   |              | "gadgets.views.openEmbeddedExperience" API, it     |
   |              | will, by default, render the "embedded" View.      |
   | home         | Identifies a View that is typically rendered by    |
   |              | the container on a page with other application     |
   |              | views. These are typically assigned relatively     |
   |              | small areas of the available display area for the  |
   |              | page.                                              |
   | preferences  | Identifies a View that is typically used to allow  |
   |              | the user to view and modify user preferences for   |
   |              | the application.                                   |
   | preview      | Identifies a View that is typically used to        |
   |              | provide a demonstration view of the application.   |
   | profile      | Identifies a View that, like "home", is typically  |
   |              | rendered by the container on a page with other     |
   |              | application views. The difference with PROFILE,    |
   |              | however, is that the page into which the View is   |
   |              | included will typically represent a "Profile" view |
   |              | of an individual person or entity. For example,    |
   |              | when displayed on the profile page for a person,   |
   |              | an application View might provide an interface for |
   |              | scheduling a meeting with that person or           |
   |              | initiating a Voice-over-IP call, and so forth.     |
   | support      | Identifies a View that provides details about      |
   |              | where users can acquire support information for    |
   |              | the application, typically including contact       |
   |              | information and links to product documentation,    |
   |              | etc.                                               |
   +--------------+----------------------------------------------------+

   Individual <Content> elements are associated with one or more
   distinct views through the use of the "view" attribute.







(surname)               Expires October 31, 2012               [Page 33]

Internet-Draft                Core-Gadget                       May 2012

   For example, the following <Content> element is associated with two
   separate Views: "home" and "foo".  When the container receives a
   request to render either the "home" or "foo" Views, it will use the
   markup provided by this <Content> element:

   <Content type="html" view="home,foo">
     ABC
   </Content>

   When a <Content> element is used without a "view" attribute, it
   automatically becomes associated with the unnamed default view.

   How any given View is constructed by the container for the
   application depends largely on which kinds of <Content> elements are
   used.  There are three distinct kinds of <Content> elements:

   o  "HTML Content" refers to <Content> elements that directly contain
      HTML markup, scripts and stylesheets;

   o  "Proxied Content" refers to <Content> elements that use an IRI to
      reference HTML markup that is external to the application
      specification document but that is to be retrieved and processed
      by the container prior to display as if it were contained directly
      within the <Content> element; and

   o  "Redirected Content" refers to <Content> elements that use an IRI
      to reference HTML markup that is displayed directly to the use
      without any processing performed by the container.

   The unnamed default View is rendered automatically by the Container
   when a request to display an application is received and either a
   specific view name is not specified in the render request or the view
   name that is specified does not exist within the application
   specification.  If there are no <Content> elements within the
   application specification associated with the unnamed default (i.e.
   no <Content> elements that do not have a "view" attribute), then the
   container will attempt to render the "home" view as the default.  If
   there are no <Content> elements associated with either the "home"
   view or the unnamed default view, the container SHOULD report an
   error to the user and abort the attempt to display the application.

   For example, by default, a container rendering the following
   application will display the characters "AB":

   <Module>
     <ModulePrefs title="foo" />
     <Content type="html">AB</Content>
     <Content type="html" view="home">CD</Content>
   </Module>

   However, a container rendering the following application will, by
   default, display the characters "CD":



(surname)               Expires October 31, 2012               [Page 34]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs title="foo" />
     <Content type="html" view="foo">AB</Content>
     <Content type="html" view="home">CD</Content>
   </Module>

   The specific considerations for View construction relative to each
   type of <Content> is outlined in the sections that follow.

2.2.12.1.1.  HTML Content

   The simplest form of content provided by an application is HTML
   associated with the unnamed default view:

   <Content type="html"><![CDATA[
     <div>Hello World!</div>
   ]]></Content>

   When the container renders the default view for the application, it
   will select this <Content> element and display the HTML "<div>Hello
   World!</div>" to the user.

   An equivalent example can be provided by using the "home" view in the
   element's "view" attribute:

   <Content type="html" view="home"><![CDATA[
     <div>Hello World!</div>
   ]]></Content>

   If an application provides multiple type "html" <Content> elements
   that specify the same view, the content is concatenated together when
   rendered in the order those <Content> elements appear within the
   specification document:

   For instance, given two "html" Content elements for the "home" view:

   <Content type="html" view="home"><![CDATA[
     <div>Hello World!</div>
   ]]></Content>
   <Content type="html" view="home,greeting"><![CDATA[
     <div>How are you?</div>
   ]]></Content>

   When rendering the "home" view, the container would generate the
   following:

   <div>Hello World!</div>
   <div>How are you?</div>

   However, when rendering the "greeting" view, the container would only
   select the <Content> element that lists the "greeting" view,
   producing:


(surname)               Expires October 31, 2012               [Page 35]

Internet-Draft                Core-Gadget                       May 2012


   <div>How are you?</div>

   Once the HTML content for a view has been assembled from the
   appropriate <Content> elements, the container MUST perform Variable
   Substitution on the resulting content as defined by Section 3.3.

   Only type "html" <Content> elements can be concatenated together in
   this fashion.

2.2.12.1.2.  Proxied Content

   As an alternative to including HTML markup directly within the
   specification document, a <Content> element that uses type="html" MAY
   reference an external resource containing HTML markup using the
   "href" attribute.  When the View is rendered, the container will
   fetch the external resource and process it's HTML content as if it
   were included directly within the <Content> element.  This is
   commonly referred to as "Proxied Content".

   An example of proxied content associated with the unnamed default
   view:

   <Content type="html" href="http://example.org/hello.html"/>

   When rendering the default view for an application containing the
   above <Content> element, the container will issue an HTTP request to
   the address provided by the "href" attribute to retrieve the content.

   The container MUST add the following additional query string
   parameters to the address provided by the "href" attribute:

   lang The preferred language of the user for which the content is
      being rendered, specified as an ISO-639-1 language code.

   country The country of the user for which the content is being
      rendered, specified as an ISO-3166-1 country code.

   opensocial_proxied_content MUST be specified using the value "1".
      Servers can use this to identify proxied content renders from
      other types of requests.

   When the remote service returns the HTML content back to the
   container, the container will process it as if the HTML had been
   directly included within the application specification.

   Note that, whereas multiple HTML Content elements MAY share a common








(surname)               Expires October 31, 2012               [Page 36]

Internet-Draft                Core-Gadget                       May 2012

   view name, the view names associated with Proxied Content MUST be
   unique to that <Content> element, thereby making concatentation
   unnecessary.  The container MUST, however, still perform Variable
   Substitution on the returned HTML content.

   If the response to the proxied request returns an unsuccessful HTTP
   status code, the container SHOULD present a meaningful error message
   to the end user.  Containers SHOULD obtain a suitable error message
   for display by displaying the content specified for a view named as
   "{view-name}.error", where {view-name} matches the name of the view
   that the proxied request was being processed for.  If an exact match
   can not be found, the special view name "default.error" should be
   used.  If content for the "default.error" is not present, the
   container SHOULD display a generic message indicating that a problem
   occurred.

   For instance, A Proxied Content for the "greeting" view with a
   specific "greeting.error" view to display error responses:

   <Content type="html" href="http://example.org/hello.html" views="greeting"/>
   <Content type="html" views="greeting.error">
     There was an error retrieving the greeting content.
   </Content>

   An alternative Proxied Content for the "greeting" view that uses the
   "default.error" view to display error responses:

   <Content type="html" href="http://example.org/hello.html" views="greeting"/>
   <Content type="html" views="default.error">
     There was an error retrieving the content.
   </Content>

   Typically, the container will issue an HTTP GET request to retrieve
   the content referenced by the "href" attribute.  However, there are
   times when additional information beyond that provided by the request
   URI of an HTTP GET is required.  In such cases, proxy type <Content>
   elements MAY contain Data Pipeline (Section 3.6.4) elements that
   define the payload of an HTTP POST request to fetch the remote
   content.

   Containers are permitted to cache proxied content following the
   requirements specified in Section 3.2.

2.2.12.1.3.  Redirected Content











(surname)               Expires October 31, 2012               [Page 37]

Internet-Draft                Core-Gadget                       May 2012


   When using Proxied Content, the container is responsible for sending
   the HTTP request to the remote server and processing the content
   while the view is being rendered.  Alternatively, by using
   "type="url"" within the <Content> element, the container can be
   instructed to provide a "direct view" of the content retrieved from
   the remote source without additional processing.  When the view is
   being rendered for display within a Web Browser, this can be achieved
   by using an HTML IFrame whose src attribute is set to the value of
   the <Content> element's "href" attribute.  This is commonly referred
   to as "Redirected Content".

   An example of redirected content associated with the unnamed default
   view:

   <Content type="url" href="http://example.org/hello.html"/>

   The container MUST add the following additional query string
   parameters to the address provided by the "href" attribute:

   lang The preferred language of the user for which the content is
      being rendered, specified as an ISO-639-1 language code.

   country The country of the user for which the content is being
      rendered, specified as an ISO-3166-1 country code.

   libs An absolute URL reference that points to any JavaScript
      resources necessary to satisfy the optional or required features
      listed within the specification document's <ModulePrefs>. This URL
      MUST be suitable for setting as the value of an HTTP script tags
      src attribute and MUST return a JavaScript resource when
      dereferenced.

   When rendering the default view for an application containing the
   above Redirected Content element, a Web-browser based container would
   generate the following:

   ...
   >iframe src="http://example.org/hello.html?language=en&country=US&libs=http://container.example.com/js/core:rpc:blah.js"
   ...

   Like Proxied Content, view names associated with Redirected Content
   MUST not be shared with any other <Content> elements making
   concatenation unnecessary.  Additionally, because Redirected Content
   is rendered exactly as it is provided by the remote service, Variable
   Substitution is not required.

2.2.12.1.4.  Authentication for Proxied and Redirected Content

   For Proxied and Redirected Content, the Signed Fetch mechanism
   described in Section 3.1.1 MAY be used to specify the type of
   authentication used in the request sent to the remote service.



(surname)               Expires October 31, 2012               [Page 38]

Internet-Draft                Core-Gadget                       May 2012


   The Signed Fetch attributes defined below MAY be used on any Proxied
   and Redirected Content elements:

   
     NoAuth = {
       attribute authz { "none" }?
     }
   
     AuthCommon = {
       attribute refresh_interval { text }?,
       attribute sign_owner { "true" | "false" }?,
       attribute sign_viewer { "true" | "false" }?
     }
   
     OAuth1 = {
       AuthCommon,
       attribute authz { "oauth" },
       attribute oauth_received_callback { text }?,
       attribute oauth_request_token { text }?,
       attribute oauth_request_token_secret { text }?,
       attribute oauth_service_name { text }?,
       attribute oauth_token_name { text }?,
     }
   
     OAuth2 = {
       AuthCommon,
       attribute authz { "oauth2" },
       attribute oauth_received_callback { text }?,
       attribute oauth_request_token { text }?,
       attribute oauth_request_token_secret { text }?,
       attribute oauth_service_name { text }?,
       attribute oauth2_scope { text }?,
       attribute oauth_token_name { text }?,
     }
   
     SignedAuth = {
       AuthCommon,
       attribute authz { "signed" },
     }
   
     SignedFetch = NoAuth | OAuth1 | OAuth 2 | SignedAuth

   The "authz" attribute identifies the authentication type used when
   submitting the request to fetch the resource.  The valid values are
   "none", "oauth", "oauth2" or "signed".  When not specified, the
   default is assumed to be "none" indicating that no authentication
   mechanism is to be used.

   When "authz" is equal to "oauth", requests sent to the remote service
   MUST be authenticated using the OAuth 1.0 protocol as described in
   Section 3.1.2.



(surname)               Expires October 31, 2012               [Page 39]

Internet-Draft                Core-Gadget                       May 2012


   When "authz" is equal to "oauth2", requests sent to the remote
   service MUST be authenticated using the OAuth 2.0 protocol as
   described in Section 3.1.2.

   When "authz" is either "oauth" or "oauth2", the following additional
   optional attributes MAY be included, each with identical semantics as
   the similarly named request parameters discussed in Section 3.1.2.1:

   o  oauth_received_callback,

   o  oauth_request_token,

   o  oauth_request_token_secret,

   o  oauth_service_name,

   o  oauth_token_name,

   o  oauth_use_token

   Further, when "authz" is equal to "oauth2", the optional
   "oauth2_scope" attribute MAY be included.

   When "authz" is equal to "signed", the "Signed Fetch" mechanism
   described by Section 3.1.1 is to be used.

   The "sign_owner" attribute indicates whether the identity of the
   Instance Owner (Section 1.3) needs to be included in the request sent
   to fetch the resource.  If the value of this attribute is "true", the
   container MUST include the identity of the Instance Owner.

   The "sign_viewer" attribute indicates whether the identity of the
   current Viewer (Section 1.3) needs to be included in the request sent
   to fetch the resource.  If the value of this attribute is "true", the
   container MUST include the identity of the Viewer.

2.2.13.  Extensibility

   This specification defines the complete XML vocabulary of the
   OpenSocial Application Specification document.  Markup from other
   vocabularies ("foreign markup") can be used within an Application
   Specification.

   Note that future versions of this specification can add elements and
   attributes to the Application Specification vocabulary.  Software
   written to conform to this version of the specification will be
   unable to process such markup correctly and will not be able to
   distinguish it from markup error.  For the purposes of this
   discussion, all unrecognized markup from the Application





(surname)               Expires October 31, 2012               [Page 40]

Internet-Draft                Core-Gadget                       May 2012

   Specification vocabulary will be considered to be "foreign markup".

   This vocabulary allows foreign markup anywhere in an Application
   Specification document, except where it is explicitly forbidden.
   Containers that encounter foreign markup in a location that is legal
   according to this specification MUST NOT stop processing or signal an
   error.  It might be the case that the container is able to process
   the foreign markup correctly and does so.  Otherwise, such markup is
   termed "unknown foreign markup".

   When unknown foreign markup is encountered as a child of any element,
   containers MAY bypass the markup and any textual content and MUST NOT
   change their behavior as a result of the markup's presence.

3.  Container-Provided Capabilities

3.1.  Authentication

   Many applications require the ability to access content and resources
   that are external to the container currently hosting instances of the
   application.  Such information and resources are often sensitive in
   nature and requests need to include authentication and authorization
   details.

   All containers are required to provide at least three basic
   mechanisms for authenticating requests to remote endpoints:

   OAuth 1.0a Is a variation of the original OAuth 1.0 specification
      described by [RFC5849].  Within the OAuth model, the owner's of
      protected resources grant third parties (in this case the
      OpenSocial Container) authority to access the resource for a
      specific purpose and a limited period of time.

   OAuth 2.0 Is an as-yet unfinished update to the original OAuth
      protocol that simplifies the communication between the various
      parties but maintains the same fundamental authorization model.

   Signed Fetch Is a simplified mechanism based on a subset of the OAuth
      1.0a protocol that allows a container to "sign" requests sent to a
      remote endpoint.  Such signatures provide only a reasonable
      assurance that certain content contained within the request has
      not been modified by a malicious party.  Once the receiving
      endpoint determines that it is able to trust the signed request,
      it can decide to provide limited access to certain protected
      resources without having to walk through the entire typical OAuth
      protocol.

   These authentication mechanisms are available for use whenever access
   to a remote resource is required, including:

   o  Processing <Preload> and <Link> elements within the specification
      document's <ModulePrefs>,



(surname)               Expires October 31, 2012               [Page 41]

Internet-Draft                Core-Gadget                       May 2012

   o  Processing Data Pipeline <os:HttpRequest> elements,

   o  Processing proxy and redirect type <Content> elements,

   o  All uses of the "osapi" JavaScript APIs, and

   o  All uses of the "gadgets.io.makeRequest" JavaScript API

   It is important to note that for authentication and authorization
   purposes, regardless of whether the application is accessing remote
   content or social data provided by the container itself, every
   individual instance of an application MUST be considered a distinct
   entity for which authentication credentials and authorized
   permissions MUST be individually established.  Containers MUST NOT
   assume that authorization given to one instance of an application
   applies to all instances of that same application.  Nor MUST the
   container assume that authorization extends to any other applications
   provided by the same developer.

   Authentication and authorization for an application instance is
   further constrained by the Viewer for whom an application is
   currently being rendered.  That is, for example, if a single
   application instance can be rendered for more than one Viewer, the
   container is required to authorize each individual Viewer prior to
   displaying potentially sensitive content.  Such authorization MUST be
   obtained for each individual application instance rendered for a
   particular Viewer.

   Specific considerations for each of the three types of request
   authorization mechanisms are discussed in the sections that follow.

3.1.1.  Signed Fetch

   The "Signed Fetch" mechanism is a capability provided by all
   OpenSocial containers that provides a reasonable level of assurance
   that an HTTP request sent from the container on behalf of an
   application to a remote endpoint has not been inappropriately
   modified by a malicious third party.

   To illustrate the value and operation of Signed Fetch, assume that a
   developer uses the "gadgets.io.makeRequest" JavaScript API to access
   a third party service to retrieve private data belonging to the
   current Viewer.  By default, and if required by the remote endpoint,
   the application is responsible for providing the request with the
   current identity of the user for whom the request is being sent:

   gadgets.io.makeRequest(
     "http://example.org/my/endpoint",
     function(result) {...},
     {"opensocial_viewer_id": opensocial.data.getDataSet("Viewer").id});

   When the container sends the request to the specified endpoint, it
   includes the exact value provided by the JavaScript code:


(surname)               Expires October 31, 2012               [Page 42]

Internet-Draft                Core-Gadget                       May 2012


   GET /my/endpoint?opensocial_viewer_id=alice HTTP/1.1
   Host: example.org

   Assume, however, that the application is being accessed by a
   malicious Viewer identified as "tom".  Such a user can use a variety
   of techniques to trick the application into using a different user's
   identity when using the "gadgets.io.makeRequest" API. Because the
   default behavior is for the container to send the request to the
   remote endpoint exactly as requested, the container and the remote
   endpoint can be fooled into disclosing a legitimate user's private
   data to the malicious Viewer.

   var user = opensocial.data.getDataSet("Viewer").id; // returns "tom"
   // malicious user injects a different id ...
   user = "alice";
   // the code then executes as normal...
   var params = {
     "opensocial_viewer_id" : user};
   gadgets.io.makeRequest(
     "http://example.org/my/endpoint",
     callback,
     params);

   Signed Fetch defends against such attacks by allowing the container
   to:

   1.  Include it's own information about the current Viewer's identity,
       and

   2.  Generate a cryptographic signature usable by the receiving
       endpoint to verify that the container-provided information has
       not been tampered with.

   Containers are required to use the following process when signing
   HTTP requests:

   1.  The container MUST first remove all query string parameters
       passed in with the request whose names begin with any case-
       insensitive variation of "oauth", "xoauth", or "opensocial".
       This is done by examining both the input URI and any additional
       optional parameters provided in the request and filtering out the
       unwanted items.

   2.  The container then MUST add the following query string parameters
       to the request URI:

       opensocial_owner_id Identifies the "owner" the application
          instance for which the request is being sent.

       opensocial_app_url An IRI provided by the container that
          represents the application for which the request is being
          sent.  The IRI provided is used to identify the application
          specification rather than individual instances.

(surname)               Expires October 31, 2012               [Page 43]

Internet-Draft                Core-Gadget                       May 2012


   3.  The container MAY also add the following query string parameters
       to the request URI:

       opensocial_viewer_id Provides the ID of the current Viewer for
          whom content is being displayed.

       opensocial_instance_id Provides an opaque identifier for the
          specific instance of the application for which the request is
          being sent.  The combination of the "opensocial_app_url" and
          "opensocial_instance_id" parameters uniquely identify each
          instance.

       opensocial_app_id An opaque identifier for the application
          specification, unique to the container.  Implementations that
          wish to maintain backwards compatibility with version 0.7 of
          the OpenSocial specification can include this parameter.

       xoauth_public_key An opaque identifier for the public key used to
          sign the request.  This parameter can be omitted by containers
          that do not use public/private key pairs to sign requests, or
          if the container arranges other means of negotiating or
          distributing keys with the remote endpoint receiving the
          request.

   4.  Finally, the container MUST follow the procedure outlined in
       Section 3.4 of the OAuth 1.0 specification [RFC5849] to generate
       and append the signature to the request with the exception that
       the "oauth_token" parameter MUST be omitted.

   Note that upon generating the signature, the container will include a
   range of additional query string parameters required by the OAuth 1.0
   specification, including information about the signing algorithm
   used, the date and time at which the signature was generated, as so
   forth.

   The following example generally illustrates how a typical signed
   fetch request will appear (note: line breaks are added for
   readability):

   GET /foo?opensocial_owner_id=bob
     &opensocial_viewer_id=alice
     &opensocial_app_url=http://example.org/gadgets/foo
     &opensocial_instance_id=1
     &xoauth_public_key=org.example.key1
     &oauth_timestamp=123456789
     &oauth_signature_method=HMAC_SHA1
     &oauth_consumer_key=...
     &oauth_token=...
     &oauth_nonce=...
     &oauth_signature=...




(surname)               Expires October 31, 2012               [Page 44]

Internet-Draft                Core-Gadget                       May 2012


   It is important to stress that the Signed Fetch mechanism provides
   only a reasonable level of assurance that the information provided by
   certain parameters in the request URI have not been tampered with.
   Signed Fetch, by itself, is not adequate for identity authentication,
   nor does it protect against tampering with any other part of the HTTP
   request such as the collection of request headers or the request
   payload, if any.

3.1.1.1.  Using Signed Fetch

   Application developers can make use of the Signed Fetched capability
   with all uses of the "osapi" and "gadgets.io.makeRequest" APIs; and
   with all <Preload>, <Link> and proxy or redirect type <Content>
   elements.

   Using Signed Fetch with JavaScript APIs:

     <Module>
       <Content type="html">
         ...
         <script>
           var params = {};
           params["href"] =
             "http://data.example.org/resource/foo";
           params[gadgets.io.RequestParameters.AUTHORIZATION] =
             gadgets.io.AuthorizationType.SIGNED;
   
           function fetchData() {
             osapi.http.get(params).execute(
               function(result) { ... }
             );
           }
   
           gadgets.util.registerOnLoadHandler(fetchData);
         </script>
         ...
       </Content>
     </Module>

   To use Signed Fetch with the JavaScript APIs, the value of the
   "AUTHORIZATION" parameter (represented in JavaScript by the constant
   gadgets.io.RequestParameter.AUTHORIZATION) MUST be "signed".  The
   following additional parameters that affect the signing of a request
   MAY also be specified:

   SIGN_OWNER Represented in JavaScript by the constant
      gadgets.io.RequestParameter.SIGN_OWNER, the value is a boolean
      that indicates whether the container SHOULD include the identity
      of the Instance Owner (Section 1.3) when signing the request.  If





(surname)               Expires October 31, 2012               [Page 45]

Internet-Draft                Core-Gadget                       May 2012

      not specified, the container is required to assume a value of
      True.

   SIGN_VIEWER Represented in JavaScript by the constant
      gadgets.io.RequestParameter.SIGN_VIEWER, the value is a boolean
      that indicates whether the container SHOULD include the identity
      of the current Viewer when signing the request.  If not specified,
      the container is required to assume a value of True.

   Within <Preload>, <Link> and <Content> elements:

   <Module>
     <ModulePrefs>
       ...
       <Preload authz="signed" href="http://example.org/resources/bar" />
       <Link authz="signed" href="http://example.org/images/foo.png" rel="icon" />
       ...
     </ModulePrefs>
     <Content type="html" href="http://example.org/content" authz="signed" />
   </Module>

   To use Signed Fetch with the <Preload>, <Link> and <Content>
   elements, the "authz" attribute MUST be specified with a value of
   "signed".  The following additional attributes that affect the
   signing of a request MAY also be specified:

   sign_owner Equivalent to the SIGN_OWNER parameter used in the
      JavaScript API, the value is a String matching either "true" or
      "false" indicating whether the container SHOULD include the
      identity of the Instance Owner (Section 1.3) when signing the
      request.  If not specified, the container is required to assume a
      value of "true".

   sign_viewer Equivalent to the SIGN_VIEWER parameter used in the
      JavaScript API, the value is a String matching either "true" or
      "false" indicating whether the container SHOULD include the
      identity of the current Viewer when signing the request.  If not
      specified, the container is required to assume a value of "true".

3.1.2.  OAuth Support

   The OAuth protocol provides the ability for the owner of a resource
   to grant limited permission to an application to perform actions on
   behalf of the owner.  For instance, an application might wish to
   display a listing of documents owned by the current Viewer.  To do
   so, the application can work with the Container to request
   authorization from the Viewer to access the service the Viewer uses
   to manage documents and files.  When granted, such access can be
   limited, for example, to allow only the most basic read operations
   occurring within a specified period of time.





(surname)               Expires October 31, 2012               [Page 46]

Internet-Draft                Core-Gadget                       May 2012


   Currently, OpenSocial Containers are required to implement support
   for versions 1.0a [RFC5849] and 2.0 [I-D.ietf-oauth-v2] of the OAuth
   protocol.  Specifically, the container MUST be capable of acting as
   either an OAuth 1.0a or OAuth 2.0 client on behalf of application
   instances hosted by the container.  That is, whenever an application
   requires access to protected external resources, the container MUST
   be capable of using either version of the OAuth Protocol to request
   appropriate permission to access the resource.

   Likewise, when an application or some other third party wishes to
   access social data provided by the OpenSocial Container, the
   Container MUST be capable of providing an OAuth Authorization Service
   -- implementing either or both versions of the OAuth protocol -- that
   those applications can work with to acquire appropriate access
   permissions.  If a container implementation chooses not to support
   the use of one of the required versions of the OAuth protocol, it
   SHOULD, at the very least, implement the minimal level of
   functionality required to issue properly formed negative responses to
   requests using that version.  For instance, if a client application
   sends an OAuth 1.0a authorization token request to a container that
   only supports OAuth 2.0, the container SHOULD be capable of
   responding to that request with an appropriate OAuth 1.0a response
   rejecting the request.

   From the Application developer's point of view, there are no
   differences between working with OAuth-protected resources provided
   by the container or those provided by a third-party.  The sections
   that follow detail the responsibilities, requirements and mechanisms
   application developers need to work with the OAuth protocol.
   Additional requirements and considerations for OpenSocial Container
   implementations are discussed within the OpenSocial Common Container
   specification [TODO: Ref CC spec].

3.1.2.1.  Declaring and Using OAuth Services

   Before an application can make use of OAuth protected resources, the
   specification document MUST tell the container about the OAuth
   services to use.  This is done by using one or more <OAuth> or
   <OAuth2> elements within the <ModulePrefs>.

   In the partial specification below, the <OAuth> element is used to
   declare a dependency on a third party service providing OAuth 1.0a
   support.











(surname)               Expires October 31, 2012               [Page 47]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
       <OAuth>
         <Service view="oauth">
           <Request url="http://example.com/request" method="get" />
           <Access url="http://example.com/access" method="get" />
           <Authorization url="http://example.com/authorization" />
         </Service>
       </OAuth>
       ...
     </ModulePrefs>
     ...
     <Content type="html" view="oauth">
       ...
     </Content>
   </Module>

   The <Service> element provides the container with the locations of
   the various OAuth service components that are used to acquire
   authorization as well as the name of an Application View the
   container can use to interact with the Viewer whenever it determines
   that authorization must be acquired to continue.

   Similarly, dependencies on OAuth 2.0-based services are declared
   using the <OAuth2> element:

   <Module>
     <ModulePrefs>
       ...
       <OAuth2>
         <Service view="oauth">
           <Authorization url="http://example.com/authorization" method="get" />
           <Token url="http://example.org/token" method="get" />
         </Service>
       </OAuth2>
       ...
       <Content type="html" view="oauth">
         ...
       </Content>
     </ModulePrefs>
     ...
   </Module>

   Once declared, developers can use the specified OAuth services
   anywhere within the specification document where remote resources are
   accessed, including uses of the "osapi" and "gadgets.io.makeRequest"
   JavaScript APIs, <Preload> elements, <Link> elements, and Redirect or
   Proxy type <Content> elements.

   The examples that follow illustrate various uses of the OAuth
   services.


(surname)               Expires October 31, 2012               [Page 48]

Internet-Draft                Core-Gadget                       May 2012


   Within uses of the "osapi.http" API:

     <Module>
       ...
       <Content type="html">
         ...
         <script>
           var params = {};
           params["href"] =
             "http://data.example.org/resource/foo";
           params[gadgets.io.RequestParameters.AUTHORIZATION] =
             gadgets.io.AuthorizationType.OAUTH;
   
           function fetchData() {
             osapi.http.get(params).execute(
               function(result) { ... }
             );
           }
   
           gadgets.util.registerOnLoadHandler(fetchData);
         </script>
         ...
       </Content>
     </Module>

   When using OAuth version 1.0a with the JavaScript APIs, the value of
   the "AUTHORIZATION" parameter, represented by the "constant
   gadgets.io.RequestParameters.AUTHORIZATION" alias in JavaScript, MUST
   equal "oauth" (represented in JavaScript using the alias
   "gadgets.io.RequestParameters.OAUTH").

   When using OAuth version 2.0, the value of the "AUTHORIZATION"
   parameter MUST be "oauth2" (represented in JavaScript using the alias
   "constant gadgets.io.RequestParameters.OAUTH2").

   The following additional parameters that affect the containers
   application of the OAuth protocol MAY also be specified:

















(surname)               Expires October 31, 2012               [Page 49]

Internet-Draft                Core-Gadget                       May 2012


   +------------------+-------------------------------+----------------+
   | Name             | Alias                         | Description    |
   +------------------+-------------------------------+----------------+
   | "OAUTH_RECEIVED_ | gadgets.io.RequestParameters. | When the       |
   | CALLBACK"        | OAUTH_RECEIVED_CALLBACK       | container      |
   |                  |                               | sends a        |
   |                  |                               | request to an  |
   |                  |                               | OAuth service  |
   |                  |                               | provider       |
   |                  |                               | asking for     |
   |                  |                               | permission to  |
   |                  |                               | access a given |
   |                  |                               | resource, it   |
   |                  |                               | will, by       |
   |                  |                               | default,       |
   |                  |                               | specify a      |
   |                  |                               | default        |
   |                  |                               | container-     |
   |                  |                               | specific       |
   |                  |                               | callback URI   |
   |                  |                               | that the OAuth |
   |                  |                               | service        |
   |                  |                               | provider will  |
   |                  |                               | use to         |
   |                  |                               | redirect       |
   |                  |                               | control back   |
   |                  |                               | to the         |
   |                  |                               | container and  |
   |                  |                               | deliver the    |
   |                  |                               | requested      |
   |                  |                               | access token.  |
   |                  |                               | In certain     |
   |                  |                               | cases, a       |
   |                  |                               | specific       |
   |                  |                               | application    |
   |                  |                               | instance might |
   |                  |                               | need to        |
   |                  |                               | override the   |
   |                  |                               | default        |
   |                  |                               | callback URI.  |
   |                  |                               | The "OAUTH_REC |
   |                  |                               | EIVED_CALLBACK |
   |                  |                               | " parameter    |
   |                  |                               | can be used to |
   |                  |                               | specify an     |
   |                  |                               | alternative    |
   |                  |                               | absolute URI   |
   |                  |                               | reference.     |
   | "OAUTH_REQUEST_T | gadgets.io.RequestParameters. | In certain     |
   | OKEN"            | OAUTH_REQUEST_TOKEN           | circumstances, |




(surname)               Expires October 31, 2012               [Page 50]

Internet-Draft                Core-Gadget                       May 2012

   |                  |                               | instances of   |
   |                  |                               | an application |
   |                  |                               | can be         |
   |                  |                               | preauthorized  |
   |                  |                               | to access      |
   |                  |                               | particular     |
   |                  |                               | resources and  |
   |                  |                               | issued an      |
   |                  |                               | OAuth Request  |
   |                  |                               | Token in       |
   |                  |                               | advance. The O |
   |                  |                               | AUTH_REQUEST_T |
   |                  |                               | OKEN parameter |
   |                  |                               | allows the     |
   |                  |                               | application to |
   |                  |                               | provide such   |
   |                  |                               | preapproved    |
   |                  |                               | request tokens |
   |                  |                               | to the         |
   |                  |                               | container for  |
   |                  |                               | use.           |
   | "OAUTH_REQUEST_T | gadgets.io.RequestParameters. | When using     |
   | OKEN_SECRET"     | OAUTH_REQUEST_TOKEN_SECRET    | preapproed     |
   |                  |                               | request tokens |
   |                  |                               | with the OAUTH |
   |                  |                               | _REQUEST_TOKEN |
   |                  |                               | parameter, the |
   |                  |                               | OAUTH_REQUEST_ |
   |                  |                               | TOKEN_SECRET   |
   |                  |                               | parameter can  |
   |                  |                               | be used to     |
   |                  |                               | provide the    |
   |                  |                               | associated     |
   |                  |                               | request token  |
   |                  |                               | secret.        |
   | "OAUTH2_SCOPE"   | gadgets.io.RequestParameters. | When using     |
   |                  | OAUTH2_SCOPE                  | OAuth version  |
   |                  |                               | 2.0, the       |
   |                  |                               | OAUTH2_SCOPE   |
   |                  |                               | parameter is   |
   |                  |                               | used to        |
   |                  |                               | specify the    |
   |                  |                               | scope to be    |
   |                  |                               | used with this |
   |                  |                               | request.       |
   |                  |                               | Access Token   |
   |                  |                               | Scope is       |
   |                  |                               | defined in     |
   |                  |                               | Section 3.3 of |
   |                  |                               | [I-D.ietf-     |
   |                  |                               | oauth-v2].     |




(surname)               Expires October 31, 2012               [Page 51]

Internet-Draft                Core-Gadget                       May 2012

   | "OAUTH_SERVICE_N | gadgets.io.RequestParameters. | When multiple  |
   | AME"             | OAUTH_SERVICE_NAME            | OAuth services |
   |                  |                               | are declared   |
   |                  |                               | within the     |
   |                  |                               | <ModulePrefs>  |
   |                  |                               | of an          |
   |                  |                               | Application,   |
   |                  |                               | the OAUTH_SERV |
   |                  |                               | ICE_NAME       |
   |                  |                               | parameter can  |
   |                  |                               | be used to     |
   |                  |                               | specify which  |
   |                  |                               | service to use |
   |                  |                               | for the        |
   |                  |                               | request.       |
   | "OAUTH_TOKEN_NAM | gadgets.io.RequestParameters. | Provides a     |
   | E"               | OAUTH_TOKEN_NAME              | simple label   |
   |                  |                               | that           |
   |                  |                               | application    |
   |                  |                               | can use to     |
   |                  |                               | refer to the   |
   |                  |                               | OAuth Access   |
   |                  |                               | Token granting |
   |                  |                               | access to      |
   |                  |                               | particular     |
   |                  |                               | resources.  If |
   |                  |                               | unspecified    |
   |                  |                               | the value is   |
   |                  |                               | assumed to be  |
   |                  |                               | an empty       |
   |                  |                               | string.        |
   |                  |                               | Gadget         |
   |                  |                               | instances can  |
   |                  |                               | use multiple   |
   |                  |                               | token names if |
   |                  |                               | they access    |
   |                  |                               | multiple       |
   |                  |                               | resources from |
   |                  |                               | a single       |
   |                  |                               | source. For    |
   |                  |                               | example, an    |
   |                  |                               | application    |
   |                  |                               | that accesses  |
   |                  |                               | a contact list |
   |                  |                               | and a calendar |
   |                  |                               | might used the |
   |                  |                               | token name     |
   |                  |                               | "contacts" to  |
   |                  |                               | refer to the   |
   |                  |                               | OAuth token    |
   |                  |                               | providing      |
   |                  |                               | access to the  |
   |                  |                               | contact data   |
   |                  |                               | and the name   |

(surname)               Expires October 31, 2012               [Page 52]

Internet-Draft                Core-Gadget                       May 2012

   |                  |                               | "calendar" to  |
   |                  |                               | refer to the   |
   |                  |                               | token          |
   |                  |                               | providing      |
   |                  |                               | access to the  |
   |                  |                               | calendar.      |
   | "OAUTH_USE_TOKEN | gadgets.io.RequestParameters. | For certain    |
   | "                | OAUTH_USE_TOKEN               | kinds of       |
   |                  |                               | actions on     |
   |                  |                               | certain        |
   |                  |                               | resources, an  |
   |                  |                               | OAuth service  |
   |                  |                               | provider might |
   |                  |                               | not require    |
   |                  |                               | that the       |
   |                  |                               | container and  |
   |                  |                               | application    |
   |                  |                               | walk through   |
   |                  |                               | the complete   |
   |                  |                               | OAuth process  |
   |                  |                               | to acquire an  |
   |                  |                               | Access Token.  |
   |                  |                               | In such        |
   |                  |                               | scenarios, the |
   |                  |                               | service        |
   |                  |                               | providing      |
   |                  |                               | access to the  |
   |                  |                               | resource will  |
   |                  |                               | verify the     |
   |                  |                               | OAuth Consumer |
   |                  |                               | Key provided   |
   |                  |                               | within the     |
   |                  |                               | request then   |
   |                  |                               | allow the      |
   |                  |                               | request to     |
   |                  |                               | proceed. In    |
   |                  |                               | other cases, a |
   |                  |                               | resource       |
   |                  |                               | provider might |
   |                  |                               | grant limited  |
   |                  |                               | access to a    |
   |                  |                               | requester if   |
   |                  |                               | the resource   |
   |                  |                               | owner has not  |
   |                  |                               | provided       |
   |                  |                               | explicit       |
   |                  |                               | authorization  |
   |                  |                               | but offer      |







(surname)               Expires October 31, 2012               [Page 53]

Internet-Draft                Core-Gadget                       May 2012

   |                  |                               | additional     |
   |                  |                               | functionality  |
   |                  |                               | if an OAuth    |
   |                  |                               | Access Token   |
   |                  |                               | has been       |
   |                  |                               | issued.        |
   |                  |                               | Typically,     |
   |                  |                               | however, most  |
   |                  |                               | resource       |
   |                  |                               | providers will |
   |                  |                               | only allow a   |
   |                  |                               | requester to   |
   |                  |                               | access         |
   |                  |                               | protected      |
   |                  |                               | resources if   |
   |                  |                               | an Access      |
   |                  |                               | Token is       |
   |                  |                               | included in    |
   |                  |                               | the request.   |
   |                  |                               | The OAUTH_USE_ |
   |                  |                               | TOKEN          |
   |                  |                               | parameter can  |
   |                  |                               | be used by the |
   |                  |                               | application as |
   |                  |                               | a hint to the  |
   |                  |                               | container as   |
   |                  |                               | to whether the |
   |                  |                               | acquisition    |
   |                  |                               | and use of an  |
   |                  |                               | Access Token   |
   |                  |                               | is required or |
   |                  |                               | optional. The  |
   |                  |                               | acceptable     |
   |                  |                               | values for the |
   |                  |                               | OAUTH_USE_TOKE |
   |                  |                               | N are defined  |
   |                  |                               | in Section     |
   |                  |                               | 3.1.2.1.1.     |
   +------------------+-------------------------------+----------------+

   Within <Preload> and <Link> elements:

   <Module>
     <ModulePrefs>
       ...
       <OAuth>...</OAuth>
       <Preload authz="oauth" href="http://example.org/resources/bar" />
       <Link authz="oauth" href="http://example.org/images/foo.png" rel="icon" />
       ...






(surname)               Expires October 31, 2012               [Page 54]

Internet-Draft                Core-Gadget                       May 2012

     </ModulePrefs>
     <Content type="html">
       ...
     </Content>
   </Module>

   Within proxy or redirect type <Content> elements:

   <Module>
     ...
     <Content authz="oauth" href="http://example.org/content/foo" />
     ...
   </Module>

   When using OAuth 1.0a with the <Preload>, <Link> and <Content>
   elements, the "authz" attribute MUST be specified with a value of
   "oauth".

   When using OAuth 2.0, the "authz" attribute MUST specify a value of
   "oauth2".

   The following additional attributes that affect the containers
   application of the OAuth protocol MAY also be specified.  Each
   corresponds to one of the optional parameters for the JavaScript API
   listed above and specify identical values:

   o  "oauth_received_callback"

   o  "oauth_request_token"

   o  "oauth_request_token_secret"

   o  "oauth2_scope"

   o  "oauth_service_name"

   o  "oauth_token_name"

   o  "oauth_use_token"

   If an application requires access to multiple OAuth service
   providers, then it MUST declare each provider and specify a unique
   label for each that identifies the specific provider to be used for
   each request.  Each of the <OAuth> and <OAuth2> elements can contain
   as many <Service> element instances as is necessary.

   For instance, in the example that follows, both the <Preload> element
   and the JavaScript API call use the OAuth service labeled as "other"
   within the <ModulePrefs>, while the <Link> element uses the "default"
   OAuth service defined by the <Service> tag that omits the name
   attribute.




(surname)               Expires October 31, 2012               [Page 55]

Internet-Draft                Core-Gadget                       May 2012


     <Module>
       <ModulePrefs>
         ...
         <OAuth>
           <Service view="oauth">
             <Request url="http://example1.com/request" method="get" />
             <Access url="http://example1.com/access" method="get" />
             <Authorization url="http://example1.com/authorization" />
           </Service>
           <Service name="other" view="other.oauth">
             <Request url="http://example2.net/request" method="get" />
             <Access url="http://example2.net/access" method="get" />
             <Authorization url="http://example2.net/authorization" />
           </Service>
           <Preload authz="oauth" oauth_service_name="other"
             href="http://example.org/resources/bar" />
           <Link authz="oauth" href="http://example.org/images/foo.png" rel="icon" />
         </OAuth>
         <Content type="html">
           ...
           <script>
             var params = {};
             params["href"] =
               "http://data.example.org/resource/foo";
             params[gadgets.io.RequestParameters.AUTHORIZATION] =
               gadgets.io.AuthorizationType.OAUTH;
             params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] =
               "other";
   
             function fetchData() {
               osapi.http.get(params).execute(
                 function(result) { ... }
               );
             }
   
             gadgets.util.registerOnLoadHandler(fetchData);
           </script>
           ...
         </Content>
         <Content type="html" view="oauth">
           ...
         </Content>
         <Content type="html" view="other.oauth">
           ...
         </Content>
       </ModulePrefs>
     </Module>

   When multiple OAuth services are used, the "OAUTH_SERVICE_NAME"





(surname)               Expires October 31, 2012               [Page 56]

Internet-Draft                Core-Gadget                       May 2012

   parameter and the "oauth_service_name" attribute are used within the
   JavaScript API and XML elements to indicate the appropriate OAuth
   service to use for the request.

3.1.2.1.1.  The "OAUTH_USE_TOKEN" parameter

   The value of the "OAUTH_USE_TOKEN" parameter MUST be one of:

   never Tells the container that the Access Token is never required.
      Requests will be sent to the remote endpoint without an OAuth
      Access Token.

   if_available Tells the container that use of the Access Token is
      optional.  If an Access token has been acquired, it will be
      included in the request sent to the remote endpoint, otherwise the
      request will be sent without an Access Token.

   always Tells the container that use of the Access Token is required.
      If an appropriate Access Token has not yet been acquired, the
      container will work with the application and the OAuth Service
      Provider to seek appropriate authorization and acquire an Access
      Token.

   If the OAUTH_USE_TOKEN parameter is not specified, the value is
   assumed to be "always".

3.1.2.2.  Processing Model

   When the container receives any request for which the OAuth protocol
   is to be used, regardless of whether the request is submitted via the
   JavaScript API or via elements in the specification document, it MUST
   adhere to the following requirements and processing model:

   1.  For any request for which an access token is not required (e.g.
       the value of the "OAUTH_USE_TOKEN" parameter equals "never"):

       *  When OAuth 1.0a is used, the container will send a request to
          the remote endpoint as described in Section 3 of [RFC5849]
          with the exception that the "oauth_token" will be omitted.
          Such requests are generally identical to those sent when using
          the Signed Fetch mechanism.

       *  When OAuth version 2.0 is used, requests are sent without any
          authentication information included.  This is the same as
          sending the request using an "AUTHORIZATION" value of "NONE".

   2.  For any request for which an access token is considered optional
       (e.g.  the value of the OAUTH_USE_TOKEN parameter is







(surname)               Expires October 31, 2012               [Page 57]

Internet-Draft                Core-Gadget                       May 2012

       "if_available"):

       *  When OAuth 1.0a is used and an Access Token appropriate to the
          current request is known to the container, a request that
          includes the token will be sent to the remote endpoint as
          described in Section 7 of [RFC5849].  When using OAuth 2.0,
          the container will send a request using the access token as
          described in Section 3.1.2.2.2.

       *  If an appropriate Access Token, and OAuth 1.0a is used, the
          container will send a request to the remote endpoint as
          described in Section 3 of [RFC5849] with the exception that
          the "oauth_token" will be omitted.  Such requests are
          generally identical to those sent when using the Signed Fetch
          mechanism.  If OAuth 2.0 is used, requests are sent without
          any authentication information included.

   3.  For any request for which an access token is required (e.g.  the
       value of the OAUTH_USE_TOKEN parameter is "always" or the
       OAUTH_USE_TOKEN is unspecified):

       *  If using OAuth 1.0a and an appropriate Access Token is known
          by the container, a request as defined in Section 3 of
          [RFC5849] is sent to the remote endpoint.  If using OAuth 2.0,
          a request is sent as described in Section 3.1.2.2.2 is sent.

       *  When an appropriate Access Token is not known to the
          container, the container MUST acquire an access token using
          the processes described in Section 3.1.2.2.1.  Once an Access
          Token is acquired, a request using the token will be sent to
          the server.  If a token cannot be acquired, the container will
          report an error back to the application.

3.1.2.2.1.  Acquiring Access Tokens

   When using any version of OAuth, a container will first need to seek
   authorization from the owner of a resource prior to attempting to
   access it.  Generally, this is done first by the container
   interacting with the OAuth Authorization Provider to retrieve a
   "request token" which is then exchanged for an "access token".  The
   details for how each of those steps are completed varies for each
   version of the OAuth protocol.

   First, once the container determines that an access token needs to be
   acquired prior to completing a request, it will examine the "view"
   attribute on the appropriate OAuth <Service> element to determine the
   name of the Application View it will render to interact with the
   Viewer.

   If the view specified by the attribute does not exist, or if the
   "view" attribute is not specified:




(surname)               Expires October 31, 2012               [Page 58]

Internet-Draft                Core-Gadget                       May 2012


   o  And the request being processed is to retrieve content specified
      from either the <Link>, <Preload>, <Content> or <os:HttpRequest>
      elements, the container MUST abort the request and signal an error
      to the Viewer indicating that the OAuth authorization could not be
      completed; or

   o  If the request being processed is the result of invoking either
      the "gadgets.io.makeRequest", "osapi.http" or any of the "osapi.*"
      service JavaScript APIs, the container SHOULD abort the request
      and invoke the callback function passed in to the JavaScript
      method with an indication that OAuth Authorization is required.
      The Application can then choose to handle the authentication on
      it's own, as described in Section 4.2.8. However, the container
      MAY choose to abort the request and signal an error that the OAuth
      authorization could not be completed.

   If the view specified by the attribute does exist, the container will
   render the view -- typically within a modal user interface element
   that blocks all other interactions with the container until the
   authorization is complete or canceled.  The rendered view MUST handle
   the Viewers interaction with the third party OAuth Authorization
   service as described in Section 4.2.8 then return control back to the
   container once the authorization process has been completed and an
   access token has been issued.  Once the view has been dismissed, the
   container will proceed with the request using the acquired access
   token.

3.1.2.2.2.  Sending OAuth 2.0 Protected Requests

   When using OAuth 2.0 to premptively send authenticated requests,
   containers MUST support the use of OAuth 2.0 Bearer Tokens as
   described by [I-D.ietf-oauth-v2-bearer] and Mac Tokens as described
   by [I-D.ietf-oauth-v2-http-mac].  Implementations MAY choose to
   support additional types of tokens.

   The determination of exactly how the OAuth 2.0 access token is
   conveyed within a request to a protected resource is determined
   entirely by the type of access token that was issued.

   If the access token issued to the container is a Bearer-type token,
   the request sent to the remote endpoint MUST contain an Authorization
   header field using the "Bearer" scheme that includes the access
   token:

   For example:

   GET /some/remote/content HTTP/1.1
   Host: example.org
   Authorization: Bearer ABCDEF1234567FEDCBA

   Because access tokens sent using the Bearer scheme are sent in clear-
   text, all requests using the Bearer authentication scheme MUST be
   sent using SSL or TLS.

(surname)               Expires October 31, 2012               [Page 59]

Internet-Draft                Core-Gadget                       May 2012


   If the access token issued to the container is a Mac-type token, the
   request sent to the remote endpoint MUST contain an Authorization
   header field using the "Mac" scheme that includes "id", "nonce" and
   "mac" fields as described by [I-D.ietf-oauth-v2-http-mac].

   For example:

   GET /some/remote/content HTTP/1.1
   Host: example.org
   Authorization: MAC id="h480djs93hd8",
                  nonce="274312:dj83hs9s",
                  mac="kDZvddkndxvhGRXZhvuDjEWhGeE="

3.1.2.2.3.  401 Unauthorized Responses

   When attempting to interact with protected remote resources on behalf
   of an Application, and an authentication mechanism is not
   prespecified by the Application using either the "AUTHORIZATION"
   request parameter or the "authz" attribute; or when the
   authentication mechanism specified by the Application does not match
   the authentication scheme required by the remote resource, the
   container might receive an error response from the remote endpoint
   indicating that authentication is required.  Such responses typically
   take the form of 401 Unauthorized messages.

   When encountering such a response, the container will determine, if
   possible, the authentication scheme required by the remote endpoint
   by examining the WWW-Authentication header field included in the
   response.

   If the WWW-Authentication header specifies support for the "OAuth"
   scheme, the container MAY either choose to abort the request and
   signal to the Application that an error has occurred and that the
   request cannot be completed or, it MAY attempt to reprocess the
   request as specified in Section 3.1.2.2 using the OAuth 1.0a
   protocol.

   If the WWW-Authentication header specifies support for either the
   "Bearer" or "Mac" schemes, the container MAY either choose to abort
   the request and signal to the Application that an error has occurred
   and that the request cannot be completed or, it MAY attempt to
   reprocess the request as specified in Section 3.1.2.2 using the OAuth
   2.0 protocol.

   If the WWW-Authentication header field specifies multiple supported
   authentication schemes, the container SHOULD evaluate each in the
   order they are encoded within the field value and use the first
   supported scheme it finds.






(surname)               Expires October 31, 2012               [Page 60]

Internet-Draft                Core-Gadget                       May 2012


   When the selected authentication scheme is OAuth 1.0 or OAuth 2.0,
   the container will check the Application specification for an
   appropriate OAuth <Service> element it can use to acquire the
   necessary authorization.  It will do so by first checking to see if
   any of the provided <Service> elements contain a "realm" attribute
   that is equal to the realm specified by the WWW-Authenticate header
   field, if any.  If a matching <Service> element is found, it is
   selected.  If, however, the realm is not specified in the WWW-
   Authenticate header field -- as will typically be the case when using
   the Mac authentication scheme -- or if a matching <Service> element
   cannot be found, the container will look for an <Service> element
   that matches the version of the OAuth protocol selected and that does
   not specify a name attribute.

   If an appropriate OAuth <Service> element is not provided by the
   Application, the container MUST abort the request and signal an error
   to the Application indicating the request cannot be completed.

   Containers MAY choose to support any other authentication schemes
   that might be indicated by the WWW-Authentication header; however,
   such support is undefined by this specification.

   If the container does not support any of the schemes specified by the
   WWW-Authentication header, then it MUST abort the request and signal
   an error to the Application indicating the request cannot be
   completed.

3.2.  Caching

   Application developers are provided with a variety of mechanisms for
   accessing external, web-accessible resources.  They can, for
   instance:

   o  Use Redirected or Proxy type <Content> elements,

   o  Preload resources using the <Preload> elements,

   o  Link to icons, screenshots and thumbnail images,

   o  Send arbitary HTTP requests using the "osapi.http" and
      "gadgets.io.makeRequest" APIs,

   o  or use Data Pipeline elements (Section 3.6) to access resources.

   The container is also permitted to cache the Application
   Specification Document itself.








(surname)               Expires October 31, 2012               [Page 61]

Internet-Draft                Core-Gadget                       May 2012


   In each of these cases, the container is responsible for sending the
   actual HTTP request messages to the remote resource and making the
   data returned in the response available to the application.  In order
   to optimize performance and reduce the overall number of HTTP
   requests that are actually sent, containers SHOULD provide caching of
   HTTP responses as defined in [RFC2616].  If the container provides
   caching, it MUST honor all requirements as specified by [RFC2616].
   Containers MAY support caching for all requests or MAY determine
   whether to provide caching per request.

   For example, given the following partial application specification
   document:

   <Module>
     ...
     <Content type="html" href="http://example.org/foo" />
   </Module>

   When the container attempts to render the default view of the
   application, it will send an HTTP GET request to the IRI provided

   GET /foo HTTP/1.1
   Host: example.org

   Assuming the server return a successful response that includes
   appropriate caching instructions:

     HTTP/1.1 200 OK
     Content-Type: text/html
     Cache-Control: must-revalidate, max-age=3600
     ETag: "abc123zyx"
   
     <html>...</html>

   The container is permitted to cache the response and use the cached
   representation in response to all subsequent requests to the same
   request URI, without revalidation for a period of 3600 seconds (1
   hour), after which the container is required to revalidate the
   resource to determine if any changes to the resource representation
   have occurred.

   Such revalidation is performed by issuing a conditional HTTP request
   as defined by [RFC2616]:

   GET /foo HTTP/1.1
   Host: example.org
   If-None-Match: "abc123zyx"

   If the server returns a response indicating that the resource has
   been modified (i.e.  with a 412 Precondition Failed in this example),
   the container is permitted to continue using the cached
   representation of the resource to fulfill the request.


(surname)               Expires October 31, 2012               [Page 62]

Internet-Draft                Core-Gadget                       May 2012


   For all XML elements within the Application Specification Document
   that represent a request for an external resource (<Preload>, <Link>,
   <Content< and <os:HttpRequest>), an additional "refresh_interval"
   attribute MAY be specified whose value indicates the total number of
   seconds the container SHOULD consider a cached response to be valid.
   If specified, and the value indicates a period of time that is less
   than the period of time established by either the Expires header in
   the HTTP response or either the Cache-Control max-age or s-maxage
   directives (as specified by [RFC2616]), then the value of the
   "refresh_interval" attribute overrides the default caching
   characteristics.  The container MUST NOT cache a response for longer
   than the period of time specified by either the Expires header, max-
   age directive or s-maxage directives.

   For example:

   <Content type="html" href="http://example.org/foo" refresh_interval="3600" />

   For all JavaScript API requests that represent a request for an
   external resource, such as each of the "osapi.http" methods and the
   "gadgets.io.makeRequest" API, an optional "REFRESH_INTERVAL"
   parameter MAY be specified whose value indicates the total number of
   seconds that container SHOULD consider a cached response to be valid.
   If specified, the same rules apply as those specified for the
   "refresh_interval" attribute.

   For convenience, the JavaScript alias
   "gadgets.io.RequestParameters.REFRESH_INTERVAL" is provided for the
   "REFRESH_INTERVAL" parameter.

   For example:

   gadgets.io.makeRequest(
     "http://example.org/foo",
     function(response) {
       // ...
     },
     {
       gadgets.io.RequestParameters.REFRESH_INTERVAL: 3600
     }
   );

3.3.  Variable Substitution

   The Variable Substitution capability provides the ability for
   application developers to use special "Expression Language" (EL)
   statements within their application specifications that the container
   will replace with appropriate values when a View is rendered.

   For example, given the following partial application specification:




(surname)               Expires October 31, 2012               [Page 63]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
     </ModulePrefs>
     <Content type="html">
       One plus one is equal to ${1+1}.
     </Content>
   </Module>

   When the default view for this application is rendered, the
   expression "${1+1}" will be evaluated and replaced with the value
   "2", resulting in the output:

   One plus one is equal to 2.

   Expression Language statements can be used to to access values
   provided by reserved variable keys, variables defined using data
   pipeline tags as defined by Section 3.6, or literal values as in the
   previous example.

   The syntax for expressions is based on a subset of the Java Server
   Pages Expression Language (JSPEL) [JSPEL].  All basic operations
   defined by the JSPEL specification, such as string concatenation and
   matching, are supported.  However, the definition of custom
   functions, as defined in [JSPEL], Section 1.15, is not supported at
   this time.

   Containers are required to support variable substitution using this
   Expression Language syntax.

3.3.1.  Using Literal Statements

   As is defined by the JSPEL [JSPEL] specification, literal statements
   can be used.  For instance, the "${1+1}" used in the previous example
   is a literal statement that outputs the results of adding the two
   numbers together.  All forms of literal statement allowed by JSPEL
   may be used within OpenSocial.

   It is also possible to combine the use of literal statements with
   other variables.  For instance, the expression "${1 + count}" will be
   replaced by the numeric value of the variable "count" plus the number
   one.

3.3.2.  Using Data Pipeline Variables

   For all application instances, there is a "DataContext" object that
   stores and provides access to all of the data associated with the
   Application's use of the Data Pipelining (Section 3.6) capability.
   The information stored within the "DataContext" can be accessed
   either via expression statements or using the "opensocial.data" API.




(surname)               Expires October 31, 2012               [Page 64]

Internet-Draft                Core-Gadget                       May 2012


   For instance, if we define a simple variable using the data
   pipelining tags, we can access the value of that variable by naming
   it within a substitution expression:

   <Module xmlns:os="http://ns.opensocial.org/2008/markup">
     ...
     <Data>
       <os:Var key="myNumber" value="1" />
     </Data>
     <Content type="html">
       The value of myNumber is: ${myNumber}
     </Content>
   </Module>

   Additional information on the use of the "DataContext" with variable
   substitution can be found in Section 3.6 and [OpenSocial-Templating].

3.3.3.  Using Reserved Variable Keys

   Reserved Variable Keys are reserved variables names whose values are
   provided by the container.  The keys take the form "{Prefix}.{Var}"
   where "{Prefix}" identifies one of the predefined scopes below, and
   "{Var}" specifies a specific variable within the identified scope.
   The applicability of each Prefix and Var combination will vary
   depending on where within the specification document the variable
   substitution is occurring.

   Container implementations and individual extensions to the core
   OpenSocial specification are free to introduce additional reserved
   variable key "{Prefix}" names in addition to those listed here.
























(surname)               Expires October 31, 2012               [Page 65]

Internet-Draft                Core-Gadget                       May 2012


   +-------------+-------------------------------------+---------------+
   | Prefix      | Description                         | Applicability |
   +-------------+-------------------------------------+---------------+
   | Msg         | References all message bundle       | "Msg.*"       |
   |             | variables for the current locale.   | variables are |
   |             | The values of the "{Var}" component | available     |
   |             | are selected from the applicable    | anywhere      |
   |             | message bundle. For instance, if    | within the    |
   |             | the bundle includes a key "FOO",    | application,  |
   |             | then the expression "${Msg.FOO}"    | including     |
   |             | will be replaced by the localized   | ModulePrefs   |
   |             | value associated with "FOO" in the  | and root      |
   |             | bundle.                             | Module        |
   |             |                                     | element.      |
   |             |                                     | Message       |
   |             |                                     | bundle values |
   |             |                                     | may reference |
   |             |                                     | other message |
   |             |                                     | bundle        |
   |             |                                     | variables by  |
   |             |                                     | making use of |
   |             |                                     | the           |
   |             |                                     | "${Msg.*}"    |
   |             |                                     | syntax within |
   |             |                                     | the value.    |
   | Bidi        | Used to reference information about | "Bidi.*"      |
   |             | the currently selected Locale's     | variables are |
   |             | default text directionality as      | available     |
   |             | specified by the text_direction     | anywhere      |
   |             | attribute on the <Locale> element.  | within the    |
   |             | The BIDI variables are discussed in | application,  |
   |             | detail in Section 3.4.              | including     |
   |             |                                     | ModulePrefs   |
   |             |                                     | and root      |
   |             |                                     | Module        |
   |             |                                     | element.      |
   | ViewParams  | References all values passed using  | "ViewParam.*" |
   |             | the "viewParams" parameter when     | variables are |
   |             | calling to                          | available     |
   |             | gadgets.views.requestNavigateTo     | only within   |
   |             | (Section 4.2.14.1.1.7).  The values | Content       |
   |             | of the "{Var}" component correlates | blocks and    |
   |             | to each view parameter. Expression  | Data Pipeline |
   |             | statements using this prefix will   | (Section 3.6) |
   |             | resolve to the same values as calls | tags.         |
   |             | made to the                         |               |
   |             | "gadgets.views.getParams" API. For  |               |
   |             | instance, the expression            |               |
   |             | "${ViewParams.FOO}" will be         |               |
   |             | replaced by the same value returned |               |
   |             | by the API call                     |               |
   |             | "gadgets.views.getParams()["FOO"]". |               |


(surname)               Expires October 31, 2012               [Page 66]

Internet-Draft                Core-Gadget                       May 2012

   | Prefs       | References all named values defined | Available     |
   |             | by <UserPref> elements contained in | anywhere      |
   |             | the application specification. The  | within the    |
   |             | values of the "{Var}" component     | application . |
   |             | correlate to each defined user      |               |
   |             | preference. Expression statements   |               |
   |             | using this prefix will resolve to   |               |
   |             | the same values as calls to the     |               |
   |             | "gadgets.Prefs" API.  For instance, |               |
   |             | the expression "${Prefs.Lang}" will |               |
   |             | be replaced by the same value       |               |
   |             | returned by the API call            |               |
   |             | "gadgets.Prefs.getLang()"; The      |               |
   |             | expression "${Prefs.FOO}" will be   |               |
   |             | replaced by the same value returned |               |
   |             | by the API call                     |               |
   |             | "gadgets.Prefs.getString("FOO")"    |               |
   | Viewer      | Reserved for future use.            | N/A           |
   | Owner       | Reserved for future use.            | N/A           |
   | Gadget      | Reserved for future use.            | N/A           |
   +-------------+-------------------------------------+---------------+

   The following example illustrates the use of Reserved Variables Names
   using the "Msg" prefix:

   <Module>
     <ModulePrefs title="${Msg.TITLE}">
       ...
       <Locale lang="en" country="US">
         <msg name="TITLE">My Gadget</msg>
         <msg name="GREETING">Hello There!</msg>
       </Locale>
       ...
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <div>${Msg.GREETING}</div>
     ]]></Content>
   </Module>

3.3.4.  Deprecated Expression Syntax

   Previous versions of this specification supported a -- now deprecated
   -- alternative expression syntax.  Container implementations are
   permitted to continue supporting the deprecated syntax to provide
   backwards compatibility for older, existing specification documents,
   however, developers creating new applications MUST NOT use the
   deprecated format.

   The legacy syntax takes the form "__{Prefix}_{Var}__" where
   "{Prefix}" identifies one of the predefined scopes below, and "{Var}"
   specifies a specific variable within the identified scope.




(surname)               Expires October 31, 2012               [Page 67]

Internet-Draft                Core-Gadget                       May 2012


   For instance, in the partial example that follows, the expression
   "__MSG_FOO__" is replaced for the localized value identified by the
   key "FOO" within the localized message bundle:

   <Module>
     <ModulePrefs title="__MSG_FOO__">
       ...
       <Locale language="en" country="US">
         <msg name="FOO">Hello World!</msg>
       </Locale>
       ...
     </ModulePrefs>
     <Content type="html">
       ...
     </Content>
   </Module>

   The "{Prefix}" keys supported by the legacy syntax are:

   +--------+----------------------------------------------------------+
   | Prefix | Description                                              |
   +--------+----------------------------------------------------------+
   | MSG    | References all message bundle variables for the current  |
   |        | locale.  The values of the "{Var}" component are         |
   |        | selected from the applicable message bundle. For         |
   |        | instance, if the bundle includes a key "FOO", then the   |
   |        | expression "__MSG_FOO__" will be replaced by the         |
   |        | localized value associated with "FOO" in the bundle.     |
   | BIDI   | References BIDI substitution variables whose values will |
   |        | reflect the default text direction as specified by the   |
   |        | selected locale.  The BIDI variables are discussed in    |
   |        | detail in Section 3.4.                                   |
   | MODULE | Originally intended to provide a context for information |
   |        | about the specification document itself. Currently, "ID" |
   |        | is the only variable key supported (e.g.                 |
   |        | "__MODULE_ID__").  When used, the container SHOULD       |
   |        | replace the "__MODULE_ID__" expression with a unique ID  |
   |        | value for each instance of an application displayed      |
   |        | simultaneously.                                          |
   | UP     | References all named values defined by <UserPref>        |
   |        | elements contained in the specification document. The    |
   |        | values of the "{Var}" component correlate to each        |
   |        | defined user preference. Expression statements using     |
   |        | this prefix will resolve to the same values as calls to  |
   |        | the "gadgets.Prefs" API. For instance, the expression    |
   |        | "__UP_Lang__" will be replaced by the same value         |
   |        | returned by the API call "gadgets.Prefs.getLang()"; The  |







(surname)               Expires October 31, 2012               [Page 68]

Internet-Draft                Core-Gadget                       May 2012

   |        | expression "__UP_FOO__" will be replaced by the same     |
   |        | value returned by the API call                           |
   |        | "gadgets.Prefs.getString("FOO")"                         |
   +--------+----------------------------------------------------------+

3.3.5.  Processing Requirements

   Containers perform Variable Substitution when application views are
   rendered or when metadata about the application is displayed.  For
   instance, if the container includes an application specification
   within a listing of applicatioms available to install and use on a
   page, then the container will perform any substitution necessary on
   the displayed values (e.g.  title, description, etc).

   Containers are required to perform substitution on all attributes or
   elements in the application specification document exception of
   <Locale>, <msg>, <EnumValue> elements, but only when the content of
   those elements and attributes is currently being rendered.  If, for
   instance, a application contains multiple <Content> elements, each of
   which identify different views, the container will only process
   substitutions that are included within the content for the view
   currently being rendered.  Further, containers are required to
   perform all substitutions that use either the Msg reserved variable
   key (i.e.  "${Msg.FOO}") or the MSG legacy syntax format (i.e.
   "__MSG_FOO__") -- if supported -- before applying any other
   substitutions.

   Variable substitution MUST NOT be applied recursively and circular
   dependencies detected within variables MUST be ignored and treated as
   literal values rather than expressions.  For instance, within the
   following partial application specification:

   <Module xmlns:os="http://ns.opensocial.org/2008/markup">
     ...
     <Data>
       <os:Var key="key1" value="${key2}" />
       <os:Var key="key2" value="${key1}" />
     </Data>
     <Content type="html">
       ${key1}
       ${key2}
     </Content>
   </Module>

   The value of "key1" would be resolved as the literal value "${key1}".
   The value of "key2" would be resolved as the literal value "${key2}".
   The rendered output generated by the container would be:








(surname)               Expires October 31, 2012               [Page 69]

Internet-Draft                Core-Gadget                       May 2012

   ${key1}
   ${key2}

3.4.  Localization

   Localization of an application is achieved primarily through Variable
   Substitution (Section 3.3), using the Msg reserved variable key and
   <Locale> elements.

   To determine the appropriate keys and values to use for substitution,
   containers will inspect the application specification document for a
   <Locale> element that matches the current view being rendered, as
   well as the language and country of the Viewer.

   A <Locale> is considered a match if either:

   o  The default unnamed view is being rendered and the <Locale>
      elements view attribute is unspecified, or the specific view being
      rendered is named explicitly within the <Locale> element's view
      attribute, and

   o  The language and country attributes on the <Locale> element
      exactly match those of the Viewer, or

   o  The language attribute is an exact match for the Viewer and the
      country attribute specifies "all", or

   o  Both the language and country attributes specify "all".

   How the container determines the current language and country of the
   Viewer is not defined by this specification.

   If a matching <Locale> is not found within the specification
   document, the container is permitted to provide it's own localization
   data.

   Once an appropriate <Locale> has ben selected, containers are
   required to replace all Msg expressions for which a replacement value
   can be determined.

   For example, given the following partial specification:














(surname)               Expires October 31, 2012               [Page 70]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
       <Locale language="en" country="all">
         <msg name="greeting">Hello World!</msg>
       </Locale>
       <Locale language="en" country="all" views="other">
         <msg name="greeting">Howdy!</msg>
       </Locale>
       <Locale language="fr" country="all">
         <msg name="greeting">Bonjour tout le monde!</msg>
       </Locale>
       ...
     </ModulePrefs>
     <Content type="html">
       ${Msg.greeting}
     </Content>
   </Module>

   When rendering the default view, the container will output "Hello
   World!"  for English-speaking Viewers and "Bonjour tout le monde!"
   for French-speaking Viewers.

3.4.1.  Considerations for Bidirectional Text

   Gadget developers need to take care when working with languages that
   require a default Right-to-Left ordering when rendering text.  The
   "Bidi" reserved variable key can be used within Variable Substitution
   expression statements to access information about the default text
   directionality as specified by the currently selected locale.

   The variables supported by the "Bidi" reserved variable key are:

   START_EDGE When the selected <Locale> element's "text_direction"
      attribute specifies "rtl" (Right-to-Left"), the value of the
      "Bidi.START_EDGE" reserved variable key will be "right".  When the
      attribute is either "ltr" (Left-to-Right) or unspecified, the
      value will be "left".

   END_EDGE When the text direction is "rtl", the value of
      "Bidi.END_EDGE" will be "left".  When the attribute is either
      "ltr" or unspecified, the value will be "right".

   DIR The reserved variable key "Bidi.DIR" returns the value of the
      <Locale> element's "text_direction" attribute or "ltr" if the
      attribute is unspecified.

   REVERSE_DIR The reserved variable key "Bidi.REVERSE_DIR" returns the
      opposite of the <Locale> element's "text_direction" attribute
      value.  If "text_direction" is "ltr",  "Bidi.REVERSE_DIR" will
      return "rtl".  If text_direction is "rtl", "Bidi.REVERSE_DIR" will



(surname)               Expires October 31, 2012               [Page 71]

Internet-Draft                Core-Gadget                       May 2012

      return "ltr".

   The Bidi variables can be used to establish the correct text
   directionality when rendering.  For instance:

   <Module>
     <ModulePrefs>
       ...
       <Locale language="en" country="all">
         <msg name="greeting">Hello World!</msg>
       </Locale>
       <Locale language="ar" country="all" text_direction="rtl">
         <msg name="greeting">&#0645;&#0631;&#062D;&#0628;&#0627 &#0627;&#0644;&#0639;&#0627;&#0644;&#0645!</msg>
       </Locale>
       ...
     </ModulePrefs>
     <Content type="html">
       <div dir="${Bidi.DIR}">${Msg.greeting}</div>
     </Content>
   </Module>

3.4.2.  Message Bundle Documents

   The <Locale> element can either directly contain <msg> elements that
   define the keys and values used for localization or can reference
   "Message Bundle Documents" that provide the collection of <msg>
   elements.

   For instance, the following <Locale> element:

   <Locale language="en" country="US">
     <msg name="color">Color</msg>
     <msg name="red">Red</msg>
     <msg name="green">Green</msg>
     <msg name="blue">Blue</msg>
   </Locale>

   Can be replaced with a <Locale> that references an external Message
   Bundle that includes the same <msg> elements:

   <Locale language="en" country="US" messages="http://example.com/en/messages.xml" />

   The Message Bundle at http://example.com/en/messages/xml:

   <messagebundle>
     <msg name="color">Color</msg>
     <msg name="red">Red</msg>
     <msg name="green">Green</msg>
     <msg name="blue">Blue</msg>
   </messagebundle>





(surname)               Expires October 31, 2012               [Page 72]

Internet-Draft                Core-Gadget                       May 2012


   As illustrated, Message Bundles are XML documents whose root element
   is a <messagebundle> that contains zero or more <msg> elements that
   use the same format as the children of the <Locale> element.  No XML
   Namespace is defined for the <messagebundle> or <mgs> elements.

   messagebundle = element messagebundle {
     undefinedAttribute*,
     element msg {
       attribute name { text },
       text
     }
   }

   Variable substitution expressions MAY be used within Message Bundle
   Documents.

   Each Message Bundle Document provides <msg> elements for a single
   locale.  By convention, Message Bundle documents are named as
   "{language}_{country}.xml", where "{language}" is either an ISO-639-1
   Language Code or "ALL" and "{country}" is an ISO-3166-1 Country Code
   or "ALL"".  For instance, a Message Bundle providing values for
   English-language speakers within the United States would be named
   "en_US.xml", while a Message Bundle providing German-language values
   for German-language speakers regardless of country would be named
   "de_ALL.xml".  The Message Bundle named "ALL_ALL.xml" would apply to
   all languages in any country.

3.5.  Application Lifecycle Events

   The Application Lifecycle Event capability allows an OpenSocial
   server and container to send notifications to a remote endpoint of
   the application developer's choosing whenever events significant to
   the lifecycle of an individual instance of the application occur.
   Such notifications can be used for a variety of purposes, including,
   but not limited to, the provisioning of additional resources external
   to the container that instances of the application require to
   operate.

   Every instance of an application processed and rendered by a
   container follows the same basic general lifecycle.

   The syntax used to identify individual types of events within the
   application lifecycle is:

   segment = 1*( ALPHA / DIGIT )
   prefix = segment *("." segment ) "."
   name = segment *("." segment)
   event = [prefix] "event" [ "." name ]

   The following events are defined:




(surname)               Expires October 31, 2012               [Page 73]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+-----------------------------------+----------------+
   | Name         | Identifier                        | Description    |
   +--------------+-----------------------------------+----------------+
   | Pending      | org.opensocial.event.pending      | occurs prior   |
   |              |                                   | to an          |
   |              |                                   | application    |
   |              |                                   | specification  |
   |              |                                   | document being |
   |              |                                   | "Registered"   |
   |              |                                   | with the       |
   |              |                                   | container.     |
   |              |                                   | This is an     |
   |              |                                   | intermediate   |
   |              |                                   | step in a      |
   |              |                                   | application's  |
   |              |                                   | lifecycle that |
   |              |                                   | occurs, for    |
   |              |                                   | example, when  |
   |              |                                   | a developer    |
   |              |                                   | first submits  |
   |              |                                   | the            |
   |              |                                   | specification  |
   |              |                                   | document to    |
   |              |                                   | the container, |
   |              |                                   | or when an     |
   |              |                                   | Embedded       |
   |              |                                   | Experience     |
   |              |                                   | that           |
   |              |                                   | references a   |
   |              |                                   | previously     |
   |              |                                   | unknown        |
   |              |                                   | specification  |
   |              |                                   | is             |
   |              |                                   | encountered,   |
   |              |                                   | and that       |
   |              |                                   | specification  |
   |              |                                   | has not yet    |
   |              |                                   | been           |
   |              |                                   | processed.     |
   |              |                                   | This phase in  |
   |              |                                   | the lifecycle  |
   |              |                                   | implies that   |
   |              |                                   | additional     |
   |              |                                   | action might   |
   |              |                                   | be required    |
   |              |                                   | before the     |
   |              |                                   | application    |
   |              |                                   | can be         |
   |              |                                   | considered to  |
   |              |                                   | be             |
   |              |                                   | "Registered".  |



(surname)               Expires October 31, 2012               [Page 74]

Internet-Draft                Core-Gadget                       May 2012

   | Rejected     | org.opensocial.event.rejected     | occurs when    |
   |              |                                   | "Registration" |
   |              |                                   | of a "Pending" |
   |              |                                   | specification  |
   |              |                                   | document       |
   |              |                                   | cannot be      |
   |              |                                   | completed for  |
   |              |                                   | any reason.    |
   |              |                                   | For instance,  |
   |              |                                   | if the         |
   |              |                                   | registration   |
   |              |                                   | is rejected by |
   |              |                                   | an             |
   |              |                                   | administrator. |
   | Registered   | org.opensocial.event.registered   | occurs after   |
   |              |                                   | the container  |
   |              |                                   | first becomes  |
   |              |                                   | aware of the   |
   |              |                                   | Application    |
   |              |                                   | Specification  |
   |              |                                   | Document. For  |
   |              |                                   | instance, when |
   |              |                                   | an             |
   |              |                                   | administrator  |
   |              |                                   | adds an        |
   |              |                                   | application to |
   |              |                                   | a catalog of   |
   |              |                                   | available      |
   |              |                                   | applications,  |
   |              |                                   | or when a      |
   |              |                                   | previously     |
   |              |                                   | unknown        |
   |              |                                   | application is |
   |              |                                   | referenced     |
   |              |                                   | within an      |
   |              |                                   | Embedded       |
   |              |                                   | Experience     |
   |              |                                   | currently      |
   |              |                                   | being          |
   |              |                                   | processed by a |
   |              |                                   | container.     |
   | Available    | org.opensocial.event.available    | occurs when    |
   |              |                                   | the            |
   |              |                                   | application    |
   |              |                                   | becomes        |
   |              |                                   | available for  |
   |              |                                   | use by the     |
   |              |                                   | container. In  |
   |              |                                   | order to be    |
   |              |                                   | considered     |
   |              |                                   | "Available",   |




(surname)               Expires October 31, 2012               [Page 75]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                   | an application |
   |              |                                   | MUST have      |
   |              |                                   | first passed   |
   |              |                                   | through the    |
   |              |                                   | "Registered"   |
   |              |                                   | phase. There   |
   |              |                                   | are a number   |
   |              |                                   | of actions     |
   |              |                                   | that can       |
   |              |                                   | trigger the    |
   |              |                                   | availability   |
   |              |                                   | of an          |
   |              |                                   | application    |
   |              |                                   | such as an     |
   |              |                                   | administrator  |
   |              |                                   | approving the  |
   |              |                                   | registration   |
   |              |                                   | or adding the  |
   |              |                                   | application to |
   |              |                                   | a "whitelist"  |
   |              |                                   | of acceptable  |
   |              |                                   | applications.  |
   | Unavailable  | org.opensocial.event.unavailable  | occurs when    |
   |              |                                   | the            |
   |              |                                   | application    |
   |              |                                   | becomes        |
   |              |                                   | unavailable    |
   |              |                                   | for use by the |
   |              |                                   | container.     |
   |              |                                   | Unavailable    |
   |              |                                   | applications   |
   |              |                                   | are known to   |
   |              |                                   | the container  |
   |              |                                   | ("Registered") |
   |              |                                   | but cannot be  |
   |              |                                   | used for some  |
   |              |                                   | reason.        |
   |              |                                   | Examples       |
   |              |                                   | include        |
   |              |                                   | applications   |
   |              |                                   | that have been |
   |              |                                   | added to a     |
   |              |                                   | "blacklist" or |
   |              |                                   | have otherwise |
   |              |                                   | been disabled  |
   |              |                                   | for some       |
   |              |                                   | reason.        |
   | Updated      | org.opensocial.event.updated      | occurs         |
   |              |                                   | whenever the   |






(surname)               Expires October 31, 2012               [Page 76]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                   | application    |
   |              |                                   | specification  |
   |              |                                   | known to the   |
   |              |                                   | container has  |
   |              |                                   | been updated.  |
   |              |                                   | This can       |
   |              |                                   | happen         |
   |              |                                   | whenever a new |
   |              |                                   | version of the |
   |              |                                   | application is |
   |              |                                   | provided to    |
   |              |                                   | the container. |
   | Installed    | org.opensocial.event.installed    | occurs when a  |
   |              |                                   | specific       |
   |              |                                   | instance of an |
   |              |                                   | application is |
   |              |                                   | provisioned    |
   |              |                                   | for use. For   |
   |              |                                   | instance, when |
   |              |                                   | an instance is |
   |              |                                   | added to a     |
   |              |                                   | page. Only     |
   |              |                                   | "Available"    |
   |              |                                   | applications   |
   |              |                                   | can be         |
   |              |                                   | "Installed".   |
   |              |                                   | Installing an  |
   |              |                                   | application is |
   |              |                                   | not the same   |
   |              |                                   | as "opening"   |
   |              |                                   | or "rendering" |
   |              |                                   | the            |
   |              |                                   | application.   |
   | Configured   | org.opensocial.event.configured   | occurs         |
   |              |                                   | whenever the   |
   |              |                                   | configuration  |
   |              |                                   | details for an |
   |              |                                   | installed      |
   |              |                                   | application    |
   |              |                                   | have been      |
   |              |                                   | modified.      |
   | Restriction  | org.opensocial.event.restriction  | occurs         |
   |              |                                   | whenever the   |
   |              |                                   | functionality  |
   |              |                                   | of a           |
   |              |                                   | particular     |
   |              |                                   | instance of    |
   |              |                                   | the            |
   |              |                                   | application    |
   |              |                                   | has been       |
   |              |                                   | restricted in  |




(surname)               Expires October 31, 2012               [Page 77]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                   | some way. For  |
   |              |                                   | instance, if   |
   |              |                                   | the operation  |
   |              |                                   | of the         |
   |              |                                   | application    |
   |              |                                   | has caused it  |
   |              |                                   | to exceed      |
   |              |                                   | request rate   |
   |              |                                   | limitations or |
   |              |                                   | quotas and the |
   |              |                                   | container      |
   |              |                                   | responds by    |
   |              |                                   | limiting the   |
   |              |                                   | actions the    |
   |              |                                   | application    |
   |              |                                   | instance is    |
   |              |                                   | permitted to   |
   |              |                                   | perform.       |
   |              |                                   | Another        |
   |              |                                   | example could  |
   |              |                                   | be when the    |
   |              |                                   | container has  |
   |              |                                   | limited the    |
   |              |                                   | security       |
   |              |                                   | policy         |
   |              |                                   | permissions    |
   |              |                                   | underwhich the |
   |              |                                   | instance of    |
   |              |                                   | the            |
   |              |                                   | application is |
   |              |                                   | operating.     |
   | Opened       | org.opensocial.event.opened       | occurs         |
   |              |                                   | whenever an    |
   |              |                                   | "Installed"    |
   |              |                                   | instance of an |
   |              |                                   | application is |
   |              |                                   | opened or      |
   |              |                                   | rendered by    |
   |              |                                   | the container. |
   | Closed       | org.opensocial.event.closed       | occurs         |
   |              |                                   | whenever an    |
   |              |                                   | "Installed"    |
   |              |                                   | instance of an |
   |              |                                   | application is |
   |              |                                   | closed by the  |
   |              |                                   | container.     |
   |              |                                   | Note that      |
   |              |                                   | closing an     |
   |              |                                   | application is |






(surname)               Expires October 31, 2012               [Page 78]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                   | not the same   |
   |              |                                   | as             |
   |              |                                   | uninstalling   |
   |              |                                   | it. A closed   |
   |              |                                   | application    |
   |              |                                   | can be         |
   |              |                                   | reopened       |
   |              |                                   | later.         |
   | Uninstalled  | org.opensocial.event.uninstalled  | occurs when a  |
   |              |                                   | provisioned    |
   |              |                                   | instance of an |
   |              |                                   | application is |
   |              |                                   | destroyed.     |
   |              |                                   | This lifecycle |
   |              |                                   | event implies  |
   |              |                                   | that all       |
   |              |                                   | resources      |
   |              |                                   | associated     |
   |              |                                   | with a         |
   |              |                                   | specific       |
   |              |                                   | application    |
   |              |                                   | instance are   |
   |              |                                   | to be          |
   |              |                                   | deallocated.   |
   | Unregistered | org.opensocial.event.unregistered | occurs when a  |
   |              |                                   | "Registered"   |
   |              |                                   | application    |
   |              |                                   | specification  |
   |              |                                   | is removed     |
   |              |                                   | from the       |
   |              |                                   | container.     |
   +--------------+-----------------------------------+----------------+

   A developer can indicate interest in receiving notification whenever
   any of these lifecycle events occur by using the <Link> element with
   a "rel" attribute value equal to the identifier of the event.
   Containers are not, however, required to send lifecycle event
   notifications and MAY ignore any <Link> element specifying an event
   identifier.

   The special identifier "org.opensocial.event" can be used to indicate
   interest in receiving notification for all event types.

   Use of the "org.opensocial."  prefix is reserved by this
   specification.  Implementations MUST NOT use event identifiers that
   use the "org.opensocial."  prefix other than those defined above.
   Implementations are free to define additional event type identifiers
   that use prefixes other than "org.opensocial.".

   The optional "method" attribute can be specified on the <Link>
   element to indicate the HTTP request method to be used when sending
   the event notification.  Valid values are either "GET" or "POST".
   When not specified, the default is assumed to be "GET".


(surname)               Expires October 31, 2012               [Page 79]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
       <Link rel="org.opensocial.event" href="http://example.org/event" method="POST" />
       <Link rel="org.opensocial.event.registered" href="http://example.org/event/registered" />
       <Link rel="org.opensocial.event.unregistered" href="http://example.org/event/unregistered" />
       ...
     </ModulePrefs>
     <Content type="html">
       ...
     </Content>
   </Module>

3.5.1.  Lifecycle Event Notifications

   Whenever a significant lifecycle event occurs for a particular
   application, the container MAY send an event notification to the IRI
   identified by any <Link> element provided whose "rel" attribute
   values identify the event.  If the container supports sending event
   notifications, one notification SHOULD be sent for each matching
   <Link> element.

   For instance, given the following partial specification:

   <Module>
     <ModulePrefs>
       ...
       <Link rel="org.opensocial.event" href="http://example.org/event" method="POST" />
       <Link rel="org.opensocial.event.registered" href="http://example.org/event/registered" />
       <Link rel="org.opensocial.event.unregistered" href="http://example.org/event/unregistered" />
       ...
     </ModulePrefs>
     <Content type="html">
       ...
     </Content>
   </Module>

   When the application is registered with the container, two event
   notifications will be sent:

   o  One to the endpoint "http://example.org/event" identified by the
      "org.opensocial.event" rel value, and

   o  One to the endpoint "http://example.org/event/registered"
      identified by the "org.opensocial.event.registered" rel value.

   Each event notification is sent as an HTTP request message using the
   method declared by the <Link> elements "method" attribute.  If the
   "method" attribute is not specified, then the HTTP GET method is
   used.




(surname)               Expires October 31, 2012               [Page 80]

Internet-Draft                Core-Gadget                       May 2012


   The container MUST add the additional "eventtype" query string
   parameter to the IRI specified by the <Link> element.  The value MUST
   be the name part of the event identifier provided in the "rel"
   attribute (e.g.  if "rel="org.opensocial.event.registered"", then
   "eventtype" will equal "registered").  If the event identifier does
   not have a name component (as is the case with the special identifier
   "org.opensocial.event") then value of "eventtype" MUST be set to a
   name specific to event that triggered the notification.

   If the <Link> element includes an "authz" attribute that specifies a
   value other than "none", the notification MUST be authenticated using
   the authentication mechanism specified as described in Section 3.1.
   If the "authz" attribute specifies a value of "none", no
   authentication mechanism is to be used.  If the "authz" attribute is
   not specified, the notification MUST be authenticated using the
   Signed Fetch (Section 3.1.1) mechanism.

   In the example given, the notification sent to "http://example.org/
   event" will utilize the HTTP POST method (line breaks are added to
   the request URI for readability):

     POST /event?eventtype=registered
       &oauth_consumer_key=myappkey
       &oauth_nonce=7sGE00xSfY4PBStICbXyPbIliNymOhu2
       &oauth_signature_method=HMAC-SHA1
       &oauth_timestamp=1290013827
       &oauth_version=1.0
       &opensocial_app_id=myappid
       &opensocial_app_url=
       &oauth_signature=N7mODAf9OJ1DXQRPisRqGK4DNMo= HTTP/1.1
     Host: example.org
   

   The notification sent to "http://example.org/event/registered" will
   utilize HTTP GET (line breaks are added to the request URI for
   readability):

   GET /event?eventtype=registered
     &oauth_consumer_key=myappkey
     &oauth_nonce=7sGE00xSfY4PBStICbXyPbIliNymOhu2
     &oauth_signature_method=HMAC-SHA1
     &oauth_timestamp=1290013827
     &oauth_version=1.0
     &opensocial_app_id=myappid
     &opensocial_app_url=
     &oauth_signature=N7mODAf9OJ1DXQRPisRqGK4DNMo= HTTP/1.1
   Host: example.org

   Responses to event notification requests are considered to be
   insignificant by this specification.

3.5.2.  Legacy Support


(surname)               Expires October 31, 2012               [Page 81]

Internet-Draft                Core-Gadget                       May 2012


   Previous version of this specification defined the following
   deprecated event identifiers that MAY continued to be supported by
   containers for backwards compatibility:

   event Equivalent to "org.opensocial.event".

   event.addapp Equivalent to "org.opensocial.event.installed"

   event.removeapp Equivalent to "org.opensocial.event.uninstalled"

   event.app Provides an indication that some action has been performed
      on the application.  The specific action performed is identified
      by adding an additional "action" parameter to the GET or POST
      request.  The valid "action" values are:

      *  "enabled",

      *  "disabled",

      *  "approved",

      *  "submitted",

      *  "rejected",

      *  "new", and

      *  "banned"

3.6.  Data Pipelining

   Data Pipelining is a declarative mechanism for defining the data an
   application requires from the container.  XML Elements are used to
   associate variable keys with specific kinds of data from a variety of
   different sources.  For instance, the <os:DataRequest> element can be
   used to access social data provided by the OpenSocial container,
   while the <os:HttpRequest> element can provide access to content from
   any HTTP endpoint.

   All Data Pipeline elements have a "key" attribute whose value is used
   to uniquely identify the data.  Such keys can be used within
   Expression Language statements used for Variable Substitution or with
   JavaScript API calls.  Key names are always case-sensitive.

   The following illustrates a basic example of Data Pipelining in a
   partial application specification:








(surname)               Expires October 31, 2012               [Page 82]

Internet-Draft                Core-Gadget                       May 2012


     <Module xmlns:os="http://ns.opensocial.org/2008/markup">
       ...
       <Data>
         <os:DataRequest key="viewer" method="people.get" userId="@viewer" fields="name,birthday" />
         <os:HttpRequest key="remote" href="http://example.com/api" />
       </Data>
       <Content type="html">
         The viewer name is ${viewer.name}.
   
         The remote content is "${remote.result.content}".
       </Content>
     </Module>

   The Data Pipeline elements can appear:

   o  As children of the <Data> element,

   o  As direct children of the <Content> element when the Proxied
      Content model is used, and

   o  Within specially formatted HTML <script> tags included within HTML
      Content.

   The placement of Data Pipeline elements will determine when and where
   the data associated with the key specified will be made available to
   the container while an application view is being rendered.  The
   considerations and requirements for each of the options listed above
   are discussed in detail in the relevant sections that follow.

3.6.1.  The DataContext

   For every application instance, a "DataContext" object is created
   that maintains all of the data associated with the instance's Data
   Pipeline elements.  The information contained within the
   "DataContext" is available for use with Variable Substitution via
   Expression Language statements or via the "opensocial.data" APIs; and
   while the data contained within the "DataContext" is generally
   populated through processing of the Data Pipeline elements, the
   "opensocial.data" APIs can be used to modify values or add additional
   keys.

3.6.2.  Data Pipeline Elements and the Data Block

   By default, when Data Pipeline elements appear as children of the
   <Data> element, the container will process the elements and register
   the resulting data with the "DataContext" for all views.

   Individual Data Pipeline elements, however, MAY specify a "view"
   attribute whose value is a comma separated list of specific views for
   which the element is associated.  Such elements will only be
   processed and added to the "DataContext" when the identified views
   are being rendered.


(surname)               Expires October 31, 2012               [Page 83]

Internet-Draft                Core-Gadget                       May 2012


   In the following example, the <os:HttpRequest> element using key
   "foo" is registered globally and available within all views while the
   <os:HttpRequest> element using key "bar" is only processed and
   available when the "example" view is being rendered:

   <Module>
     ...
     <Data>
       <os:HttpRequest key="foo" href="http://example.org/api" />
       <os:HttpRequest key="bar" href="http://example.com/api" view="example"/>
     </Data>
     <Content type="html">
       ...
     </Content>
     <Content type="html" view="example">
       ...
     </Content>
   </Module>

   Multiple Data Pipeline elements MUST NOT share the same value for the
   key attribute unless each is specifically targeted at a different
   view.  In the following example, the key "foo" would resolve to the
   value "abc" when the default view is rendered and to "123" when the
   "example" view is rendered:

   <Module>
     ...
     <Data>
       <os:Var key="foo" value="abc" />
       <os:Var key="foo" value="abc" view="example" />
     </Data>
     <Content type="html">
       The value is ${foo}
     </Content>
     <Content type="html" view="example">
       The value is ${foo}
     </Content>
   </Module>

   Note that currently, this specification does not specify exactly when
   the container processes the collection of Data Pipeline elements, nor
   are containers required to process data elements in any particular
   order.  Containers that process Data Pipeline elements to populate
   the "DataContext" will likely do so regardless of whether the
   referenced key is ever actually used within an expression statement
   or API call.

3.6.3.  Data Pipeline Elements within HTML Content

   When using HTML Content, Data Pipeline elements MAY appear within the




(surname)               Expires October 31, 2012               [Page 84]

Internet-Draft                Core-Gadget                       May 2012

   HTML inside a special <script> tag.

   For instance,

   <Module>
     <ModulePrefs>
       <Require feature="opensocial-data" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data">
         <os:HttpRequest key="foo" href="http://example.com/api" />
         <os:Var key="bar" value="abc123"/>
       </script>
     ]]></Content>
   </Module>

   As illustrated, when Data Pipeline elements are embedded within HTML
   Content, the specification document MUST require the "opensocial-
   data" feature using the <Require> element within the <ModulePrefs>.

   The Data Pipeline elements themselves are contained within an HTML
   script tag whose "type" attribute specifies the value "text/os-data".
   Also note that the Data Pipeline XML namespace is declared for the
   "os:" prefix.  This is required in order for the embedded Data
   Pipeline elements to processed properly while the content is being
   rendered.

   Data Pipeline elements defined in this manner are scoped specifically
   to the <Content> element in which they are embedded, meaning that the
   data each provides to the "DataContext" will be available only for
   expression statements and API calls that are also in the same
   <Content> element.

   If an embedded Data Pipeline element specifies the same key as a Data
   Pipeline element contained within the <Data> element, the value
   provided by the embedded elements takes precedence.  In the following
   example, the variable "foo" will resolve to "123" when the default
   unnamed view is rendered:

   <Module>
     <ModulePrefs>
       <Require feature="opensocial-data" />
     </ModulePrefs>
     <Data>
      <os:Var key="foo" value="abc"/>
     </Data>
     <Content type="html"><![CDATA[
       <script xmlns:os="http://ns.opensocial.org/2008/markup" type="text/os-data">
         <os:Var key="foo" value="123"/>
       </script>
     ]]></Content>
   </Module>



(surname)               Expires October 31, 2012               [Page 85]

Internet-Draft                Core-Gadget                       May 2012

3.6.4.  Data Pipeline Elements and Proxied Content

   When using Proxied Content to render a view for an application, the
   container typically sends an HTTP GET request to the IRI provided by
   the <Content> element's href attribute.  In such cases, any
   information the remote endpoint needs to generate the necessary
   content in response is provided within the IRI as query string
   parameters.  There are times, however, when the endpoint requires
   significantly more information than what can be adequately conveyed
   by the limited nature of query string parameters.  To address such
   cases, Data Pipeline elements can be used directly within a <Content>
   element to define a collection of data that is to be sent to the
   remote IRI using an HTTP POST request instead of GET.

   For instance, with typical, non-pipelined Proxy content:

   <Content type="html" href="http://example.org/remote-server?id=${ViewParams.id}" />

   The "${ViewParams.id}" expression would be replaced with an
   appropriate value drawn from the View Parameters passed into the
   application, and HTTP request sent to the remote endpoint by the
   container would use HTTP GET:

   GET /remote-server?id=abc123 HTTP/1.1
   Host: example.org
   Accept: application/json

   However, when using Proxied Content with the Data Pipeline elements,
   a developer can pass complex structured data to remote endpoint:

   <Content type="html" href="http://example.org/remote-server">
     <os:Var key="id" value="${ViewParams.id}" />
     <os:Var key="name">
       {
         "givenName": "John",
         "familyName": "Doe"
       }
     </os:Var>
   </Content>

   The request is transformed into an HTTP POST with a JSON-formatted
   payload containing the data specified by the pipeline elements:

     POST /remote-server HTTP/1.1
     Host: example.org
     Content-Type: application-json
   
     {
       "id" : "abc123",
       "name": {
         "givenName": "John",
         "familyName": "Doe"
       }


(surname)               Expires October 31, 2012               [Page 86]

Internet-Draft                Core-Gadget                       May 2012

     }

   As illustrated by the example, each of the keys defined by the Data
   Pipeline elements contained within the <Content> are used as the
   property names in the JSON object sent to the remote endpoint.  The
   value of each property is the value returned by processing the Data
   Pipeline element.

   <Content< element's of this type can contain any number of Data
   Pipeline elements, each of which MUST have a corresponding property
   in the generated JSON object that is sent to the server, regardless
   of whether the attempt to process a particular Data Pipeline element
   results in an error or not.  The value will be included within the
   JSON exactly as it is provided by the "DataContext".  Only pipelined
   data contained within the <Content> will be included in the generated
   JSON object.

   In the follow example, assume that the processing of the
   <os:DataRequest> element fails and error details are provided by the
   "DataContext":

   <Content type="html" href="http://example.org">
     <os:Var key="key1" value="abc" />
     <os:DataRequest key="key2" method="people.get" userId="@viewer" groupId="@frields" />
   </Content>

   The JSON data posted to the remote server would include the value of
   "key1" and the error information for "key2":

     POST / HTTP/1.1
     Host: example.org
     Content-Type: application/json
   
     {
       "key1" : "abc",
       "key2" : {
         "error" : {
           "message" : "Processing Error",
           "code" : 500
         }
       }
     }

   When an application specification uses unrecognized Data Pipeline
   tags, the container is given the choice of either ignoring it or
   specifying a 404 (Not Found) error within the JSON structure using an
   Error Object [core-api].

   In the example below, the application specification uses an
   undefined, hypothetical Data Pipeline extension:





(surname)               Expires October 31, 2012               [Page 87]

Internet-Draft                Core-Gadget                       May 2012


   <Content type="html" href="http://example.org">
     <os:Var key="key1" value="abc" />
     <osx:MyExtension key="key2" attr="val" />
   </Content>

   The JSON generated for the HTTP POST would either omit "key2"
   entirely:

     POST / HTTP/1.1
     Host: example.org
     Content-Type: application/json
   
     {
       "key1" : "abc"
     }

   Or indicate that "key2" could not be resolved:

     POST / HTTP/1.1
     Host: example.org
     Content-Type: application/json
   
     {
       "key1" : "abc",
       "key2" : {
         "error: {
           "message": "Not Found",
           "code": 404
         }
       }
     }

3.6.5.  The Data Pipeline Elements

   This specification currently defines three Data Pipeline elements:

   os:DataRequest Used to access social data provided by the container.

   os:HttpRequest Used to access data provided by a remote endpoint.

   os:Var Used to define static, literal variables.

   The XML Namespace for each of the Data Pipeline elements is "http://
   ns.opensocial.org/2008/markup".  By convention, this specification
   uses the namespace prefix "os:" for the Data Pipeline Namespace.
   Note, however, that the choice of prefix is arbitrary and not
   semantically equivalent.







(surname)               Expires October 31, 2012               [Page 88]

Internet-Draft                Core-Gadget                       May 2012


   Implementations MAY define additional Data Pipeline elements that use
   an XML Namespace other than "http://ns.opensocial.org/2008/markup".
   Such extensions MUST contain a "key" attribute whose value specifies
   the name that will be used to associate that element's resolved value
   within the "DataContext".  Containers are recommended to ignore any
   Data Pipeline elements they do not support or do not understand.

     namespace os = "http://ns.opensocial.org/2008/markup"
   
     BaseDataPipeline = {
       attribute key { text },
       undefinedAttribute*
     }

3.6.5.1.  The <os:DataRequest> Element

   The <os:DataRequest> element is used to access social data provided
   by the container.  It is generally equivalent to the JavaScript API
   methods provided to the application by the container to access
   information such as the identity of the current Viewer, a particular
   users group of friends, an activity stream, and so forth.  the
   <os:DataRequest> element can only be used to access content and
   cannot be used to modify social data stored by the container.

   DataRequest = element os:DataRequest {
     BaseDataPipeline,
     attribute method { text }
   }

   In addition to the "key" attribute required for all Data Pipeline
   elements, the <os:DataRequest> element MUST contain a "method"
   attribute whose value is an Operation Identifier as defined in [core-
   api].  All additional attributes contained by the <os:DataRequest>
   are to be mapped directly to the identically named input parameters
   for the data retrieval operation specified by the "method".

   Child elements or any additional content provided within the
   <os:DataRequest> element SHOULD be ignored.

   For example, the "people.get" Operation Identifier defined within
   [social-app] allows an Application to retrieve information about
   people known to the container.  It can, for instance, be used to
   retrieve basic profile details about an individual or retrieve a
   listing of associated profiles (e.g.  a "friends" list).

   When invoked using the JavaScript API to retrieve the listing of
   profiles associated with the application's current Viewer, the method
   is invoked as:

     var params = {"userId": "@viewer", "groupId": "@friends"};
     osapi.people.get(params).execute(callback);
   
     function callback(friends) { ... }

(surname)               Expires October 31, 2012               [Page 89]

Internet-Draft                Core-Gadget                       May 2012


   The equivalent operation using the <os:DataRequest> element would be:

   <os:DataRequest key="friends" method="people.get" userId="@viewer" groupId="@friends" />

   Assuming the operation was processed successfully, the "friends"
   variable will be added to the "DataContext" with a value identical to
   that provided as input to the callback function in the previous
   JavaScript API.

3.6.5.2.  The <os:HttpRequest> Element

   The <os:HttpRequest> element is used to access arbitrary content from
   a remote HTTP endpoint.  It is generally equivalent to the
   "osapi.http" JavaScript API methods provided to the application by
   the container.  Currently, only HTTP GET and POST methods are
   supported.

   HttpRequest = element os:HttpRequest {
     BaseDataPipeline,
     SignedFetch,
     attribute method { "get" | "post" },
     attribute href { IRI }
   }

   In addition to the "key" attribute required for all Data Pipeline
   elements, the <os:HttpRequest> element MUST contain a "method"
   attribute whose value is either "get" or "post" indicating the HTTP
   request method to use for the request, and an "href" attribute whose
   value specifies a dereferenceable IRI to which the request will be
   sent.  If not specified, the value of the "method" attribute will be
   assumed to be "get".  All additional attributes contained by the
   <os:HttpRequest> are to be mapped directly to the identically named
   input parameters defined for corresponding "osapi.http.get" or
   "osapi.http.post" JavaScript APIs.

   Child elements or any additional content provided within the
   <os:HttpRequest> element SHOULD be ignored.

   For example, the "osapi.http.get" operation can be used to retrieve
   content from a remote endpoint located at "http://example.org/foo":

     var params = {
       "href": "http://example.org/foo",
       "format":"json",
       "authz":"signed"};
     osapi.http.get(params).execute(callback);
   
     function callback(results) { ... }

   The equivalent operation using the <os:HttpRequest> element would be:




(surname)               Expires October 31, 2012               [Page 90]

Internet-Draft                Core-Gadget                       May 2012


   <os:HttpRequest key="results"
     href="http://example.org/foo"
     format="json" authz="signed" />

   Assuming the method identified was processed successfully, the
   "results" variable will be added to the "DataContext" with a value
   identical to that provided as input to the callback function in the
   previous JavaScript API.

   The exact structure of the value stored within the "DataContext" will
   depend on the type of response returned by the remote endpoint.
   Currently, the only supported options are for the server to return
   JSON-formatted data, textual content (e.g.  plain text or HTML) or an
   error response.  Binary content is currently not supported.

   If the server returns a JSON formatted response such as:

     HTTP/1.1 200 OK
     Content-Type: application/json
   
     { "data" : "xyz" }

   The value stored within the "DataContext" would be:

   {
     "result" : {
       "content" : {
         "data" : "xyz"
       },
       "status" : 200,
       "headers" : {
         "Content-Type" : [
           "application/json"
         ]
       }
     }
   }

   If the server turns textual content such as:

     HTTP/1.1 200 OK
     Content-Type: text/html
   
     <html><head>...</head><body>Hello World</body></html>

   The value stored within the "DataContext" would be:








(surname)               Expires October 31, 2012               [Page 91]

Internet-Draft                Core-Gadget                       May 2012


   {
     "result" : {
       "content" : "<html><head>...</head><body>Hello World</body></html>",
       "result": 200,
       "headers" : {
         "Content-Type" : [
           "text/html"
         ]
       }
     }
   }

   If the server returns an error, or if the content returned by the
   server is neither text-based or valid JSON, the value stored by the
   "DataContext" will specify an Error Object [core-api] with an
   appropriate value indicating the nature of the error.  Within the
   value of the "error" property, the "data" property contains the
   content actually returned by the server, if any.

   {
     "error" : {
       "code" : 404,
       "message" : "Not Found",
       "data" : {
         "content" : "<html><body>File not found</body></html>",
         "headers" : {
           "Content-Type" : [
             "text/html"
           ]
         }
       }
     }
   }

3.6.5.3.  The <os:Var> Element

   The <os:Var> element is used to declare a string JSON object, or
   JavaScript array as a literal value or associate the results of
   evaluating an Expression Statement with a key.

     SimpleVar = element os:Var {
       BaseDataPipeline,
       value { text }
     }
   
     JsonVar = element os:Var {
       BaseDataPipeline,
       text
     }
   
     Var = SimpleVar | JsonVar



(surname)               Expires October 31, 2012               [Page 92]

Internet-Draft                Core-Gadget                       May 2012


   In addition to the "key" attribute required for all Data Pipeline
   elements, the <os:Var> element can either contain a "value" attribute
   or contain textual content.

   The following <os:Var> examples are equivalent:

     <os:Var key="key1" value="ABC" />
   
     <os:Var key="key1">ABC</os:Var>

   When determining the value to store within the "DataContext", the
   container will:

   o  First apply Variable Substitution to replace all Expression
      Language statements appearing within the value,

   o  Then, attempt to parse the string as a JavaScript Array.  For
      instance, if the value is "[1,2,3,4,5]", then a JavaScript Array
      containing the values 1, 2, 3, 4 and 5 will be created.  If
      successfully parsed, the Array will be stored into the
      "DataContext" and processing will end.

   o  If unable to parse as an Array, the container will attempt to
      parse the value as a JSON Object.  If successfully parsed, the
      object will be stored into the "DataContext" and processing will
      end.

   o  If the value is still unable to be parsed, it will be stored
      within the "DataContext" as a literal string value.

   Given the example,

   <os:Var key="key1">
     [{"data": ${1+1}}]
   <os:Var>

   The value stored within the "DataContext" will be a JavaScript array
   containing a JSON object with a single property "data" whose value is
   the result of processing the Expression Language statement "${1+1}":

   [
     { "data":2 }
   ]

3.6.5.4.  Expression Statements within Data Pipeline Attributes

   The attributes used with the <os:DataRequest> and <os:HttpRequest>
   elements often require values that vary depending on a range of
   criteria including input parameters or the results returned by other
   Data Pipeline elements.




(surname)               Expires October 31, 2012               [Page 93]

Internet-Draft                Core-Gadget                       May 2012


   For instance, when the application needs to display the next set of
   results from a paged-collection, the view parameters specifying the
   current page can be passed into the <os:HttpRequest> or
   <os:DataRequest> using Expression Language statements:

   <os:DataRequest key="PagedFriends" method="people.get"
     userId="@owner" groupId="@friends"
     startIndex="${ViewParams.first}"
     count="20"/>

   Likewise, the results of one Data Pipeline element can be passed as
   attribute values in another.  For instance, we can reference the
   stored value for the "PagedFriends" key generated by processing the
   previous example within an <os:HttpRequest>:

   <os:HttpRequest href="http://example.com/api?ids=${PagedFriends.ids}"/>

   When referencing the results of other Data Pipeline elements in this
   way, Expression Language statements can access the input parameters
   and additional metadata about the referenced results by using the
   special reserved "Request" property on the referenced key, e.g.
   "${PagedFriends.Request.userId}".

   The metadata properties provided by the "Request" property include:

   o  All of the attributes defined on the referenced Data Pipeline
      element (in the previous example, these would include "key",
      "method", "userId", "groupId", "startIndex", and "count"),

   o  The properties "totalResults", "count" and "startIndex" if the
      value stored by referenced key is a Collection object as defined
      by [core-api]; the values of which map to the corresponding values
      of the stored collection.

   These properties are determined dynamically by the container and can
   be used within any Expression Language statement:

     <os:DataRequest key="Page1" method="people.get"
       userId="@owner" groupId="@friends"
       startIndex="${ViewParams.first}" count="20"/>
   
     <os:DataRequest key="Page2" method="people.get"
       userId="${Page1.Request.userId}" groupId="@friends"
       startIndex="${Page1.Request.startIndex + Page1.Request.count}"
       count="${Page1.Request.count}"/>

4.  Container-Provided Features

4.1.  Core Features





(surname)               Expires October 31, 2012               [Page 94]

Internet-Draft                Core-Gadget                       May 2012


   Core Features are provided automatically by the container for all
   application instances without requiring the application to declare
   them using either the <Require> or <Optional> element in the
   <ModulePrefs>

4.1.1.  The Logging Feature

   The Logging Feature provides a basic mechanism to log messages for
   debugging and informational purposes.  The "Log" to which such
   messages are recorded is container specific.  Whether and how each
   container chooses to provide access to the collection of recorded
   messages is considered beyond the scope of this specification.

4.1.1.1.  JavaScript API

   The Logging Feature provides the following JavaScript API methods and
   constants to developers:

4.1.1.1.1.  gadgets.log

   The "gadgets.log" method is used to record an informational message
   to the container provided Log.

   <static> <Void> gadgets.log(message)

   The method takes a single input parameter that can be any valid JSON-
   serializable Object.  No return value is specified.

   For example:

     gadgets.log("This is a message");
   
     gadgets.log(
       {"code":123, "data": "This is a message"}
     );

4.1.1.1.2.  gadgets.warn

   The "gadgets.warn" method is used to record a warning message to the
   container provided Log.

   <static> <Void> gadgets.warn(message)

   The method takes a single input parameter that can be any valid JSON-
   serializable Object.  No return value is specified.

   For example:

     gadgets.warn("This is a warning!");
   
     gadgets.log(
       {"code":123, "data": "This is a warning!"}
     );

(surname)               Expires October 31, 2012               [Page 95]

Internet-Draft                Core-Gadget                       May 2012


4.1.1.1.3.  gadgets.error

   The "gadgets.error" method is used to record an error message to the
   container provided Log.

   <static> <Void> gadgets.error(message)

   The method takes a single input parameter that can be any valid JSON-
   serializable object.  No return value is specified.

   For example:

     gadgets.error("This is an error");
   
     gadgets.error(
       {"code":123, "data": "This is an error"}
     );

4.1.1.1.4.  gadgets.setLogLevel

   The "gadgets.setLogLevel" method establishes the minimum log level
   threshold at which containers SHOULD record messages sent to the Log.

   <static> <Void> gadgets.setLogLevel(logLevel)

   The method takes a single parameter whose value is a non-negative
   integer indicating the log level as defined below.  No return value
   is specified.

   The acceptable values for the logLevel input parameter are as
   follows.  For convenience, a corresponding alias for each value is
   also defined and MAY be used in place of the literal numeric value:

   +--------+-----------------------+----------------------------------+
   | Value  | Alias                 | Description                      |
   +--------+-----------------------+----------------------------------+
   | "1"    | "gadgets.log.INFO"    | Specifies that the container     |
   |        |                       | provided Log SHOULD record all   |
   |        |                       | informational, warning and error |
   |        |                       | messages.                        |
   | "2"    | "gadgets.log.WARN"    | Specifies that the container     |
   |        |                       | provided Log SHOULD record all   |
   |        |                       | warning and error messages but   |
   |        |                       | ignore informational messages.   |
   | "3"    | "gadgets.log.ERROR"   | Specifies that the container     |
   |        |                       | provided Log SHOULD record all   |
   |        |                       | error messages but ignore        |
   |        |                       | informational and error          |
   |        |                       | messages.                        |
   | "4"    | "gadgets.log.NONE"    | Specifies that the container     |
   |        |                       | provided Log SHOULD ignore all   |
   |        |                       | messages.                        |
   +--------+-----------------------+----------------------------------+

(surname)               Expires October 31, 2012               [Page 96]

Internet-Draft                Core-Gadget                       May 2012


   For example, to record all messages:

   gadgets.setLogLevel(1);
   // or
   gadgets.setLogLevel(gadgets.log.INFO);

   Or to record only error messages:

   gadgets.setLogLevel(3);
   // or
   gadgets.setLogLevel(gadgets.log.ERROR);

4.1.2.  The IO Feature

   The IO Feature provides a mechanism for retrieving external content
   provided either by the container or other remote endpoints.

   The IO Feature is automatically enabled for all applications.

4.1.2.1.  JavaScript API

   The IO Feature provides the following JavaScript API methods and
   constants to developers:

4.1.2.1.1.  gadgets.io.encodeValues

   The "gadgets.io.encodeValues" method converts an input JavaScript
   object into a URL-encoded string as defined by Section 2.1 of
   [RFC3986].

   <static> <String> gadgets.io.encodeValues(object)

   The method takes as input a single JavaScript object whose property
   names and values will be enumerated and converted into a proper URL-
   formatted String that is returned to the caller.  The resulting
   String will be constructed such that each property and value pair is
   separated by an ampersand (&) character.

   For example, given the following object:

   var data = {
     "foo" : "bar",
     "abc" : 123,
     "zyx" : true,
     "baz" : ["a","b","c"]
   }

   Calling "gadgets.io.encodeValues(data)" would generate the output:

   foo=bar&abc=123&zyx=true&baz=a,b,c




(surname)               Expires October 31, 2012               [Page 97]

Internet-Draft                Core-Gadget                       May 2012


   If the value of top-level property or member of an Array is any value
   other than a JavaScript primitive, it's value will be encoded as a
   JSON-serialized String as returned by the "gadgets.json.stringify"
   method.

   For instance, given the following input:

   var data = {
     "foo" : {
       "a" : "b",
       "c" : "d"
     },
     "bar" : [
       { "xyz" : "123" },
       { "abc" : 321 }
     ]
   }

   Calling "gadgets.io.encodeValues(data)" would generate the output:

   foo=%7B%22a%22%3A%22b%22%2C%22c%22%3A%22d%22%7D&bar=%7B%22xyz%22%3A%22123%22%7D,%7B%22abc%22%3A321%7D

4.1.2.1.2.  gadgets.io.getProxyUrl

   When an application needs to load data from an external source -- for
   instance, an image or script resource -- it can either choose to
   access that content directly or proxy the request for the content
   through the container.  In the latter case, the
   "gadgets.io.getProxyUrl" can be used to ask the container to generate
   a "Proxy URL" for the remote resource that the application would use
   in place of the resource's own direct URL.

   <static> <String> gadgets.io.getProxyUrl(url, opt_params)

   The method accepts as input the remote URL for which the Proxy URL is
   to be generated and an optional collection of additional properties
   the container will use when generating the returned Proxy URL.

   The following table lists the additional properties currently defined
   by this specification.  For convenience, an alias is defined for each
   that MAY be used in place of the literal property name in JavaScript
   code:












(surname)               Expires October 31, 2012               [Page 98]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+-----------------------------------------+----------+
   | Name         | Alias                                   | Descript |
   |              |                                         | ion      |
   +--------------+-----------------------------------------+----------+
   | REFRESH_INTE | gadgets.io.ProxyUrlRequestParameters.RE | Explicit |
   | RVAL         | FRESH_INTERVAL                          | ly sets  |
   |              |                                         | the      |
   |              |                                         | numer of |
   |              |                                         | seconds  |
   |              |                                         | content  |
   |              |                                         | will be  |
   |              |                                         | cached   |
   |              |                                         | by the c |
   |              |                                         | ontainer |
   |              |                                         | as descr |
   |              |                                         | ibed in  |
   |              |                                         | Section  |
   |              |                                         | 3.2.     |
   +--------------+-----------------------------------------+----------+

   Containers are free to accept additional optional parameters, however
   the definition and use of such parameters are undefined by this
   specification.

   The following example creates a Proxy URL for a remote image file and
   sets a cache timeout of one hour.  The proxy URL is then used within
   the src attribute of an HTML image tag.  When the image tag is
   rendered, a request will be sent to the Proxy URL causing the
   container to fetch the image from the remote source and cache it
   locally.

   <?xml version="1.0" encoding="UTF-8" ?>
   <Module>
     <ModulePrefs>
       <Require feature="osapi" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       ...
       <script>
         function fetchImage() {
           var imgsrc = "http://example.org/avatars/bob.png";
           var img = document.createElement("img");
           img.src = gadgets.io.getProxyUrl(imgsrc);
           ...
         }
         gadgets.util.registerOnLoadHandler(fetchImage);
       </script>
     ]]></Content>
   </Module>

4.1.2.1.3.  gadgets.io.makeRequest



(surname)               Expires October 31, 2012               [Page 99]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.io.makeRequest" method is used to send HTTP requests to
   a provided URL and pass the returned content to a callback function.

   <static> <Void> gadgets.io.makeRequest(url, callback, opt_params)

   The method takes as input a single URL to which requests will be
   sent, a reference to a callback function that the container will
   invoke when the request has completed, and an object containing an
   optional collection of additional parameters.  No return value is
   specified for the method.

   In the following example, a simple HTTP GET request is sent to a
   remote endpoint with no additional request parameters:

   gadgets.io.makeRequest(
     "http://example.org/foo",
     function(response) {
       // handle the response
     }
   );

   The following table lists the additional properties currently defined
   by this specification.  For convenience, an alias is defined for each
   that MAY be used in place of the literal property name in JavaScript
   code:





























(surname)               Expires October 31, 2012              [Page 100]

Internet-Draft                Core-Gadget                       May 2012


   +----------------+-----------------------------+--------------------+
   | Name           | Alias                       | Description        |
   +----------------+-----------------------------+--------------------+
   | "ALIAS"        | "gadgets.io.RequestParamete | When a             |
   |                | rs.ALIAS"                   | specification      |
   |                |                             | document uses the  |
   |                |                             | <ExternalService>  |
   |                |                             | element to define  |
   |                |                             | an alias for a     |
   |                |                             | Container-managed  |
   |                |                             | external service,  |
   |                |                             | the optional       |
   |                |                             | "ALIAS" parameter  |
   |                |                             | can be used in     |
   |                |                             | place of the "gadg |
   |                |                             | ets.io.makeRequest |
   |                |                             | " methods "url"    |
   |                |                             | parameter to       |
   |                |                             | identify the       |
   |                |                             | external service   |
   |                |                             | to which the       |
   |                |                             | request is to be   |
   |                |                             | directed. If       |
   |                |                             | unspecified, the   |
   |                |                             | default value for  |
   |                |                             | this parameter is  |
   |                |                             | assumed to be      |
   |                |                             | null.              |
   | "AUTHORIZATION | "gadgets.io.RequestParamete | Specifies the      |
   | "              | rs.AUTHORIZATION"           | authorization      |
   |                |                             | method to use.     |
   |                |                             | Valid values are:  |
   |                |                             | "none", "signed",  |
   |                |                             | "oauth" and        |
   |                |                             | "oauth2".  For     |
   |                |                             | convenience,       |
   |                |                             | aliases for each   |
   |                |                             | of these values    |
   |                |                             | have been provided |
   |                |                             | for use in         |
   |                |                             | JavaScript code.   |
   |                |                             | These aliases are: |
   |                |                             | "gadgets.io.Author |
   |                |                             | izationType.NONE", |
   |                |                             | "gadgets.io.Author |
   |                |                             | izationType.SIGNED |
   |                |                             | ", "gadgets.io.Aut |
   |                |                             | horizationType.OAU |
   |                |                             | TH" and "gadgets.i |
   |                |                             | oAuthorizationType |
   |                |                             | .OAUTH2".  If not  |
   |                |                             | specified, the     |
   |                |                             | default value for  |

(surname)               Expires October 31, 2012              [Page 101]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | this parameter is  |
   |                |                             | assumed to be      |
   |                |                             | "none".            |
   | "CONTENT_TYPE" | "gadgets.io.RequestParamete | The value of the   |
   |                | rs.CONTENT_TYPE"            | "CONTENT_TYPE"     |
   |                |                             | parameter serves   |
   |                |                             | as a hint to the   |
   |                |                             | container as to    |
   |                |                             | what kind of       |
   |                |                             | content the        |
   |                |                             | request is         |
   |                |                             | expected to return |
   |                |                             | so that the        |
   |                |                             | container can      |
   |                |                             | perform any        |
   |                |                             | appropriate        |
   |                |                             | additional         |
   |                |                             | processing         |
   |                |                             | necessary on the   |
   |                |                             | response. Valid    |
   |                |                             | values are: "DOM", |
   |                |                             | "FEED", "JSON" and |
   |                |                             | "TEXT". For        |
   |                |                             | convenience,       |
   |                |                             | aliases for each   |
   |                |                             | of these values    |
   |                |                             | have been provided |
   |                |                             | for use in         |
   |                |                             | JavaScript code.   |
   |                |                             | These aliases are: |
   |                |                             | "gadgets.io.Conten |
   |                |                             | tType.DOM", "gadge |
   |                |                             | ts.io.ContentType. |
   |                |                             | FEED", "gadgets.io |
   |                |                             | .ContentType.JSON" |
   |                |                             | and "gadgets.io.Co |
   |                |                             | ntentType.TEXT".   |
   |                |                             | If not specified,  |
   |                |                             | the default value  |
   |                |                             | for this is        |
   |                |                             | assumed to be      |
   |                |                             | "TEXT", indicating |
   |                |                             | that no specific   |
   |                |                             | content-type is to |
   |                |                             | be assumed.        |
   | "GET_FULL_HEAD | "gadgets.io.RequestParamete | The value of the   |
   | ERS"           | rs.GET_FULL_HEADERS"        | "GET_FULL_HEADERS" |
   |                |                             | parameter is a     |
   |                |                             | boolean. If true,  |
   |                |                             | the response       |
   |                |                             | object passed to   |
   |                |                             | the callback       |
   |                |                             | function will      |
   |                |                             | contain the        |

(surname)               Expires October 31, 2012              [Page 102]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | complete           |
   |                |                             | collection of      |
   |                |                             | Headers and their  |
   |                |                             | associated values  |
   |                |                             | as returned in the |
   |                |                             | HTTP response. If  |
   |                |                             | unspecified, the   |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | False, in which    |
   |                |                             | case the container |
   |                |                             | will determine     |
   |                |                             | which collection   |
   |                |                             | of headers to pass |
   |                |                             | to the callback    |
   |                |                             | function.          |
   | "GET_SUMMARIES | "gadgets.io.RequestParamete | When the           |
   | "              | rs.GET_SUMMARIES"           | "CONTENT_TYPE"     |
   |                |                             | parmameter equals  |
   |                |                             | the value "feed",  |
   |                |                             | the                |
   |                |                             | "GET_SUMMARIES"    |
   |                |                             | parameter          |
   |                |                             | specifies a        |
   |                |                             | boolean that when  |
   |                |                             | set to True,       |
   |                |                             | instructs the      |
   |                |                             | container to pass  |
   |                |                             | only summarized    |
   |                |                             | versions of the    |
   |                |                             | retrieved items in |
   |                |                             | the feed to the    |
   |                |                             | callback function. |
   |                |                             | It is the          |
   |                |                             | containers         |
   |                |                             | responsibility to  |
   |                |                             | determine what     |
   |                |                             | constitutes a the  |
   |                |                             | summarized version |
   |                |                             | of the item. If    |
   |                |                             | not specified, the |
   |                |                             | default value for  |
   |                |                             | this parameter is  |
   |                |                             | assumed to be      |
   |                |                             | False.             |
   | "HEADERS"      | "gadgets.io.RequestParamete | Specifies the      |
   |                | rs.HEADERS"                 | collection of HTTP |
   |                |                             | Request Headers    |
   |                |                             | the container      |
   |                |                             | SHOULD include in  |
   |                |                             | the request. The   |
   |                |                             | value is specifies |
   |                |                             | as an associative  |
   |                |                             | map using the      |

(surname)               Expires October 31, 2012              [Page 103]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | header names as a  |
   |                |                             | key and a literal  |
   |                |                             | String value. For  |
   |                |                             | example, to        |
   |                |                             | include "Accept-   |
   |                |                             | Language" and      |
   |                |                             | "X-Custom" headers |
   |                |                             | in the request,    |
   |                |                             | the value of the   |
   |                |                             | "HEADERS" property |
   |                |                             | would be set to    |
   |                |                             | "{"Accept-Language |
   |                |                             | ":"de-DE", "X-Cust |
   |                |                             | om":"abc"}".       |
   | "METHOD"       | "gadgets.io.RequestParamete | Specifies the HTTP |
   |                | rs.METHOD"                  | method that MUST   |
   |                |                             | be used for the    |
   |                |                             | request.  Valid    |
   |                |                             | values are         |
   |                |                             | "DELETE", "GET",   |
   |                |                             | "HEAD", "PATCH",   |
   |                |                             | "POST" and "PUT".  |
   |                |                             | For convenience,   |
   |                |                             | aliases for each   |
   |                |                             | of these values    |
   |                |                             | have been provided |
   |                |                             | for use in         |
   |                |                             | JavaScript code.   |
   |                |                             | The aliases are: " |
   |                |                             | gadgets.io.MethodT |
   |                |                             | ype.DELETE", "gadg |
   |                |                             | ets.io.MethodType. |
   |                |                             | GET", "gadgets.io. |
   |                |                             | MethodType.HEAD",  |
   |                |                             | "gadgets.io.Method |
   |                |                             | Type.PATCH", "gadg |
   |                |                             | ets.io.MethodType. |
   |                |                             | POST" and "gadgets |
   |                |                             | .io.MethodType.PUT |
   |                |                             | ".  If not         |
   |                |                             | specified, the     |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | "GET".             |
   | "NUM_ENTRIES"  | "gadgets.io.RequestParamete | When the           |
   |                | rs.NUM_ENTRIES"             | "CONTENT_TYPE"     |
   |                |                             | parameter equals   |
   |                |                             | the value "feed",  |
   |                |                             | the "NUM_ENTRIES"  |
   |                |                             | parameter          |
   |                |                             | specifies the      |
   |                |                             | maximum number of  |
   |                |                             | items from the     |
   |                |                             | feed to return to  |

(surname)               Expires October 31, 2012              [Page 104]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | the callback       |
   |                |                             | function. If not   |
   |                |                             | specified, the     |
   |                |                             | default value for  |
   |                |                             | this parameter is  |
   |                |                             | assumed to be "3". |
   | "OAUTH_RECEIVE | "gadgets.io.RequestParamete | When the container |
   | D_CALLBACK"    | rs.OAUTH_RECEIVED_CALLBACK" | sends a request to |
   |                |                             | an OAuth service   |
   |                |                             | provider asking    |
   |                |                             | for permission to  |
   |                |                             | access a given     |
   |                |                             | resource, it will, |
   |                |                             | by default,        |
   |                |                             | specify a default  |
   |                |                             | container-specific |
   |                |                             | callback URI that  |
   |                |                             | the OAuth service  |
   |                |                             | provider will use  |
   |                |                             | to redirect        |
   |                |                             | control back to    |
   |                |                             | the container and  |
   |                |                             | deliver the        |
   |                |                             | requested access   |
   |                |                             | token. In certain  |
   |                |                             | cases, a specific  |
   |                |                             | application        |
   |                |                             | instance might     |
   |                |                             | need to override   |
   |                |                             | the default        |
   |                |                             | callback URI.  The |
   |                |                             | "OAUTH_RECEIVED_CA |
   |                |                             | LLBACK" parameter  |
   |                |                             | can be used to     |
   |                |                             | specify an         |
   |                |                             | alternative        |
   |                |                             | absolute URI       |
   |                |                             | reference.         |
   | "OAUTH_REQUEST | "gadgets.io.RequestParamete | When the           |
   | _TOKEN"        | rs.OAUTH_REQUEST_TOKEN"     | "AUTHORIZATION"    |
   |                |                             | parameter is equal |
   |                |                             | to either "OAUTH"  |
   |                |                             | or "OAUTH2", the " |
   |                |                             | OAUTH_REQUEST_TOKE |
   |                |                             | N" parameter can   |
   |                |                             | be used to         |
   |                |                             | specified a pre-   |
   |                |                             | authorized OAuth   |
   |                |                             | Request Token for  |
   |                |                             | use in the         |
   |                |                             | request. If the    |
   |                |                             | container does not |
   |                |                             | already have an    |
   |                |                             | OAuth Access Token |

(surname)               Expires October 31, 2012              [Page 105]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | suitable for use   |
   |                |                             | with the request,  |
   |                |                             | the container      |
   |                |                             | SHOULD use the     |
   |                |                             | supplied Request   |
   |                |                             | Token to request   |
   |                |                             | and acquire a new  |
   |                |                             | Access Token. If   |
   |                |                             | not specified, the |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | null.              |
   | "OAUTH_REQUEST | "gadgets.io.RequestParamete | When the "OAUTH_RE |
   | _TOKEN_SECRET" | rs.OAUTH_REQUEST_TOKEN_SECR | QUEST_TOKEN"       |
   |                | ET"                         | parameter is       |
   |                |                             | specified, the "OA |
   |                |                             | UTH_REQUEST_TOKEN_ |
   |                |                             | SECRET" parameter  |
   |                |                             | can be used to     |
   |                |                             | supply an          |
   |                |                             | associated Request |
   |                |                             | Token Secret. If   |
   |                |                             | not specified, the |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | null.              |
   | "OAUTH_SERVICE | "gadgets.io.RequestParamete | When the           |
   | _NAME"         | rs.OAUTH_SERVICE_NAME"      | "AUTHORIZATION"    |
   |                |                             | parameter is equal |
   |                |                             | to either "OAUTH"  |
   |                |                             | or "OAUTH2", and   |
   |                |                             | the specification  |
   |                |                             | document uses the  |
   |                |                             | <OAuth> or         |
   |                |                             | <OAuth2> elements  |
   |                |                             | within the         |
   |                |                             | <ModulePrefs> to   |
   |                |                             | define associated  |
   |                |                             | OAuth services,    |
   |                |                             | the "OAUTH_SERVICE |
   |                |                             | _NAME" parameter   |
   |                |                             | specifies the name |
   |                |                             | of the <Service>   |
   |                |                             | element that       |
   |                |                             | provides the OAuth |
   |                |                             | Service details to |
   |                |                             | use for the        |
   |                |                             | request.  When not |
   |                |                             | specified, the     |
   |                |                             | default value is   |
   |                |                             | assumed to be an   |
   |                |                             | empty string (e.g. |
   |                |                             | "").               |
   | "OAUTH2_SCOPE" | "gadgets.io.RequestParamete | When the           |

(surname)               Expires October 31, 2012              [Page 106]

Internet-Draft                Core-Gadget                       May 2012

   |                | rs.OAUTH2_SCOPE"            | "AUTHORIZATION"    |
   |                |                             | parameter is equal |
   |                |                             | to "OAUTH2", the   |
   |                |                             | "OAUTH2_SCOPE"     |
   |                |                             | parameter          |
   |                |                             | specifies the      |
   |                |                             | value of the OAuth |
   |                |                             | 2.0 scope          |
   |                |                             | parameter the      |
   |                |                             | container SHOULD   |
   |                |                             | use with the       |
   |                |                             | request. The scope |
   |                |                             | parameter is       |
   |                |                             | defined in [I-D    |
   |                |                             | .ietf-oauth-v2].   |
   |                |                             | If not specified,  |
   |                |                             | the default value  |
   |                |                             | is assumed to be   |
   |                |                             | null, indicating   |
   |                |                             | that no scope      |
   |                |                             | parameter is to be |
   |                |                             | provided.          |
   | "OAUTH_TOKEN_N | "gadgets.io.RequestParamete | When the           |
   | AME"           | rs.OAUTH_TOKEN_NAME"        | "AUTHORIZATION"    |
   |                |                             | parameter is equal |
   |                |                             | to either "OAUTH"  |
   |                |                             | or "OAUTH2", the   |
   |                |                             | application MAY    |
   |                |                             | use the            |
   |                |                             | "OAUTH_TOKEN_NAME" |
   |                |                             | to specify an      |
   |                |                             | alias for the      |
   |                |                             | OAuth Access Token |
   |                |                             | used for the       |
   |                |                             | request. If the    |
   |                |                             | container does not |
   |                |                             | yet have an        |
   |                |                             | appropriate Access |
   |                |                             | Token to use with  |
   |                |                             | the request, it    |
   |                |                             | will follow the    |
   |                |                             | appropriate steps  |
   |                |                             | to acquire one and |
   |                |                             | cache it using the |
   |                |                             | specified          |
   |                |                             | "OAUTH_TOKEN_NAME" |
   |                |                             | value. On          |
   |                |                             | subsequent         |
   |                |                             | requests, the      |
   |                |                             | specified          |
   |                |                             | "OAUTH_TOKEN_NAME" |
   |                |                             | will be used to    |
   |                |                             | locate and use the |
   |                |                             | cached Access      |

(surname)               Expires October 31, 2012              [Page 107]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | Token. If not      |
   |                |                             | specified, the     |
   |                |                             | default value is   |
   |                |                             | assumed to be an   |
   |                |                             | empty string (e.g. |
   |                |                             | "").               |
   | "OAUTH_USE_TOK | "gadgets.io.RequestParamete | When the           |
   | EN"            | rs.OAUTH_USE_TOKEN"         | "AUTHORIZATION"    |
   |                |                             | parameter is equal |
   |                |                             | to either "OAUTH"  |
   |                |                             | or "OAUTH2", the   |
   |                |                             | container is       |
   |                |                             | typically required |
   |                |                             | to acquire an      |
   |                |                             | appropriate OAuth  |
   |                |                             | Access Token prior |
   |                |                             | to sending the     |
   |                |                             | request to the     |
   |                |                             | URL. The           |
   |                |                             | "OAUTH_USE_TOKEN"  |
   |                |                             | parameter can be   |
   |                |                             | used to modify     |
   |                |                             | this default       |
   |                |                             | behavior. Valid    |
   |                |                             | values are:        |
   |                |                             | "never",           |
   |                |                             | "if_available" and |
   |                |                             | "always".  If not  |
   |                |                             | specified, the     |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | "always". When     |
   |                |                             | "OAUTH_USE_TOKEN"  |
   |                |                             | is equal to        |
   |                |                             | "never", the       |
   |                |                             | container SHOULD   |
   |                |                             | NOT attempt to     |
   |                |                             | acquire an Access  |
   |                |                             | Token for the      |
   |                |                             | request but SHOULD |
   |                |                             | send the request   |
   |                |                             | to the URL just as |
   |                |                             | it would any other |
   |                |                             | request using with |
   |                |                             | OAuth 1.0a or      |
   |                |                             | OAuth 2.0          |
   |                |                             | protocols.  When   |
   |                |                             | "OAUTH_USE_TOKEN"  |
   |                |                             | is equal to        |
   |                |                             | "if_available",    |
   |                |                             | the container      |
   |                |                             | SHOULD include the |
   |                |                             | Access Token in    |
   |                |                             | the request only   |

(surname)               Expires October 31, 2012              [Page 108]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | if an appropriate  |
   |                |                             | token is           |
   |                |                             | available. If an   |
   |                |                             | Access Token is    |
   |                |                             | not available, the |
   |                |                             | request SHOULD be  |
   |                |                             | sent to the URL    |
   |                |                             | without the Access |
   |                |                             | Token. When        |
   |                |                             | "OAUTH_USE_TOKEN"  |
   |                |                             | is equal to        |
   |                |                             | "always", the      |
   |                |                             | container is       |
   |                |                             | required to        |
   |                |                             | acquire an Access  |
   |                |                             | Token prior to     |
   |                |                             | sending the        |
   |                |                             | request and MUST   |
   |                |                             | include that token |
   |                |                             | in the request     |
   |                |                             | sent to the URL.   |
   | "POST_DATA"    | "gadgets.io.RequestParamete | When the "METHOD"  |
   |                | rs.POST_DATA"               | parameter equals   |
   |                |                             | either "POST",     |
   |                |                             | "PATCH", or "PUT", |
   |                |                             | the "POST_DATA"    |
   |                |                             | parameter          |
   |                |                             | specifies the data |
   |                |                             | that is to be      |
   |                |                             | included as the    |
   |                |                             | payload of the     |
   |                |                             | request. The value |
   |                |                             | is specified as a  |
   |                |                             | String. If not     |
   |                |                             | specified, the     |
   |                |                             | value defaults to  |
   |                |                             | null, indicating   |
   |                |                             | that no payload is |
   |                |                             | to be sent.        |
   | "REFRESH_INTER | "gadgets.io.RequestParamete | Explicitly sets    |
   | VAL"           | rs.REFRESH_INTERVAL"        | the numer of       |
   |                |                             | seconds content    |
   |                |                             | will be cached by  |
   |                |                             | the container as   |
   |                |                             | specified by       |
   |                |                             | Section 3.2.       |
   | "SIGN_OWNER"   | "gadgets.io.RequestParamete | When the           |
   |                | rs.SIGN_OWNER"              | "AUTHORIZATION"    |
   |                |                             | parameter equals   |
   |                |                             | either "SIGNED" or |
   |                |                             | "OAUTH", the       |
   |                |                             | "SIGN_OWNER"       |
   |                |                             | parameter          |
   |                |                             | indicates whether  |

(surname)               Expires October 31, 2012              [Page 109]

Internet-Draft                Core-Gadget                       May 2012

   |                |                             | the container      |
   |                |                             | SHOULD include the |
   |                |                             | identity of the    |
   |                |                             | Instance Owner     |
   |                |                             | (Section 1.3) when |
   |                |                             | signing the        |
   |                |                             | request as         |
   |                |                             | described in       |
   |                |                             | Section 3.1.  The  |
   |                |                             | value is specified |
   |                |                             | as a Boolean. When |
   |                |                             | not specified, the |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | False.             |
   | "SIGN_VIEWER"  | "gadgets.io.RequestParamete | When the           |
   |                | rs.SIGN_VIEWER"             | "AUTHORIZATION"    |
   |                |                             | parameter equals   |
   |                |                             | either "SIGNED" or |
   |                |                             | "OAUTH", the       |
   |                |                             | "SIGN_VIEWER"      |
   |                |                             | parameter          |
   |                |                             | indicates whether  |
   |                |                             | the container      |
   |                |                             | SHOULD include the |
   |                |                             | identity of the    |
   |                |                             | current Viewer     |
   |                |                             | when signing the   |
   |                |                             | request as         |
   |                |                             | described in       |
   |                |                             | Section 3.1. The   |
   |                |                             | value is specified |
   |                |                             | as a Boolean. When |
   |                |                             | not specified, the |
   |                |                             | default value is   |
   |                |                             | assumed to be      |
   |                |                             | False.             |
   +----------------+-----------------------------+--------------------+

   Containers are free to accept additional optional parameters, however
   the definition and use of such parameters are undefined by this
   specification.

4.1.2.1.3.1.  The callback parameter and the Response Object

   When the container finished processing the request, the response data
   is returned to the application by passing a Response Object as a
   parameter to the provided callback function.

   The properties of the Response object passed to the callback function
   are:




(surname)               Expires October 31, 2012              [Page 110]

Internet-Draft                Core-Gadget                       May 2012


   +--------------------+-----------+----------------------------------+
   | Name               | Type      | Description                      |
   +--------------------+-----------+----------------------------------+
   | "data"             | (varies)  | Provides the parsed data of the  |
   |                    |           | response, if applicable.  The    |
   |                    |           | value type will vary depending   |
   |                    |           | on the value of the              |
   |                    |           | "CONTENT_TYPE" parameter         |
   |                    |           | specified for the request. If    |
   |                    |           | "CONTENT_TYPE" was not           |
   |                    |           | specified, then the value "TEXT" |
   |                    |           | is assumed to have been used.    |
   |                    |           | When "CONTENT_TYPE" equals       |
   |                    |           | "DOM", the value is an HTML DOM  |
   |                    |           | object. When "CONTENT_TYPE"      |
   |                    |           | equals "FEED", the value is a    |
   |                    |           | JSON representation of an RSS or |
   |                    |           | or Atom Document as specified by |
   |                    |           | [TODO: Feed Object Reference].   |
   |                    |           | When "CONTENT_TYPE" equals       |
   |                    |           | "JSON", the value is a JSON      |
   |                    |           | Object. When "CONTENT_TYPE" is   |
   |                    |           | text, or if the response could   |
   |                    |           | not be parsed by the container,  |
   |                    |           | the value is a String containing |
   |                    |           | the unparsed content of the      |
   |                    |           | response payload.                |
   | "errors"           | Array of  | Provides a listing of any errors |
   |                    | Error     | that occurred during the         |
   |                    | Objects   | processing of the request. TODO: |
   |                    |           | Need more detail on this.        |
   | "headers"          | Headers   | An object containing the         |
   |                    | Object    | response headers. Header names   |
   |                    |           | are used as the keys for this    |
   |                    |           | object. TODO: Need more detail   |
   |                    |           | on this.                         |
   | "rc"               | Number    | Provides a numeric value         |
   |                    |           | representing the HTTP status     |
   |                    |           | code of the response.            |
   | "text"             | String    | Provides a String containing the |
   |                    |           | unparsed content of the response |
   |                    |           | payload.                         |
   | "oauthApprovalUrl" | String    | When either the OAuth 1.0a or    |
   |                    |           | OAuth 2.0 protocols are used to  |
   |                    |           | secure a request and the         |
   |                    |           | container requires an            |
   |                    |           | appropriate Access Token to be   |
   |                    |           | acquired in order to continue,   |
   |                    |           | the container will abort the     |
   |                    |           | request and invoke the callback  |
   |                    |           | function, passing in a Response  |
   |                    |           | object with the                  |
   |                    |           | "oauthApprovalUrl" property set. |

(surname)               Expires October 31, 2012              [Page 111]

Internet-Draft                Core-Gadget                       May 2012

   |                    |           | The value is a String providing  |
   |                    |           | the URL of an external page      |
   |                    |           | provided by the OAuth Service    |
   |                    |           | Provider to allow the user to    |
   |                    |           | approve the request. Use of the  |
   |                    |           | OAuth Popup Feature as defined   |
   |                    |           | by Section 4.2.8 is recommended. |
   |                    |           | Once approval has been acquired, |
   |                    |           | the call to                      |
   |                    |           | "gadgets.io.makeRequest" needs   |
   |                    |           | to be repeated in order to       |
   |                    |           | complete the request.            |
   | "oauthError"       | String    | When either the OAuth 1.0a or    |
   |                    |           | OAuth 2.0 protocols are used to  |
   |                    |           | secure a request and an OAuth    |
   |                    |           | related error occurs at anytime  |
   |                    |           | during the processing of the     |
   |                    |           | request, the container will      |
   |                    |           | abort the request and invoke the |
   |                    |           | callback function, passing in a  |
   |                    |           | Response object with the         |
   |                    |           | "oauthError" property set. The   |
   |                    |           | value will be one of a set of    |
   |                    |           | OAuth-specific String constants  |
   |                    |           | that identify the error that has |
   |                    |           | occurred.                        |
   | oauthErrorText     | String    | When the Response Object is used |
   |                    |           | to communicate information about |
   |                    |           | an OAuth-related error and the   |
   |                    |           | "oauthError" property is set,    |
   |                    |           | the "oauthErrorText" property    |
   |                    |           | MAY be used by the container to  |
   |                    |           | provide a human-readable         |
   |                    |           | description of the error for     |
   |                    |           | debugging or informational       |
   |                    |           | purposes.                        |
   +--------------------+-----------+----------------------------------+

4.1.3.  The JSON Feature

   The JSON Feature provides operations for serializing objects to and
   from a JSON-formatted String.

4.1.3.1.  JavaScript API

   The JSON Feature provides the following JavaScript API methods to
   developers:

4.1.3.1.1.  gadgets.json.parse

   The "gadgets.json.parse" method parses a JSON-formatted String and
   returns the corresponding JavaScript object value.

   <static> <Object> gadgets.json.parse(text)

(surname)               Expires October 31, 2012              [Page 112]

Internet-Draft                Core-Gadget                       May 2012


4.1.3.1.2.  gadgets.json.stringify

   The "gadgets.json.stringify" method serializes a JavaScript value
   into a JSON-formatted string.

   <static> <String> gadgets.json.stringify(object)

   The object takes as input any valid JavaScript object and returns an
   equivalent JSON object.  If the value of a property is a reference to
   another object, the reference object will also be serialized.
   Properties whose values are references to Function objects will be
   ignored and omitted from the resulting JSON-serialization.

   For instance, the following example:

   var l = {"z":"y"};
   var data = {
     "a" : "a",
     "b" : [1,2,3],
     "c" : l,
     "d" : new Date(),
     "e" : [],
     "f" : {},
     "g" : null
   }
   var output = gadgets.json.stringify(data);

   Would yield the following as the value for the output variable:

   {"a":"a","b":[1,2,3],"c":{"z":"y"},"d":"2012-03-28T23:16:50.560Z","e":[],"f":{},"g":null}

4.1.4.  The User Preferences Feature

   The User Preferences Feature provides access to user preferences,
   preferred rendering dimensions and the localized collection of
   messages selected by the container for a view currently being
   rendered by the container.

   The User Preferences Feature is automatically enabled for all
   applications.

4.1.4.1.  JavaScript API

   The User Preferences Feature provides the following JavaScript API
   objects and methods to developers:

4.1.4.1.1.  The gadgets.Prefs Object

   Instances of the "gadgets.Prefs" Object provide access to the user
   preferences, preferred rendering dimensions and localized collection
   of messages selected by the container for a specific application
   instance.


(surname)               Expires October 31, 2012              [Page 113]

Internet-Draft                Core-Gadget                       May 2012


   Instances of the object are created using the JavaScript new keyword.
   The specific identity of a specific application instance MAY be
   passed in as an optional parameter.

   In the example below, a "gadgets.Prefs" object is created to access
   the current Viewer's preferred language and the stored value of the
   "name" user preference:

   var prefs = new gadgets.Prefs();
   var name = prefs.getString("name");
   var lang = prefs.getLang();

   The "gadgets.Prefs" object provides the following collection of
   methods:

4.1.4.1.1.1.  gadgets.Prefs.getArray

   The "gadgets.Prefs.getArray" method returns the stored value
   associated with the specified user preference key as a JavaScript
   array.  If the value stored is not currently an array, the value will
   be returned as an an array with a single element.  If no value is
   currently associated with the specified key, an empty array will be
   returned.

   <Array> <instance>.getArray(key)

   For example:

   var prefs = new gadget.Prefs();
   var array = prefs.getArray("foo");
   for (var n = 0; n < array.length; n++) {
     var item = array[n];
     // ...
   }

4.1.4.1.1.2.  gadgets.Prefs.getBool

   The "gadgets.Prefs.getBool" method returns the stored value
   associated with the specified user preference key as a JavaScript
   Boolean.  If the stored value is either not current specified or
   cannot be interpreted as a Boolean, the value returned will be False.
   If the stored value is the literal String "true" or a non-zero number
   (positive or negative) the value returned will be True.

   <Boolean> <instance>.getBool(key)

   For example:

   var prefs = new gadget.Prefs();
   if (prefs.getBool("foo")) {
     // ...
   }


(surname)               Expires October 31, 2012              [Page 114]

Internet-Draft                Core-Gadget                       May 2012


4.1.4.1.1.3.  gadgets.Prefs.getCountry

   The "gadgets.Prefs.getCountry" method returns the current Viewer's
   country as determined by the container.  The value will be an ISO
   3166-1 Country Code.

   <String> <instance>.getCountry()

   For example:

   var prefs = new gadgets.Prefs();
   var country = prefs.getCountry();

4.1.4.1.1.4.  gadgets.Prefs.getFloat

   The "gadgets.Prefs.getFloat" method returns the stored value
   associated with the specified user preference key as a JavaScript
   Number containing a floating-point value.  If the stored value is
   either not current specified or cannot be interpreted as a floating
   point number, the value returned will be 0.

   <Number> <instance>.getFloat(key)

   For example:

   var prefs = new gadget.Prefs();
   var float = prefs.getFloat("foo");

4.1.4.1.1.5.  gadgets.Prefs.getInt

   The "gadgets.Prefs.getInt" method returns the stored value associated
   with the specified user preference key as a JavaScript Number
   containing an integer value.  If the stored value is either not
   currently specified or cannot be interpreted as an integer number,
   the value returned will be "0".

   <Number> <instance>.getInt(key)

   For example:

   var prefs = new gadget.Prefs();
   var int = prefs.getInt("foo");

4.1.4.1.1.6.  gadgets.Prefs.getLang

   The "gadgets.Prefs.getLang" method returns the current Viewer's
   preferred language as determined by the container.  The value will be
   an ISO 639-1 Language Code.

   <String> <instance>.getLang()

   For example:


(surname)               Expires October 31, 2012              [Page 115]

Internet-Draft                Core-Gadget                       May 2012


   var prefs = new gadgets.Prefs();
   var lang = prefs.getLang();

4.1.4.1.1.7.  gadgets.Prefs.getModuleId

   The "gadgets.Prefs.getModuleId" method returns the gadget instances
   unique ID as provided by the container.

   <String> <instance>.getModuleId()

   For example:

   var prefs = new gadgets.Prefs();
   var id = prefs.getModuleId();

4.1.4.1.1.8.  gadgets.Prefs.getMsg

   The "gadgets.Prefs.getMsg" method returns the localized String value
   associated with the specified key as provided by the Message Bundle
   selected by the container for the current Viewer's preferred language
   and country.  Messages are defined using <Locale> elements within the
   <ModulePrefs>.  If the specified key has no associated message, an
   empty String will be returned.

   <String> <instance>.getMsg(key)

   For example:

   <Module>
     <ModulePrefs>
       ...
       <Locale>
         <msg name="foo">Test message>/msg>
         ...
       </Locale>
       ...
     </ModulePrefs>
     <Content type="html"><[CDATA[
       ...
       <script>
         ...
         var prefs = new gadgets.Prefs();
         var foo = prefs.getMsg("foo");
         // foo = "Test message"
         ...
       </script>
       ...
     ]]></Content>
   </Module>

4.1.4.1.1.9.  gadgets.Prefs.getString



(surname)               Expires October 31, 2012              [Page 116]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.Prefs.getString" method returns the stored value
   associated with the specified user preference key as a JavaScript
   String.  If the stored value is not currently specified, the value
   returned will be an empty String.

   <String> <instance>.getString(key)

   For example:

   var prefs = new gadgets.Prefs();
   var str = prefs.getString("foo");

4.1.4.2.  The "setprefs" Feature

   By default, the "gadgets.Prefs" object provides read-only access to
   the stored user preferences for particular application instance.  In
   order to modify the user preference values, the "setprefs" feature
   MUST be specified using either the <Require> or <Optional> element
   within the <ModulePrefs>.

   Containers MUST provide the "setprefs" feature.

   For example:

   <Module>
     <ModulePrefs>
       ...
       <Require feature="setprefs" />
       ...
     </ModulePrefs>
     ...
   </Module>

4.1.4.2.1.  JavaScript API

   When the "setprefs" feature is enabled for an application, two
   additional JavaScript methods: "set" and "setArray" are enabled for
   use on the "gadgets.Prefs" object.

4.1.4.2.1.1.  gadgets.Prefs.set

   The "gadgets.Prefs.set" method stores the specified value and
   associates it with the given key.  The value can be any JavaScript
   primitive.  No return value is specified.

   <Void> <instance>.set(key,value)

   For example:

   var prefs = new gadgets.Prefs();
   prefs.set("foo", "Some value");

4.1.4.2.1.2.  gadgets.Prefs.setArray

(surname)               Expires October 31, 2012              [Page 117]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.Prefs.setArray" method stores the specified Array value
   and associates it with the given key.  The members of the Array can
   be any JavaScript primitive.  No return value is specified.

   <Void> <instance>.setArray(key,array)

   For example:

   var prefs = new gadgets.Prefs();
   prefs.setArray("foo",["a","b","c"]);

4.1.5.  The Utility Feature

   The Utility Feature provides general purpose utility functions that
   are available automatically for all applications.

4.1.5.1.  JavaScript API

   The Utility Feature provides the following JavaScript API methods to
   developers:

4.1.5.1.1.  gadgets.util.escapeString

   The "gadgets.util.escapeString" processes the characters of an input
   String and replaces specific potentially problematic characters with
   corresponding HTML entities.

   <static> <String> gadgets.util.escapeString(str)

   The following characters are affected:

     +-------------------------+-------------------+-------------+
     | Character               | Unicode Codepoint | Replacement |
     +-------------------------+-------------------+-------------+
     | newline (\n)            | 10                | &#10;       |
     | carriage return (\r)    | 13                | &#13;       |
     | double quote (")        | 34                | &quot;      |
     | ampersand (&)           | 38                | &amp;       |
     | single quote (')        | 39                | &#39;       |
     | left angle bracket (<)  | 60                | &lt;        |
     | right angle bracket (>) | 62                | &gt;        |
     | backslash (\)           | 92                | &#92;       |
     | line separator          | 8232              | &#8232;     |
     | paragraph separator     | 8233              | &#8233;     |
     +-------------------------+-------------------+-------------+

4.1.5.1.2.  gadgets.util.getFeatureParameters

   The "gadgets.util.getFeatureParameters" returns collection of
   parameters provided for the given feature as specified by <Param>
   elements within a <Require> or <Optional> element in the
   <ModulePrefs>.


(surname)               Expires October 31, 2012              [Page 118]

Internet-Draft                Core-Gadget                       May 2012


   <static> <Object> gadgets.util.getFeatureParameters(feature)

   The method accepts as input a String specifying the feature name and
   returns a JavaScript object.  Each property of the returned object
   corresponds to one <Param> element contained by the <Require> or
   <Optional> element for the named feature.  If the feature does not
   exist in the <ModulePrefs>, a null value is returned.

   For example:

   <Module>
     <ModulePrefs>
       ...
       <Require feature="myFeature">
         <Param name="foo"><![CDATA[This is the value]]></Param>
       </Require>
       ...
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         ...
         var myFeatureParams = gadgets.util.getFeatureParameters("myFeature");
         var foo = myFeatureParams["foo"]; // returns "This is the value"
         ...
       </script>
     ]]></Content>
   </Module>

4.1.5.1.3.  gadgets.util.hasFeature

   The "gadgets.util.hasFeature" returns whether or not the specified
   feature has been enabled for this application instance.

   <static> <Boolean> gadgets.util.hasFeature(feature)

4.1.5.1.4.  gadgets.util.registerOnLoadHandler

   The "gadgets.util.registerOnLoadHandler" method registers a Function
   that the container will execute immediately after loading the
   application.  Multiple Functions can be registered; all will be
   invoked in the same order in which they were registered.

   <static> <Void> gadgets.util.registerOnLoadHandler(callback)

   The "gadgets.util.registerOnLoadHandler" mechanism is generally
   equivalent to the onLoad event handler on the HTML Body tag.  Once
   the container has fully rendered the content of a particular view,
   all of the registered callback Functions will be invoked.

4.1.5.1.5.  gadgets.util.sanitizeHtml




(surname)               Expires October 31, 2012              [Page 119]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.util.sanitizeHtml" method processes a text String that
   potentially may contain unsafe and untrusted JavaScript code or
   Stylesheets and returns a modified version that is safe for
   rendering.  The returned value MAY still include HTML markup.  If
   plain text without markup is desired, the "gadgets.util.escapeString"
   method SHOULD be used instead.  Exactly how the String is to be
   modified is up to each container implementation.

   <static> <String> gadgets.util.sanitizeHtml(text)

   The method takes as input a single text String value and returns the
   "sanitized" version of that String.

4.1.5.1.6.  gadgets.util.unescapeString

   The "gadgets.util.unescapeString" reverses the processing of the
   "gadgets.util.escapeString" method by replacing HTML entities with
   their literal character equivalents

   <static> <String> gadgets.util.unescapeString(str)

   For example:

   var m = "&lt;p&gt;&quot;Hello&quot;&lt;/p&gt;";
   var n = gadgets.util.unescapeString(m);
   // n will equal: <p>"Hello"</p>

4.2.  Recommended Features

   Recommended Features SHOULD be implemented by a container and made
   available to application instances that specify the feature ID using
   either the <Require> or <Optional> element in the <ModulePrefs>

4.2.1.  The Action Contributions Feature

   Some container implementations reserve portions of their user
   interface for providing links, menus, buttons, etc that are distinct
   from the applications they host.  The "Action Contributions" feature
   allows applications to contribute functionality to these reserved
   areas.

   Additionally, applications can use the feature to associate actions
   with specific types of OpenSocial objects.  In traditional desktop
   applications, such actions are often rendered as options on context
   menus when you click on an object such as a person or file.  For
   instance, selecting a Person object might display options like "Start
   a Chat" or "View Contact Information".  With the "Action
   Contributions" feature, an application can notify the container of
   which such actions it can provide so that when a user selects the
   action, the container can direct the appropriate application to carry
   it out.



(surname)               Expires October 31, 2012              [Page 120]

Internet-Draft                Core-Gadget                       May 2012


   The "Action Contributions" feature is enabled by specifying the
   "actions" feature name with either an <Optional> or <Require> element
   within the <ModulePrefs>. The actions contributed by the application
   are specified using a <Param> element with the name "action-
   contributions" within the feature declaration.

   The following example defines an optional dependency on the "Action
   Contributions" feature and contributes a single action to the set of
   "Navigation Links" provided by the container.  The "path" property on
   the <action> element specifies where the action is being contributed.
   When the item is selected, the container will invoke the callback
   handler provided by the JavaScript in the <Content> element.

     <Module>
       <ModulePrefs title="Sample VOIP">
         <Optional feature="actions">
           <Param name="action-contributions"><![CDATA[
             <action id="org.samplervoip.navLink"
               path="container/navigationLinks"
               label="Phone" />
           ]]></Param>
         </Optional>
       </ModulePrefs>
       <Content type="html"><![CDATA[
         <script>
   
           function navLink(selection) { ... }
   
           gadgets.util.registerOnLoadHandler(
             function() {
               if (gadgets.actions) {
                 gadgets.actions.updateAction({
                   id: "org.samplervoip.navLink",
                   callback: navLink
                 });
               }
             }
           );
         </script>
       ]]></Content>
     </Module>

   Contributing actions to specific OpenSocial data types is similar.
   Rather than specifying the location to which the action is to be
   added, the <action> element specifies the data type.  In either case,
   a callback function provided by the application is registered and
   invoked to handle the action:







(surname)               Expires October 31, 2012              [Page 121]

Internet-Draft                Core-Gadget                       May 2012


     <Module>
       <ModulePrefs title="Sample VOIP">
         <Require feature="actions">
           <Param name="action-contributions"><![CDATA[
             <action id="org.samplevoip.callbyperson"
               dataObject="opensocial.Person"
               label="Call using VOIP Phone" />
           ]]></Param>
         </Require>
       </ModulePrefs>
       <Content type="html"><![CDATA[
         <script>
   
           function dial(selection) { ... }
   
           gadgets.util.registerOnLoadHandler(
             function() {
               if (gadgets.actions) {
                 gadgets.actions.updateAction({
                   id: "org.samplevoip.callbyperson",
                   callback: dial
                 });
               }
             }
           );
         </script>
       ]]></Content>
     </Module>

   Actions can also be contributed programmatically by calling the
   "gadgets.actions.addAction" API and passing in an "action" object.
   For instance:

     var mycallback = function(){
       ...
     };
   
     var myaction = {
       id: "com.acme.mycallaction",
       tooltip: "My Action Tooltip",
       label: "Call Person",
       icon: "images/myicon.png",
       callback: mycallback,
       dataType: "opensocial.Person"
     }
   
     gadgets.actions.addAction(myaction);







(surname)               Expires October 31, 2012              [Page 122]

Internet-Draft                Core-Gadget                       May 2012


   In some simple cases, an action provided by an application might
   simply be handled by navigating to an IRI. It such cases, a callback
   function is not required and the application developer can simply
   provide the IRI in the action declaration.  For instance, in the
   example below, the container will display the provided IRI in a new
   tab when the "Contact US" navigation action is selected:

   <Module>
     <ModulePrefs title="Sample VOIP">
       <Require feature="actions">
         <Param name="action-contributions"><![CDATA[
           <action id="org.example.goSomewhere"
             path="container/navigationLinks"
             label="Contact Us!"
             url="http://www.example.org/contact"
             viewTarget="TAB" />
         ]]></Param>
       </Require>
     </ModulePrefs>
     ...
   </Module>

   If a "viewTarget" is not specified, the container will select an
   appropriate default view target.

   When registering actions, application developers need only provide
   basic information about the action such as an identifier, text label,
   icon and callback function.  Containers are responsible for
   determining how contributed actions are to be rendered.

4.2.1.1.  The <action> Element

   The <action> element, as illustrated in the previous examples, is
   used within the value of <Param name="action-contributions"> elements
   to declaratively define the actions provided by an application.  The
   "action-contributions" parameter value can have any number of
   <action> elements, each of which MUST specify a unique "id"
   attribute.  Each actions ID SHOULD be unique within the scope of the
   container -- that is, if multiple application's are rendered by the
   container, all of the actions contributed by each of the applications
   SHOULD specify different IDs.  If multiple actions are registered
   that share the same ID, each will be registered and both will be
   invoked by the container when either of the two actions is triggered.

   There is no XML namespace defined for the <action> element.









(surname)               Expires October 31, 2012              [Page 123]

Internet-Draft                Core-Gadget                       May 2012


     BaseAction = {
       attribute id { text },
       attribute label { text },
       attribute tooltip { text }?,
       attribute icon { IRI }?,
       attribute iconSize { text }?,
       attribute iconOffset { text }?,
       attribute view { text }?,
       attribute viewTarget { "TAB" | "DIALOG" | "MODALDIALOG" | "FLOAT" | "SIDEBAR" }?,
       attribute url { IRI }?,
       undefinedAttribute*
     }
   
     PathAction = element action {
       BaseAction,
       attribute path { text }
     }
   
     TypeAction = element action {
       BaseAction,
       attribute type { text }
     }
   
     action = PathAction | TypeAction

   The <action> element MUST contain the "id" and "label" attributes and
   either the "path" or "type" attributes.  The "label" specifies the
   plain-text label that a container SHOULD display when rendering the
   action.  The "path" attribute specifies a location with the
   container's user interface where the action is to be rendered.
   Possible values for the "path" attribute are discussed below.  The
   "type" attribute specifies the OpenSocial data type for which an
   action is to be associated.  The value MUST be a valid OpenSocial
   Data Type as specified by [core-api].

   The following additional attributes MAY be specified:

   tooltip Additional text that provides additional information about
      the action.  Such text is typically displayed when the user hovers
      their mouse cursor over the action item.

   icon An IRI to an image resource that the container can display when
      rendering the action item.  For instance, when rendering the
      action as a menu item, the contain can display the icon next to
      the label.  If a relative path is provided, it MUST be resolved
      relative to the URL of the specification document.

   iconSize TODO: Need more info

   iconOffset TODO: Need more info

   view The name of the application view the container SHOULD render
      when the action is invoked.

(surname)               Expires October 31, 2012              [Page 124]

Internet-Draft                Core-Gadget                       May 2012


   viewTarget Specifies where the specified view is to be rendered.
      Different container implementations MAY support the ability for
      individual application views to be displayed outside the main area
      allocated to the application by the container.  Examples include
      rendering within a modal dialog box, or within a "sidebar" area
      provided by the container.  Acceptable values for the viewTarget
      attribute are "TAB", "DIALOG", "MODALDIALOG", "FLOAT" and
      "SIDEBAR".  If not specified, the view will be rendered within the
      area already allocated to the application.

   url An IRI to use in place of a callback function.  When used, the
      container will display the content of the URL when the action is
      selected rather than invoking a JavaScript callback to handle the
      action.

4.2.1.2.  Action Contribution Paths

   When an application contributes actions to the container's user
   interface, the intended location where the action is to be rendered
   is specified using a "path".  The collection of available paths for
   which actions can be contributed is specific to each individual
   container implementation.  Some containers might not support user
   interface action contributions at all.

   The following common paths MAY be supported by a container:

   "container/navigationLinks" Identifies the area provided by the
      container for "top-level navigation".  These are typically links
      or menu items that provide users with an overall ability to
      navigate through the various available services provided by an
      application.

   "container/menus> Identifies the area provided by the container for
      menu options.  These are typically hierarchically nested actions
      that provide access to a variety of options and tools currently
      available to the user.

   "container/toolbars" Identifies the area provided by the container
      for toolbars.  These are typically shortcuts to commonly used
      options or tools currently available to the user.

   "gadget/menu" Identifies an "options" menu that a container might
      provide for a application instance.  Typically, such menus provide
      options and tools associated with a specific application instance.

   Contribution paths are hierarchical and container specific.  For
   instance, if a container supports a top level menu system such as
   those typically found in many traditional desktop applications, an
   application might use path="container/menu/File" to add items to the
   containers "File" menu.  The depth of the path hierarchy is entirely
   determined by the container.  Each segment of the path is separated
   by the forward slash (/) character.


(surname)               Expires October 31, 2012              [Page 125]

Internet-Draft                Core-Gadget                       May 2012


4.2.1.3.  JavaScript API

   Gadget developers who contribute actions to the container use the
   "gadgets.actions" JavaScript API to work with contributed actions.

   The API is used, for instance, to register callback functions to
   handle actions, register or modify actions programmatically, or work
   with contributions provided by other specification documents.

4.2.1.3.1.  The Action Object

   The "Action" object is a JavaScript representation of a contribution
   action.  The properties available on the object correlate to each of
   the attributes on the <action> element.  An additional "callback"
   property is provided that specifies the callback function the
   container will invoke when the action is selected.

   +---------------+---------------------------------------------------+
   | Attribute     | Description                                       |
   +---------------+---------------------------------------------------+
   | id            | The action identifier.                            |
   | label         | Text string to display for this action            |
   | path          | The container-defined location for this action,   |
   |               | as described in Action Paths [3].  Example:       |
   |               | path=container/menus/Edit                         |
   | dataType      | The Open Social Data type with which to associate |
   |               | this action. Example: opensocial.Person           |
   | tooltip       | Tooltip to display on hovering over an icon       |
   | icon          | Path to image icon.                               |
   | iconSize      | TODO: need more info                              |
   | iconOffset    | TODO: need more info                              |
   | view          | The view ID the application should navigate to    |
   |               | when the action is invoked.                       |
   | viewTarget    | The target area to render the view.               |
   | url           | Simple actions that are just links can specify a  |
   |               | url instead of a callback function.               |
   +---------------+---------------------------------------------------+

   As is the case with the <action> element, the "id" and "label"
   properties are both required and values for either the "path" or
   "type" MUST be provided.  All other properties are optional.

4.2.1.3.2.  gadgets.actions.addAction

   Programmatically registers an action with the container.  Note that
   if multiple actions are registered using the same identifier, each
   will be registered separately by the container and both will be
   invoked when either action is run.

   <static> gadgets.actions.addAction(action)

   Input Parameters:


(surname)               Expires October 31, 2012              [Page 126]

Internet-Draft                Core-Gadget                       May 2012


   +----------+--------------------------+-----------------------------+
   | Name     | Type                     | Description                 |
   +----------+--------------------------+-----------------------------+
   | action   | Action Object (Section   | The action to be added to   |
   |          | 4.2.1.3.1)               | the container               |
   +----------+--------------------------+-----------------------------+

   For example:

     var mycallback = function(){
       ...
     };
   
     var myaction = {
       id: "com.acme.mycallaction",
       tooltip: "My Action Tooltip",
       label: "Call Person",
       icon: "images/myicon.png",
       callback: mycallback,
       dataType: "opensocial.Person"
     }
   
     gadgets.actions.addAction(myaction);

4.2.1.3.3.  gadgets.actions.updateAction

   Modifies the specified action contributed to the container.  Note
   that Applications are only permitted to modify it's own contributed
   actions.

   <static> gadgets.actions.updateAction(action)

   Input Parameters:

   +-----------+--------------------+----------------------------------+
   | Name      | Type               | Description                      |
   +-----------+--------------------+----------------------------------+
   | action    | Action Object      | A partial representation of the  |
   |           | (Section           | action to be updated within the  |
   |           | 4.2.1.3.1)         | container                        |
   +-----------+--------------------+----------------------------------+

   The Action object passed in to the "gadgets.actions.updateAction"
   method can be a partial representation of the action that contains
   the "id" of the action being modified and only the properties that
   need to be updated.

   For instance, to specify the callback function for an action
   contributed using the <action> element, a developer would invoke
   "gadgets.actions.updateAction" with an object that specifies only the
   "id" and "callback" properties:



(surname)               Expires October 31, 2012              [Page 127]

Internet-Draft                Core-Gadget                       May 2012


     var mycallback = function(){
       ...
     };
   
     var myaction = {
       id: "com.acme.mycallaction",
       callback: mycallback
     }
   
     gadgets.actions.updateAction(myaction);

4.2.1.3.4.  gadgets.actions.removeAction

   Removes the specified action from the container.  Note that an
   Application is only permitted to remove it's own contributed actions.

   <static> gadgets.actions.removeAction

   Input Parameters:

   +------+--------+-------------------------------------+
   | Name | Type   | Description                         |
   +------+--------+-------------------------------------+
   | id   | String | The ID of the action to be removed. |
   +------+--------+-------------------------------------+

   For example,

   gadgets.actions.removeAction("com.acme.mycallaction");

4.2.1.3.5.  gadgets.actions.getActionsByPath

   Retrieves the collection of all actions registered at the specified
   path and passes the result to the provided callback function as a
   JavaScript Array.  Note that paths are not considered to be
   hierarchical.  Passing in a path value of "container/navigationLinks"
   MUST NOT return any actions contributed to any path that can be
   considered subordinate to "container/navigationLinks" (e.g.
   "container/navigationLinks/File").

   <static> gadgets.actions.getActionsByPath(path, callback)

   Input Parameters:

   +--------------+-------------+--------------------------------------+
   | Name         | Type        | Description                          |
   +--------------+-------------+--------------------------------------+
   | path         | String      | The String representation of the     |
   |              |             | path to the actions                  |
   | callback     | Function    | A callback function to handle the    |
   |              |             | returned actions array               |
   +--------------+-------------+--------------------------------------+


(surname)               Expires October 31, 2012              [Page 128]

Internet-Draft                Core-Gadget                       May 2012


   For example,

     function listActions(actions) { ... }
   
     gadgets.actions.getActionsByPath("container/navigationLinks", callback);

4.2.1.3.6.  gadgets.actions.getActionsByDataType

   Retrieves the collection of all actions registered for the specified
   data type and passes the result to the provided callback function a
   JavaScript Array.

   <static> gadgets.actions.getActionsByDataType(dataType, callback)

   Input Parameters:

   +--------------+-------------+--------------------------------------+
   | Name         | Type        | Description                          |
   +--------------+-------------+--------------------------------------+
   | dataType     | String      | The String representation of the     |
   |              |             | associated data type                 |
   | callback     | Function    | A callback function to handle the    |
   |              |             | returned actions array               |
   +--------------+-------------+--------------------------------------+

   For example,

     function listActions(actions) { ... }
   
     gadgets.actions.getActionsByType("opensocial.Person", callback);

4.2.1.3.7.  gadgets.actions.runAction

   Invokes the specified actions callback function; or, if the "url"
   property is specified in place of a callback, causes the container to
   navigate to the specified IRI. Gadget's can use this method to
   programmatically invoke an action.

   <static> gadgets.actions.runAction (id, opt_selection)

   Input Parameters:

   +-----------------+-----------------+-------------------------------+
   | Name            | Type            | Description                   |
   +-----------------+-----------------+-------------------------------+
   | id              | String          | The ID of the action to       |
   |                 |                 | execute.                      |
   | opt_selection   | Selection       | An optional object that       |
   |                 | Object (Section | identifies the currently      |
   |                 | 4.2.13)         | selected object as defined by |
   |                 |                 | Section 4.2.13.               |
   +-----------------+-----------------+-------------------------------+


(surname)               Expires October 31, 2012              [Page 129]

Internet-Draft                Core-Gadget                       May 2012


   For example,

   gadgets.actions.runAction("com.acme.mycallaction");

   Note that when an action is invoked, all registered actions with the
   specified identifier will be invoked.  If there are multiple actions
   that use the same identifier value, each will be invoked, typically
   in the order in which they were registered with the container.  This
   fact can cause a potential security and privacy risk in that it
   allows a potentially malicious application to snoop on actions
   originally directed at another application.  Because of this, care
   needs to be taken to avoid using the "gadgets.actions.runAction" API
   to pass potentially secure or private data to an application.

   Also note that any action added to the container can be run by any
   Application, not only the Application that contributed the action.

4.2.1.3.8.  gadgets.actions.registerShowActionsListener

   Registers a callback function that the container will call whenever
   new actions are added to the container.  An application can use this
   listener to provide a rendering of any action contributed to the
   container by any other application.

   <static> gadgets.actions.registerShowActionsListener (listener)

   Input Parameters:

   +------------+-----------+------------------------------------------+
   | Name       | Type      | Description                              |
   +------------+-----------+------------------------------------------+
   | listener   | Function  | The application's function to render     |
   |            |           | actions in its UI. The function will be  |
   |            |           | invoked with one parameter which is an   |
   |            |           | array of action objects to render.       |
   +------------+-----------+------------------------------------------+

   For Example:

   var listener = function(actionObjs){
        // draw the UI, toolbars menus, etc
        // to do the invocation of the action, call the following API:
        // gadgets.actions.runAction(actionObjs[0].id);
   }
   gadgets.actions.registerShowActionsListener(listener);

4.2.1.3.9.  gadgets.actions.registerHideActionsListener

   Registers a callback function that the container will call whenever
   the an application that contributes actions is removed from the
   container.

   <static> gadgets.actions.registerHideActionsListener (listener)

(surname)               Expires October 31, 2012              [Page 130]

Internet-Draft                Core-Gadget                       May 2012


   Input Parameters:

   +------------+-----------+------------------------------------------+
   | Name       | Type      | Description                              |
   +------------+-----------+------------------------------------------+
   | listener   | Function  | The application's function to render     |
   |            |           | actions in its UI. The function will be  |
   |            |           | invoked with one parameter which is an   |
   |            |           | array of action objects to hide.         |
   +------------+-----------+------------------------------------------+

   For Example:

   var listener = function(actionObjs){
        // remove the UI elements associated with the listed actions
   }
   gadgets.actions.registerHideActionsListener(listener);

4.2.2.  The Content Rewriting Feature

   In many cases, when a container renders the content provided by an
   Application Specification, it might wish to make a number of specific
   modifications to the content intended, in part, to improve overall
   performance.  Examples of such modifications can include changing the
   URLs of external resources used by the Application such that those
   resources may possibly be cache and retrieved from a Content
   Distribution Network (cdn); or optimizing CSS stylesheets and
   JavaScript code defined by the Specificaiton document.

   The Content Rewriting Feature allows an Application developer the
   ability to control which types of modifications the container is
   permitted to make within the content provided by the application.

   The Content Rewriting Feature is specified within the <ModulePrefs>
   with the feature name "content-rewrite" using either the <Optional>
   or <Require> element.  Multiple <Param> elements are used to specify
   specific configuration options for the feature.  Containers MAY
   support the Content Rewriting Feature.

   For example:

   <Optional feature="content-rewrite">
       <Param name="expires">86400</Param>
       <Param name="include-url"></Param>
       <Param name="exclude-url">excluded</Param>
       <Param name="exclude-url">moreexcluded</Param>
       <Param name="minify-css">true</Param>
       <Param name="minify-js">true</Param>
       <Param name="minify-html">true</Param>
   </Optional>

   The parameters supported by the "content-rewrite" feature are:


(surname)               Expires October 31, 2012              [Page 131]

Internet-Draft                Core-Gadget                       May 2012


   +-------------+----------+------------------------------------------+
   | Name        | Value    | Description                              |
   +-------------+----------+------------------------------------------+
   | expires     | Integer  | The duration in seconds to force as      |
   |             |          | maximum HTTP cache time for content      |
   |             |          | cached by the container via a rewritten  |
   |             |          | URL. The default is 86400 seconds. Note  |
   |             |          | that a container MUST NOT cache a        |
   |             |          | resource for long that the time          |
   |             |          | specified by standard Cache-Control      |
   |             |          | mechanisms included in the HTTP Response |
   |             |          | returned when the original content is    |
   |             |          | fetched from the remote location.        |
   | include-url | String   | Any URL which contains this parameters   |
   |             |          | value as a case-insensitive substring is |
   |             |          | considered rewriteable. That is, the     |
   |             |          | container MAY choose to redirect         |
   |             |          | fetching of the URLs target resource via |
   |             |          | a container selected alternative URL or  |
   |             |          | MAY choose to apply various optimization |
   |             |          | algorithms on the fetched                |
   |             |          | respresentation of the resource. For     |
   |             |          | instance, if the resource returns        |
   |             |          | JavaScript code and the "minify-js"      |
   |             |          | parameter is true, the container MAY     |
   |             |          | choose to optimize the provided          |
   |             |          | JavaScript code in some way. The literal |
   |             |          | string "*" is a special case and implies |
   |             |          | all URLs. If not specified an entry with |
   |             |          | the value "*" is assumed. This parameter |
   |             |          | MAY appear multiple times within the     |
   |             |          | <Optional> or <Require< tags.            |
   | exclude-url | String   | Any URL which contains this parameters   |
   |             |          | value as a case-insensitive substring is |
   |             |          | excluded from rewriting. The literal     |
   |             |          | string "*" implies all URLs and          |
   |             |          | effectively disables all rewriting. This |
   |             |          | parameter MAY appear multiple times      |
   |             |          | within the <Optional> or <Require< tags. |
   | minify-css  | Boolean  | Specifies whether the container can      |
   |             |          | attempt to optimize CSS in style tags    |
   |             |          | and referenced CSS resources that have   |
   |             |          | not been explicitly excluded from        |
   |             |          | rewriting using the "exclude-url"        |
   |             |          | parameter. Valid values are "true" or    |
   |             |          | "false". Default is "true"               |
   | minify-js   | Boolean  | Specifies whether the container can      |
   |             |          | attempt to optimize JavaScript contained |
   |             |          | in Script tags or in referenced          |
   |             |          | JavaScript resources that have not been  |
   |             |          | explicitly excluded from rewriting using |
   |             |          | the "exclude-url" parameter. Valid       |
   |             |          | values are "true" or "false". Default is |

(surname)               Expires October 31, 2012              [Page 132]

Internet-Draft                Core-Gadget                       May 2012

   |             |          | "true"                                   |
   | minify-html | Boolean  | Specifies whether the container can      |
   |             |          | attempt to optimize HTML provided        |
   |             |          | directly by the Application or in        |
   |             |          | referenced resources that have not been  |
   |             |          | explicitly excluded from rewriting using |
   |             |          | the "exclude-url" parameter. Valid       |
   |             |          | values are "true" or "false". Default is |
   |             |          | "true"                                   |
   +-------------+----------+------------------------------------------+

   When values for both the "exclude-url" and "include-url" are
   specified, Matches for "exclude-url" take precedence over matches for
   "include-url".

   Note that the special use of "*" to denote all URLs should not be
   interpreted as support for GLOB or RegEx matching on strings.

   For any resource that is not explicitly excluded from rewriting using
   the "exclude-url" parameter, containers are free to perform
   additional optimizations when rewriting links including but not
   limited to:

   o  Extracting @import directives from style tags and converting them
      into link tags in the head tag of the containing HTML content.

   o  Merging multiple CSS fetches from successive link tags into one
      link tag that causes the proxy to concatenate the content fetched
      from the individual URLs.

   o  Merging contiguous <script src=xxx> tags into one concatenating
      proxy fetch.

   Implementations are free to support additional content-rewite
   parameters.  The definition of such parameters, however, is out of
   scope of this specification.

4.2.3.  The DataContext Feature

   The Data Context Feature allows an application utilizing the Data
   Pipeline (Section 3.6) capability provided by the container to access
   the "DataContext" associated with the application instance.

   The DataContext feature is enabled for a application by specifying
   feature="opensocial.data" using either a <Requires> or <Optional>
   element within the <ModulePrefs>.

   If the container supports the Data Pipeline capability, the
   DataContext Feature MUST be supported by the container.

   For example:




(surname)               Expires October 31, 2012              [Page 133]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
       <Require feature="opensocial.data" />
       ...
     </ModulePrefs>
     ...
   </Module>

   The "DataContext" object is only available to JavaScript code running
   within either HTML or Proxy-type <Content> elements.

   The "DataContext" object will not contain any of the pipelined data
   POSTed to a remote endpoint when using Proxy-type Content as
   described in Section 3.6.4.

4.2.3.1.  JavaScript API

   When enabled for an application instance, the DataContext Feature
   makes the following methods and objects available for use.

4.2.3.1.1.  opensocial.data.getContext

   The "opensocial.data.getContext" method returns the "DataContext"
   object associated with the application instance.

   <static> <DataContext> opensocial.data.getContext()

4.2.3.1.2.  The DataContext Object

   The DataContect object maintains all the data associated with the
   current application's data pipelining requests.  Instances of the
   object are acquired by calling the "opensocial.data.getContext"
   method.

   Instances of the DataContext object expose the following method:

4.2.3.1.2.1.  opensocial.data.DataContext.getDataSet

   The "opensocial.data.DataContext.getDataSet" method returns the
   object data currently mapped to the specified key or null if a value
   for the specified key does not exist.

   <Object> <instance>.getDataSet(key)

4.2.3.1.2.2.  opensocial.data.DataContext.putDataSet

   The "opensocial.data.DataContext.putDataSet" method allows data to be
   stored into the DataContext programmatically as an alternative to
   using the Data Pipeline elements.

   <Void> <instance>.putDataSet(key, value)


(surname)               Expires October 31, 2012              [Page 134]

Internet-Draft                Core-Gadget                       May 2012


   The method takes as input a key and value pair to store within the
   DataContext.  The value can be any JavaScript object or primitive.
   No return value is specified.

4.2.3.1.2.3.  opensocial.data.DataContext.putDataSets

   The "opensocial.data.DataContext.putDataSet" method allows multiple
   key and value pairs to be stored within the DataContext at once.

   <Void> <instance>.putDataSets(dataSets)

   The key and value pairs are specified as properties on a JavaScript
   object.

   For instance, to store the two keys "foo" and "bar" with respective
   values of "123" and "abc", the putDataSets method would be called as:

   var dataContext = opensocial.data.getContext();
   dataContext.putDataSets(
     {
       "foo":"123",
       "bar":"abc"
     });

   No return value is specified for the method.

4.2.3.1.2.4.  opensocial.data.DataContext.registerListener

   The "opensocial.data.DataContext.registerListener" method registers a
   callback Function that is invoked whenever the value associated with
   one or more specified keys is modified in the DataContext, either
   through processing of the Data Pipeline elements or calls to either
   of the "opensocial.data.DataContext.putDataSet" and
   "opensocial.data.DataContext.putDataSets" methods.

   <Void> <instance>.registerListener(key, callback)

   The method takes as input either a single key or Array of keys for
   which the callback Function is to be registered and a single callback
   Function.

   When the value of any of the specified keys changes, the DataContext
   will invoke all registered callback functions registered for the
   modified keys and pass in a single listing of the key names whose
   values have been modified.

   For example:







(surname)               Expires October 31, 2012              [Page 135]

Internet-Draft                Core-Gadget                       May 2012


   var dataContext = opensocial.data.getContext();
   dataContext.registerListener(
     ["foo","bar"],
     function(keys) {
       for (var n = 0; n < keys.length; n++) {
         var new_value = dataContext.getDataSet(keys[n]);
         // ...
       }
     }
   );

4.2.4.  The Embedded Experiences Feature

   Embedded experiences provide a mechanism for embedding OpenSocial
   Applications and other web-accessible content sources directly into a
   variety of contexts such as Activity Streams, email messages and Atom
   feeds.  The mechanism works by inserting a small structure of data
   that includes a reference to the embedded content along with
   contextual data an OpenSocial container would need to render the
   content appropriately.

   This data structure can be serialized as either a JSON object or XML
   and includes the following properties:































(surname)               Expires October 31, 2012              [Page 136]

Internet-Draft                Core-Gadget                       May 2012


   +-----------------------+-------------------------------------------+
   | Property              | Description                               |
   +-----------------------+-------------------------------------------+
   | "context"             | If the Embedded Experience is used to     |
   |                       | embed an OpenSocial Application, the      |
   |                       | "context" field is used to pass data to   |
   |                       | the application so that it knows exactly  |
   |                       | which content to render. For instance, an |
   |                       | application that displays a person's      |
   |                       | profile information will need to know     |
   |                       | which profile to display; an application  |
   |                       | that displays an album of recent photos   |
   |                       | will need to know the identity of the     |
   |                       | album to display. The content of the      |
   |                       | "context" field is undefined and specific |
   |                       | to each individual application definition |
   |                       | with one exception: the special property  |
   |                       | name "opensocial" is reserved for use by  |
   |                       | the container implementation.  The        |
   |                       | "context" properties JSON object value or |
   |                       | XML element structure MUST NOT contain a  |
   |                       | property named "opensocial".              |
   | "gadget"              | An absolutely IRI to an OpenSocial        |
   |                       | Application specification document that   |
   |                       | defines the application to be embedded.   |
   | "imageData"           | An optional string value that containing  |
   |                       | Base64-encoded binary data for an image   |
   |                       | resource that represents the embedded     |
   |                       | content. This can be the same image       |
   |                       | resource linked to by the previewImage    |
   |                       | property or a separate image. An embedded |
   |                       | experience SHOULD NOT contain both the    |
   |                       | imageData and previewImage properties.    |
   | "preferredExperience" | An optional collection of properties that |
   |                       | describe the preferred way the creator of |
   |                       | the embedded experience would like        |
   |                       | containers to render the content.         |
   | "previewImage"        | An optional absolute IRI of an image that |
   |                       | can be used as a preview for the embedded |
   |                       | content.                                  |
   | "url"                 | An absolutely IRI of a web page to be     |
   |                       | used as an Embedded Experience.           |
   +-----------------------+-------------------------------------------+

   The "url" and "gadget" properties each reference content that is to
   be embedded.  At least one of these properties MUST be specified.
   When both properties are used within the Embedded Experience, the
   decision about which to render is left to the container.

   When serialized as JSON, the embedded experience take the form of a
   single JSON Object with four distinct properties: "context",
   "gadget", "previewImage" and "url".  Additional extension properties
   MAY be included in the JSON object.

(surname)               Expires October 31, 2012              [Page 137]

Internet-Draft                Core-Gadget                       May 2012


   For instance, a simple JSON Embedded Experience that references an
   OpenSocial Application:

    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png"
    }

   When serialized as XML, it is expressed in the form of a root element
   <embed> containing four child elements, the order of which is
   considered insignificant: <context>, <gadget>, <previewImage>, and
   <url>. Additional extension elements and attributes MAY be included
   in the JSON object.

   For example,

    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
    </embed>

   Note that no XML namespace is currently declared for the XML
   serialization.  This means that special care must be taken when
   including an XML embedded experience into another type of XML
   document.  For example, the following shows an XML embedded
   experience within a partial Atom Entry Document.  Note the addition
   of "xmlns=""" on the embed element in order to "undeclare" the in-
   scope default XML namespace.

    <entry xmlns="http://www.w3.org/2005/Atom">
      <id>http://example.org/entries/1</id>
      ...
      <embed xmlns="">
        <gadget>http://www.example.com/embedded/gadget.xml</gadget>
        <context>
          <title>Hello World</title>
          <id>123</id>
        </context>
        <previewImage>http://www.example.com/embedded/123.png</previewImage>
      </embed>
    </entry>

4.2.4.1.  Additional Examples

   A simple URL embedded experience using the JSON serialization:

(surname)               Expires October 31, 2012              [Page 138]

Internet-Draft                Core-Gadget                       May 2012


    {
      "url" : "http://www.example.org/embed/123.html"
    }

   The same URL embedded experience using the XML serialization:

    <embed>
      <url>http://www.example.org/embed/123.html</url>
    </embed>

   An embedded experience that specifies both a gadget and URL
   serialized as JSON:

    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "url" : "http://www.example.org/embed/123.html",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png"
    }

   The same embedded experience serialized as XML:

    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <url>http://www.example.org/embed/123.html</url>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
    </embed>

4.2.4.2.  Considerations for Embedded Gadgets

4.2.4.2.1.  The "embedded" View

   When rendering an application as an embedded experience, the
   container will look within the specification document for a view
   named "embedded".  Gadget developers can use this view to specify a
   customized view of the application that is specific to the embedded
   experience.  If an "embedded" view is not found within the
   specification document, the contain SHOULD render the application's
   default unnamed view.

4.2.4.2.2.  Accessing The Context






(surname)               Expires October 31, 2012              [Page 139]

Internet-Draft                Core-Gadget                       May 2012


   An embedded experience application has the option of requiring some
   contextual information in order to render itself.  By abstracting the
   data from the application itself, developers can develop generalized
   applications that can be used for all embedded experiences of a
   specific type.  For example, an application developed to display
   videos can be built so that the id of the video is contained and
   extracted from the embedded experience's "context" property.

    {
      "gadget" : "http://example.org/embedded/video.xml",
      "context" : {
        "video-id" : "abc123"
      }
    }

   Gadgets that are written to support embedded experiences MUST require
   the "embedded-experiences" feature within their specification
   document in order to access the context.  The contextual data is
   stored within the data context (Section 3.6.1) object for the
   application.  The key, "org.opensocial.ee.context", is used to access
   the context.  Gadgets can add a listener on the data context object
   for this key, or it may retreive the key's value by using the data
   context APIs.

   For instance, the Gadget below registers a listener with the data
   context to retrieve any context data included with the embedded
   experience:

    <Module>
      <ModulePrefs title="Embedded Experiences Test" description="Tests the embedded experiences APIs.">
        <Require feature="embedded-experiences"></Require>
      </ModulePrefs>
      <Content type="html" view="embedded">
          <![CDATA[
            <script type="text/javascript">
              function myCallback(key) {
                var context = opensocial.data.getDataContext().getDataSet(key);
                var video_id = context["video-id"];
              }
              function initData() {
                opensocial.data.getDataContext().registerListener(
                  "org.opensocial.ee.context", myCallback);
              }
              gadgets.util.registerOnLoadHandler(initData);
          </script>
           <div id="contextData"></div>
      ]]>
      </Content>
    </Module>

4.2.4.2.2.1.  Additional Container Specific Context



(surname)               Expires October 31, 2012              [Page 140]

Internet-Draft                Core-Gadget                       May 2012


   While the contextual data associated with the
   "org.opensocial.ee.context" key will generally originate from the
   information provided by the "context" property within the Embedded
   Experience document, containers are free to insert additional,
   container specific contexual data into the object.  For example, a
   container might wish to communicate information about the type of
   parent object within which the Embedded Experience information was
   received.

   If such additional information is provided, the object associated
   with the "org.opensocial.ee.context" key will have an additional
   "opensocial" property, whose value is itself a object with at least
   one property named "associatedContext" whose value is an object whose
   properties are entirely defined by the specific container
   implementation.

   The following example illustrates how this additional context
   information is accessed:

       function myCallback(key) {
         var context = opensocial.data.getDataContext().getDataSet(key);
         var video_id = context["video-id"];
   
         var associatedContext = context.opensocial.associatedContext;
         // the properties are container specific
         var ac_id = associatedContext.id;
         var ac_type = associatedContext.type;
         // ...
       }
       function initData() {
         opensocial.data.getDataContext().registerListener(
           "org.opensocial.ee.context", myCallback);
       }
       gadgets.util.registerOnLoadHandler(initData);

   Specific container implementations are free to insert any additional
   information they wish into both the "associatedContext" and
   "opensocial" object values.  The interpretation and use of any such
   information is considered out of the scope of this specification.

4.2.4.3.  Preferred Experiences

   While the container retains control over deciding exactly how an
   embedded experience is processed and rendered, there are situations
   where the creator of the embedded experience might wish to provide
   clues to the container as to how it would prefer the content to be
   displayed.  These clues are included within the Embedded Experience
   using the "preferredExperience" property.

   The following illustrates a basic example serialized as JSON:




(surname)               Expires October 31, 2012              [Page 141]

Internet-Draft                Core-Gadget                       May 2012


    {
      "gadget" : "http://www.example.com/embedded/gadget.xml",
      "url" : "http://www.example.com/foo/bar.html",
      "context" : {
        "title" : "Hello World",
        "id" : 123
      },
      "previewImage" : "http://www.example.com/embedded/123.png",
      "preferredExperience" : {
        "target" : {
          "type" : "gadget",
          "view" : "my-ee-view"
        },
        "display" : {
          "type" : "link"
        }
    }

   And the same example using the alternative XML serialization:

    <embed>
      <gadget>http://www.example.com/embedded/gadget.xml</gadget>
      <url>http://www.example.com/foo/bar.html</url>
      <context>
        <title>Hello World</title>
        <id>123</id>
      </context>
      <previewImage>http://www.example.com/embedded/123.png</previewImage>
      <preferredExperience>
        <target>
          <type>gadget</type>
          <view>my-ee-view</view>
        </target>
        <display>
          <type>link</type>
        </display>
      </preferredExperience>
    </embed>

   In this example, we have an embedded experience serialized as JSON.
   The structure defines both a "url" and a "gadget" property, both of w
   which can be used by the container to display embedded content.
   Typically, the decision of which to display when the embedded
   experience is rendered is up to the container.  The
   "preferredExperience.target" property allows the creator of the
   embedded experience to indicate that it would prefer the container to
   use the "gadget" property for rendering, and specifically that the
   "my-ee-view" view within that application be used.  The
   "preferredExperience.display" property indicates that rather than
   simply displaying the application automatically, the embedded
   experience's creator would rather the container initially display a
   hyperlink that, when clicked, causes the application to be displayed.


(surname)               Expires October 31, 2012              [Page 142]

Internet-Draft                Core-Gadget                       May 2012


   +-----------+-------------------------------------------------------+
   | Property  | Description                                           |
   +-----------+-------------------------------------------------------+
   | "display" | Describes preferences for how the embedded experience |
   |           | should initially be displayed by the container. The   |
   |           | value of the "display" property is an object that     |
   |           | contains a required "type" property, the value of     |
   |           | which determines what other properties might appear   |
   |           | within the object.                                    |
   | "target"  | Describes preferences for which type of embedded      |
   |           | experience the container should render. For instance, |
   |           | if the embed includes both a "url" and "gadget"       |
   |           | property, the "target" is used to specify which is    |
   |           | preferred. The value of the "target" property is an   |
   |           | object that contains a required "type" property, the  |
   |           | value of which determines what other properties might |
   |           | appear within the object.                             |
   +-----------+-------------------------------------------------------+

4.2.4.3.1.  Display Types

   This specification currently defines two possible values for the
   required "type" property on the display object: "link", "image".
   Each of which are illustrated below.

   Display using a hyperlink:

    {
      "gadget" : "...",
      ...,
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "link",
          "text" : "Click on me!",
          "title" : "Click on this link!"
        }
      }
    }

   When "type" equals "link", the additional properties on the display
   object are:

   +---------------+---------------------------------------------------+
   | Property      | Description                                       |
   +---------------+---------------------------------------------------+
   | "text"        | A required String that provides the text to       |
   |               | display with the hyperlink.                       |
   | "title"       | Optional text to display as the "popup help" or   |
   |               | "tooltip" of the hyperlink.                       |
   +---------------+---------------------------------------------------+

   Display using the previewImage:

(surname)               Expires October 31, 2012              [Page 143]

Internet-Draft                Core-Gadget                       May 2012


    {
      "gadget" : "...",
      ...,
      "previewImage" : "http://example.org/preview.png",
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "image",
          "altText" : "The alt text",
          "width" : 100,
          "height" : 100
        }
      }
    }

   Display using contained Base64-encoded binary data:

    {
      "gadget" : "...",
      ...,
      "imageData" : "{Base64-encoded Image}",
      "preferredExperience" : {
        "target": {...},
        "display": {
          "type" : "image",
          "altText" : "The alt text",
          "width" : 100,
          "height" : 100
        }
      }
    }

   When "type" equals "image", the additional properties on the display
   object are:

   +-------------+-----------------------------------------------------+
   | Property    | Description                                         |
   +-------------+-----------------------------------------------------+
   | "altText"   | Specifies optional, alternative text to display if  |
   |             | the image cannot be displayed. Equivalent to the    |
   |             | HTML image tags alt attribute.                      |
   | "height"    | Specifies the preferred display height of the image |
   |             | in pixels.                                          |
   | "width"     | Specifies the preferred display width of the image  |
   |             | in pixels.                                          |
   +-------------+-----------------------------------------------------+

   Implementations are free to define additional display types, each
   with their own properties.  If a container encounters an embedded
   experience that uses an unknown or unsupported display type, the
   container MUST ignore the display preferences.

4.2.4.3.2.  Target Types

(surname)               Expires October 31, 2012              [Page 144]

Internet-Draft                Core-Gadget                       May 2012


   This specification currently defines two possible values for the type
   property on the target object: "gadget" and "url".  Each of which are
   illustrated below.

   Preferring the gadget target:

    {
      "gadget" : "...",
      "url" : "...",
      ...,
      "preferredExperience" : {
        "target": {
          "type" : "gadget",
          "view" : "my-ee-view"
        },
        "display": {
          ...
        }
      }
    }

   Note that the preferred experience target's "type" property is only
   required if the preferred target is not obvious within the embedded
   experience.  For instance, if the embedded experience only defines an
   IRI value for the "gadget" property, then the preferred target type
   is "gadget".  However, if both the "url" and "gadget" properties are
   specified, as in the example above, the target type in the preferred
   experience MUST be specified.  Containers MUST ignore the preferred
   experience if the target type value does not match the options
   specified within the Embedded Experience (e.g.  target type specifies
   "url" but only a "gadget" IRI is provided, etc).

   When "type" equals "gadget", the additional properties on the target
   object are:

   +------------------+------------------------------------------------+
   | Property         | Description                                    |
   +------------------+------------------------------------------------+
   | "view"           | The preferred application view to render. If   |
   |                  | not specified, the value "embedded" is         |
   |                  | assumed.                                       |
   | "viewTarget"     | Specifies where the container SHOULD render    |
   |                  | the view. Possible values are "TAB", "DIALOG", |
   |                  | "MODALDIALOG", "FLOAT", and "SIDEBAR".         |
   +------------------+------------------------------------------------+

   Preferring the url target:







(surname)               Expires October 31, 2012              [Page 145]

Internet-Draft                Core-Gadget                       May 2012


    {
      "gadget" : "...",
      "url" : "...",
      ...,
      "preferredExperience" : {
        "target": {
          "type" : "url",
          "viewTarget" : "_new"
        },
        "display": {
          ...
        }
      }
    }

   When "type" equals "url", the additional properties on the target
   object are:

   +----------------+--------------------------------------------------+
   | Property       | Description                                      |
   +----------------+--------------------------------------------------+
   | "viewTarget"   | When specifying a URL, rather than being forced  |
   |                | to render in an embedded view, the developer may |
   |                | wish to indicate to the container that the page  |
   |                | be opened in a new browser window. In this case, |
   |                | the target properties for a URL match those that |
   |                | are defined by the HTML spec, e.g. "_blank".     |
   +----------------+--------------------------------------------------+

   Implementations are free to define additional target types, each with
   their own properties.  If a container encounters an embedded
   experience that uses an unknown or unsupported target type, the
   container MUST ignore the target preferences.

4.2.4.4.  Security

   Embedded experiences allow content to be rendered on the page that
   user has not necessarily requested, therefore it needs to be secured.
   The container SHOULD only ever render content that the user has
   previously approved.  This specification does not dictate how secure
   rendering of embedded experiences is to be performed.

4.2.4.5.  Embedded Experiences within Activity Streams

   Embedded experiences can be used within an Activity Streams document
   in order to provide a more interactive experience.  Whereas the core
   properties of the Activity provide a textual description of the
   event, an included embedded experience can provide a direct
   representation of the object involved.

   For instance, if a user uploads a collection of photos and creates a
   new photo album, an embedded experience can be used within the
   activity to provide a representation of the album itself:

(surname)               Expires October 31, 2012              [Page 146]

Internet-Draft                Core-Gadget                       May 2012


    {
      "postedTime": "2011-02-10T15:04:55Z",
      "actor": {
        "objectType" : "person",
        "id": "tag:example.org,2011:martin",
        "displayName": "Martin Smith"
      }
      "verb": "post",
      "object" : {
        "objectType":"collection",
        "objectTypes":["image"]
        "id": "http://example.org/albums/germany-2009",
        "url": "http://example.org/albums/germany-2009",
      },
      "openSocial" : {
        "embed" : {
          "gadget" : "http://example.org/AlbumViewer.xml",
          "context" : {
            "albumName": "Germany 2009",
            "photoUrls": [
              "http://examplephotos.com/3495/3925132517_5959dac775_t.jpg",
              "http://examplephotos.com/3629/3394799776_47676abb46_t.jpg",
              "http://examplephotos.com/4009/4413640211_715d924d9b_t.jpg",
              "http://examplephotos.com/2340/3528537244_d2fb037aba_t.jpg",
              "http://examplephotos.com/36/98407782_9c4c5866d1_t.jpg",
              "http://examplephotos.com/48/180544479_bb0d0f6559_t.jpg",
              "http://examplephotos.com/2668/3858018351_1e7b73c0b7_t.jpg"
            ]
          }
        }
      }
    }

   As illustrated in the example, when included within an activity, the
   embedded experience MUST appear as the value of the "embed" property
   as a child of the "openSocial" property.

4.2.4.6.  Embedded Experiences within Email

   Numerous services send email notifications to your inbox in order to
   let you know something took place that you may be interested in.
   Most of the time however these notifications do not provide much
   useful information beyond a link back to the service's website.  By
   leveraging embedded experiences, services can send an embedded
   representation of the object the notification is about, and allow the
   user to take action on the notification directly from within an
   embedded experiences enabled email client.







(surname)               Expires October 31, 2012              [Page 147]

Internet-Draft                Core-Gadget                       May 2012


   Embedded experiences serialized as either JSON or XML can be embedded
   Multipart MIME encoded email messages.  Such email messages MUST
   utilize the "multipart/alternative" MIME variant and MUST contain at
   least two MIME parts -- one containing regular content of the email
   message encoded as text/html content, and another containing the
   embedded experience content using either the "application/embed+json"
   or "application/embed+xml" MIME media type, respectively representing
   the JSON and XML serializations.  Additional MIME parts MAY be
   included

   For instance,

       From: notifications@socialnetwork.com
       To: johndoe@example.com
       Subject: Social Network: Mary Has Commented On Your Status
       MIME-Version: 1.0
       Content-Type: multipart/alternative;
               boundary="XXXXboundary text"
   
       Mary has commented on your status.
   
       --XXXXboundary text
       Content-Type: text/plain
   
       Mary has commeneted on your status.
   
       --XXXXboundary text
       Content-Type: text/html
   
       <html>
       <!-- HTML representation here -->
       </html>
   
       --XXXXboundary text
       Content-Type: application/embed+json
       {
         "gadget" : "http://www.socialnetwork.com/embedded/commentgadget.xml",
         "context" : 123
       }

4.2.5.  The Flash Feature

   The "Flash" feature provides three JavaScript methods that simplify
   the embedding of Flash-based content in applications.  The feature is
   enabled by specifying feature="flash" using either the <Require> or
   <Optional> elements in the <ModulePrefs>. The "Flash" feature defines
   no parameters.

   Containers SHOULD support the "Flash" feature.

   In the partial application specification below, we declare that the
   "flash" feature is required and render a remote flash resource within
   the default view:

(surname)               Expires October 31, 2012              [Page 148]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       ...
       <Require feature="flash" />
       ...
     </ModulePrefs>
     <Content type="html"><[CDATA[
       <div id="container"></div>
       <script>
         ...
         gadgets.flash.embedCachedFlash(
           "http://example.org/content/movie.swf",
           "container", 11
         );
         ...
       </script>
     ]]></Content>
   </Module>

4.2.5.1.  JavaScript API

   The following JavaScript APIs are enabled when the "Flash" feature is
   enabled for an application.

4.2.5.1.1.  gadgets.flash.embedCachedFlash

   Embeds a cached Flash document into a container DOM object.

   <static> <Boolean> gadgets.flash.embedCachedFlash(url, container, version, options)

   Input Parameters:

   +-------------+----------+------------------------------------------+
   | Name        | Type     | Description                              |
   +-------------+----------+------------------------------------------+
   | url         | String   | The IRI of the Flash resource to embed.  |
   | container   | String | | Specifies either the DOM identifier or   |
   |             | Object   | object reference for the existing        |
   |             |          | container object (e.g. a <div>) within   |
   |             |          | which the Flash content will be          |
   |             |          | embedded.                                |
   | version     | Number   | Specifies the minimum Flash Player       |
   |             |          | version required to support the embedded |
   |             |          | content.                                 |
   | options     | Object   | An optional object that MAY contain any  |
   |             |          | property that is valid for the HTML      |
   |             |          | <embed> tag. These properties will be    |
   |             |          | passed directly through the <embed> tag  |
   |             |          | generated by the API call.               |
   +-------------+----------+------------------------------------------+

   The method will return either "True" or "False" to indicate whether
   the method completed successfully or not.

(surname)               Expires October 31, 2012              [Page 149]

Internet-Draft                Core-Gadget                       May 2012


4.2.5.1.2.  gadgets.flash.embedFlash

   Embeds a cached Flash document into a container DOM object.

   <static> <Boolean> gadgets.flash.embedCachedFlash(url, container, version, options)

   Input Parameters:

   +-------------+----------+------------------------------------------+
   | Name        | Type     | Description                              |
   +-------------+----------+------------------------------------------+
   | url         | String   | The IRI of the Flash resource to embed.  |
   | container   | String | | Specifies either the DOM identifier or   |
   |             | Object   | object reference for the existing        |
   |             |          | container object (e.g. a <div>) within   |
   |             |          | which the Flash content will be          |
   |             |          | embedded.                                |
   | version     | Number   | Specifies the minimum Flash Player       |
   |             |          | version required to support the embedded |
   |             |          | content.                                 |
   | options     | Object   | An optional object that MAY contain any  |
   |             |          | property that is valid for the HTML      |
   |             |          | <embed> tag. These properties will be    |
   |             |          | passed directly through the <embed> tag  |
   |             |          | generated by the API call.               |
   +-------------+----------+------------------------------------------+

   The method will return either "True" or "False" to indicate whether
   the method completed successfully or not.

4.2.5.1.3.  gadgets.flash.getMajorVersion

   Returns the major version of the Flash player supported by the
   container.

   <static> >Number> gadgets.flash.getMajorVersion()

4.2.6.  The JavaScript Internationalization (i18n) Feature

   The "JavaScript i18n" feature provides a JavaScript API for localized
   parsing and formatting of dates, times, numbers and currency
   according to the rules for the application's locale as set by the
   container.  The feature is specified by including either an
   "Optional" or "Required" element within the "ModulePrefs" The feature
   identifier is "opensocial-i18n".

   Once available, developer's can use the feature via the
   "gadgets.i18n" JavaScript class.

   The locale used by an application is established by the container
   when the view is rendered.  The i18n feature will use the country and
   language specified in the locale to load the appropriate formatter
   and parser for any given date, time, number or currency.

(surname)               Expires October 31, 2012              [Page 150]

Internet-Draft                Core-Gadget                       May 2012


   The i18n feature provides four distinct methods: formatDateTime,
   formatNumber, parseDateTime and parseNumber.  At a minimum, each
   method takes as input a format pattern that defines the structure of
   the data being parsed or formatted and the value to which the pattern
   is to be applied.

   For instance, to format an integer using a localized grouping
   separator (e.g.  the number 1234567 formatted as "1,234,567" when the
   locale is "en-US"), the following can be used:

   var str = gadgets.i18n.formatNumber("#,###", 1234567);

   The i18n feature includes a number of common, predefined format
   patterns that can be used.  The specific definition of these formats
   are specific to the locale established by the container.  For
   instance, using the predefined "gadgets.i18n.MEDIUM_DATE_FORMAT"
   pattern to format the date for August, 4th 2006 using the "de"
   (German) locale using the formatDateTime method would output
   "04.08.2006".  Using the same predefined pattern using the "en-US"
   (United States) locale, however, would output "08-04-2006".

   var date = new Date(2006,7,4);
   var str = gadgets.i18n.formatDateTime(gadgets.i18n.MEDIUM_DATE_FORMAT, date);

   When parsing and formatting currencies using the predefined patterns,
   there are several considerations that need to be taken into account.
   For example, when the default locale is set to "fr-FR" (France), and
   the gadgets.i18n.CURRENCY_PATTERN is used to parse a string, the
   parser will assume that the input string is formatted according to
   the localized rules for the "fr-FR" locale:

   var num = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 \u20AC");

   Here, "num" will equal 20000.

   If a foreign currency is used, U.S. Dollars for instance, the input
   string MUST still be formatted in accordance to the rules specified
   for the established locale and an optional currency code can be
   specified:

   var num = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "20 000 $", 0, "USD");

   If, however, the input string is not formatted in accordance to the
   localized rules for the established locale, the predefined pattern
   will not work and a custom pattern needs to be used:

   var num = gadgets.i18n.parseNumber("#,###", "$20,000", 0, "USD");

4.2.6.1.  Specifying Format and Parsing Patterns

4.2.6.1.1.  Date/Time Pattern Specification



(surname)               Expires October 31, 2012              [Page 151]

Internet-Draft                Core-Gadget                       May 2012


   When formatting and parsing dates and times, the i18n feature
   utilizes the patten specification defined in Appendix F of the
   Unicode Locale Data Markup Language [4] with the exception that
   support for the following symbols is not required:

   o  w: Week of year

   o  W: Week of Month.

   o  D: Day of year.

   o  F: Day of Week in Month.

   o  g: Modified Julian day

4.2.6.1.2.  Number Pattern Specification

   Patterns for formatting and parsing numbers are expressed using the
   same grammar used by the Java Standard Editon's as described
   NumberFormat [5] class.

   For example, assuming a locale of "en-US", using the pattern
   "#,##0.00" to format the number 1234567.1234 using the formatNumber
   method would output "1,234,567.12".

4.2.6.2.  JavaScript API

4.2.6.2.1.  Predefined Format Constants

   The Predefined Format Constants that MUST be supported are listed in
   the table below.  The specific pattern associated with each constant
   will vary by locale.






















(surname)               Expires October 31, 2012              [Page 152]

Internet-Draft                Core-Gadget                       May 2012


   +-----------------------------------------+-------------------------+
   | Property                                | Description             |
   +-----------------------------------------+-------------------------+
   | "gadgets.i18n.CURRENCY_PATTERN"         | The default currency    |
   |                                         | format, e.g. for the    |
   |                                         | locale "en-US", the     |
   |                                         | number 1234.235 would   |
   |                                         | format as "$1,234.34".  |
   | "gadgets.i18n.DECIMAL_PATTERN"          | The default decimal     |
   |                                         | number format, e.g. for |
   |                                         | the locale "de-DE", the |
   |                                         | number 1234 with a      |
   |                                         | fractional decimal of   |
   |                                         | 13 would format as      |
   |                                         | "1.234,13".             |
   | "gadgets.i18n.PERCENT_PATTERN"          | The default percentage  |
   |                                         | number format, e.g. for |
   |                                         | the locale "en-US", the |
   |                                         | number 123 would format |
   |                                         | as "12,300%"            |
   | "gadgets.i18n.SCIENTIFIC_PATTERN"       | The default scientific- |
   |                                         | notation format, e.g.   |
   |                                         | the number 12345.0      |
   |                                         | would format as "1E4"   |
   | "gadgets.i18n.FULL_DATE_FORMAT"         |                         |
   | "gadgets.i18n.FULL_DATETIME_FORMAT"     |                         |
   | "gadgets.i18n.FULL_TIME_FORMAT"         |                         |
   | "gadgets.i18n.LONG_DATE_FORMAT"         |                         |
   | "gadgets.i18n.LONG_DATETIME_FORMAT"     |                         |
   | "gadgets.i18n.LONG_TIME_FORMAT"         |                         |
   | "gadgets.i18n.MEDIUM_DATE_FORMAT"       |                         |
   | "gadgets.i18n.MEDIUM_DATETIME_FORMAT"   |                         |
   | "gadgets.i18n.MEDIUM_TIME_FORMAT"       |                         |
   | "gadgets.i18n.SHORT_DATE_FORMAT"        |                         |
   | "gadgets.i18n.SHORT_DATETIME_FORMAT"    |                         |
   | "gadgets.i18n.SHORT_TIME_FORMAT"        |                         |
   +-----------------------------------------+-------------------------+

4.2.6.2.2.  gadgets.i18n.formatDateTime

   The "gadgets.i18n.formatDateTime" method formats a "Date" object with
   provided pattern specification.  The pattern could be a string using
   ICU notation or a predefined pattern.  A string using ICU notation
   offers the most flexibility.  Each field as specified in the pattern
   has locale specific behavior.  The pattern string is allowed to
   contain string literals, and one type of pattern might not work for
   all locales.  In those case, the pattern itself could also be locale
   specific, thus not good for sharing among locales.

   <static> <String> gadgets.i18n.formatDateTime(pattern,date)

   For example:


(surname)               Expires October 31, 2012              [Page 153]

Internet-Draft                Core-Gadget                       May 2012


   date = new Date(2006, 6, 27, 13, 10, 10, 250);
   assertEquals("13:10:10", gadgets.i18n.formatDateTime("HH:mm:ss", date));

   Input Parameters:

   +-----------+-----------------+-------------------------------------+
   | Name      | Type            | Description                         |
   +-----------+-----------------+-------------------------------------+
   | pattern   | string/number   | String to specify patterns or       |
   |           |                 | Number used to reference predefined |
   |           |                 | pattern that a date should be       |
   |           |                 | formatted into.                     |
   | date      | Date            | Date object being formatted.        |
   +-----------+-----------------+-------------------------------------+

   The method returns a String representation of the provided date and
   time.

4.2.6.2.3.  gadgets.i18n.formatNumber

   The "gadgets.i18n.formatNumber" method formats number using the
   pattern specified.  The pattern can be a string pattern or one of the
   predefined patterns.  The formatted string is returned.  If an error
   is encountered, zero will be returned.

   <static> <String> gadgets.i18n.formatNumber(pattern, value, opt_currencyCode)

   For example:

   var str = gadgets.i18n.formatNumber("#,###", 1234567890);
   assertEquals("1,234,567,890", str);
   var str = gadgets.i18n.formatNumber(gadgets.i18n.CURRRENCY_PATTERN, 1234.569);
   assertEquals("$1,234.58", str);

   Input Parameters:



















(surname)               Expires October 31, 2012              [Page 154]

Internet-Draft                Core-Gadget                       May 2012


   +--------------------+----------------+-----------------------------+
   | Name               | Type           | Description                 |
   +--------------------+----------------+-----------------------------+
   | pattern            | string/number  | String to specify patterns  |
   |                    |                | or Number used to reference |
   |                    |                | predefined pattern that a   |
   |                    |                | number should be formatted  |
   |                    |                | into.                       |
   | value              | number         | The number being formatted. |
   | opt_currencyCode   | string         | optional international      |
   |                    |                | currency code, it           |
   |                    |                | determines the currency     |
   |                    |                | code/symbol should be used  |
   |                    |                | in format/parse. If not     |
   |                    |                | given, the currency code    |
   |                    |                | for current locale will be  |
   |                    |                | used.                       |
   +--------------------+----------------+-----------------------------+

   The method returns the formatted string.

4.2.6.2.4.  gadgets.i18n.parseDateTime

   The "gadgets.i18n.parseDateTime" method will parse the input string
   ("text"), interpretting it as specified by pattern.  The parsed
   result will be saved into a Date object ("date"). "start" indicates
   from where in the string the parse should start.  This method returns
   the number of characters consumed.

   <static> <Number> gadgets.i18n.parseDateTime(pattern, text, start, date)

   For example:

   var date = gadgets.i18n.parseDateTime("yyMMdd", "991202", 0, date);
   var year = date.getFullYear();
   var month = date.getMonth();
   var day = date.getDate();

   Typically, the complete collection of characters in a string are
   targeted for parsing.  However, there are cases when parsing only a
   subset of the characters is preferred.  For that purpose, the
   optional "start" and "date" parameters can be used.

   For example, suppose you want to parse a string like "88/01, 99/03,
   98/05, 97/02", and extract each pair of numbers (e.g.  88/01) as a
   separate Date:








(surname)               Expires October 31, 2012              [Page 155]

Internet-Draft                Core-Gadget                       May 2012


   var date_array = [];
   var pos = 0;
   var text = "88/01, 99/03, 98/05, 97/02";
   while(1) {
     var date = new Date;
     var consumed = gadgets.i18n.parseDateTime("yy/MM", text, pos, date);
     if (consumed <= 0) break;
     date_array.push(date);
     pos += consumed;
     if (pos < text.length && text[pos] == ',') ++pos;
     if (pos < text.length && text[pos] == ' ') ++pos;
   }

   As with the formatting functions, a predefined pattern can also be
   passed in as the first parameter:

   //assume locale has already been set to zh_CN
   var date = new Date();
   gadgets.i18n.parseDateTime(gadgets.i18n.LONG_DATE_FORMAT, "2006&#24180;7&#26376;24&#26085;", 0, date);
   assertEquals(date.getFullYear(), 2006);
   assertEquals(date.getMonth(), 7 - 1);
   assertEquals(date.getDate(), 24);

   Input Parameters:

   +-----------+-----------------+-------------------------------------+
   | Name      | Type            | Description                         |
   +-----------+-----------------+-------------------------------------+
   | pattern   | string/number   | String to specify patterns or       |
   |           |                 | Number used to reference predefined |
   |           |                 | pattern that a date should be       |
   |           |                 | parsed from.                        |
   | text      | string          | The string that need to be parsed.  |
   | start     | number          | The character position in "text"    |
   |           |                 | where parse begins.                 |
   | date      | Date            | The date object that will hold      |
   |           |                 | parsed value.                       |
   +-----------+-----------------+-------------------------------------+

   The method returns the number of characters parsed or 0 if the
   attempt to parse failed.

4.2.6.2.5.  gadgets.i18n.parseNumber

   The "gadgets.i18n.parseNumber" method parses a String to get a number
   the pattern specified.  The pattern can be a string pattern or one of
   the predefined patterns.

   <static> <Number> gadgets.i18n.parseNumber(pattern, text, opt_pos, opt_currencyCode)

   For example:



(surname)               Expires October 31, 2012              [Page 156]

Internet-Draft                Core-Gadget                       May 2012


   var value = gadgets.i18n.parseNumber("0E0", "1.2345E+4");
   assertEquals(12345.0, value);
   //assume locale has already been set to fr
   var value = gadgets.i18n.parseNumber(gadgets.i18n.CURRENCY_PATTERN, "0,30 EUR");
   assertEquals(0.30, value);

   Input Parameters:

   +--------------------+----------------+-----------------------------+
   | Name               | Type           | Description                 |
   +--------------------+----------------+-----------------------------+
   | pattern            | string/number  | String to specify patterns  |
   |                    |                | or Number used to reference |
   |                    |                | predefined pattern that a   |
   |                    |                | number should be parsed     |
   |                    |                | from.                       |
   | text               | string         | input text being parsed.    |
   | opt_pos            | Array          | optional one element array  |
   |                    |                | that holds position         |
   |                    |                | information. It tells from  |
   |                    |                | where parse should begin.   |
   |                    |                | Upon return, it holds parse |
   |                    |                | stop position.              |
   | opt_currencyCode   | string         | optional international      |
   |                    |                | currency code, it           |
   |                    |                | determines the currency     |
   |                    |                | code/symbol should be used  |
   |                    |                | in format/parse. If not     |
   |                    |                | given, the currency code    |
   |                    |                | for current locale will be  |
   |                    |                | used.                       |
   +--------------------+----------------+-----------------------------+

   The method returns the parsed number or a 0 if the attempt to parse
   failed.

4.2.7.  The MiniMessage Feature

   The "MiniMessage" feature provides a simple mechanism for displaying
   temporary messages to users of an application.  Such messages
   typically appear at the top of the area allocated by the container
   for display of the application and are dismissed either
   programmatically or by user action.  Examples of typical uses of the
   MiniMessage feature include:

   o  Displaying temporary status messages: loading, saving, etc.

   o  Displaying promotional messages: new features, new application,
      etc.

   o  Displaying debug and error messages: bad input, failed connection
      to server, etc.


(surname)               Expires October 31, 2012              [Page 157]

Internet-Draft                Core-Gadget                       May 2012


   Containers SHOULD support the "MiniMessage" feature.

   The "MiniMessage" feature is enabled by specifying
   feature="minimessage" within either a <Require> or <Optional> element
   within the <ModulePrefs>. JavaScript APIs are used to create and
   manipulate the messages.  No parameters are specified for the
   MiniMessage feature.

   In the partial specification document below, the "MiniMessage"
   feature is required and a simple message that dismisses automatically
   after 10 seconds is created:

   <Module>
     <ModulePrefs>
       <Require feature="minimessage" />
     </ModulePrefs>
     <Content type="html" ><[CDATA[
       ...
       <script>
         ...
         var messages = new gadgets.MiniMessage(gadgets.Prefs.getModuleId());
         var content = document.createElement('div');
         content.innerHTML = "Welcome to my application.";
         messages.createTimerMessage(content, 10);
         ...
       </script>
       ...
     ]]></Content>
   </Module>

   Typically, only a single "gadgets.MiniMessage" object needs to be
   created for each view.  Multiple messages can be created and managed
   by a single instance.

   By default, all messages will be displayed in a special reserved area
   provided by the container at the top of the area allocated to
   rendering the view.  However, developers can select alternative
   locations either for all messages or specific individual messages by
   passing in additional parameters to the JavaScript API.

   In the following example, all messages are rendered in an area
   dedicated by the view for messages:












(surname)               Expires October 31, 2012              [Page 158]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="minimessage" />
     </ModulePrefs>
     <Content type="html" ><[CDATA[
       ...
       <h2>Messages</h2>
       <div id="messages"></div>
       <script>
         ...
         var messages = new gadgets.MiniMessage(
           gadgets.Prefs.getModuleId(),
           document.getElementById("messages"));
         messages.createTimerMessage("This is my message", 10);
         ...
       </script>
       ...
     ]]></Content>
   </Module>

   Individual messages can be displayed anywhere within the application
   either by specifying the HTML markup directly within the application
   and referencing it when creating the message or by using DOM methods
   in JavaScript.  For example, in the following example, a message is
   created and positioned individually:

     <Module>
       <ModulePrefs>
         <Require feature="minimessage" />
       </ModulePrefs>
       <Content type="html" ><[CDATA[
         ...
         <div id="status">This message can be dismissed</div>
         <script>
           ...
           var messages = new gadgets.MiniMessage(gadgets.Prefs.getModuleId());
           messages.createDismissableMessage(document.getElementById("status"));
   
           var div = document.createElement("div");
           ...
         </script>
         ...
       ]]></Content>
     </Module>

4.2.7.1.  JavaScript API

   When the "MiniMessage" feature is enabled for a application, the
   follow JavaScript objects and methods are provided:

4.2.7.1.1.  The gadgets.MiniMessage Object



(surname)               Expires October 31, 2012              [Page 159]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.MiniMessage" object is used to create and manage
   messages for an application.  Typically, only a single instance of
   the object needs to be created for all messages within a given view.

   Instances are created using the JavaScript "new" keyword:

   var messages = new gadgets.MiniMessage(id, container);

   The object constructor takes two parameters, both of which are
   optional:

   +-------------+-------------+---------------------------------------+
   | Name        | Type        | Description                           |
   +-------------+-------------+---------------------------------------+
   | id          | String      | The container provided unique         |
   |             |             | identifier of the application         |
   |             |             | instance. This value can be           |
   |             |             | determined using the                  |
   |             |             | "gadgets.Prefs.getModuleId()" method. |
   | container   | HTMLElement | An object reference to the HTML       |
   |             |             | element, typically a <div> that will  |
   |             |             | serve as the container for all        |
   |             |             | messages managed by this MiniMessage  |
   |             |             | instance.                             |
   +-------------+-------------+---------------------------------------+

   Once created, the "gadgets.MiniMessage" object provides four methods
   for working with messages.

4.2.7.1.1.1.  gadgets.MiniMessage.createDismissibleMessage

   Creates a "dismissible" message that includes a container defined
   icon that allows users to dismiss the message by clicking on it.
   When the message is, it is removed from the DOM and an optional
   callback function, if defined, is invoked.

   <HTMLElement> gadgets.MiniMessage.createDismissibleMessage(message, callback)

   Input Parameters:

   +------------+------------+-----------------------------------------+
   | Name       | Type       | Description                             |
   +------------+------------+-----------------------------------------+
   | message    | String |   | The message as an HTML string or DOM    |
   |            | Object     | element                                 |
   | callback   | Function   | Optional callback function to be called |
   |            |            | when the message is dismissed. The      |
   |            |            | callback function will not be called    |
   |            |            | until after the existing callstack has  |
   |            |            | completed execution.                    |
   +------------+------------+-----------------------------------------+



(surname)               Expires October 31, 2012              [Page 160]

Internet-Draft                Core-Gadget                       May 2012


   If creation of the message is successful, the method will return a
   reference to the HTMLElement that contains the created message.

4.2.7.1.1.2.  gadgets.MiniMessage.createStaticMessage

   Creates a "static" message that can only by dismissed
   programmatically by calling the "gadgets.MiniMessage.dismissMessage"
   method.

   <HTMLElement> gadgets.MiniMessage.createStatusMessage(message)

   Input Parameters:

   +-------------+----------------+------------------------------------+
   | Name        | Type           | Description                        |
   +-------------+----------------+------------------------------------+
   | message     | String |       | The message as an HTML string or   |
   |             | Object         | DOM element                        |
   +-------------+----------------+------------------------------------+

   If creation of the message is successful, the method will return a
   reference to the HTMLElement that contains the created message.

4.2.7.1.1.3.  gadgets.MiniMessage.createTimerMessage

   Creates a message that displays for a specified number of seconds.
   When the timer expires, the message is dismissed automatically and an
   optional callback function, if provided, is invoked.

   <HTMLElement> gadgets.MiniMessage.createTimerMessage(message, seconds, callback)

   Input Parameters:

   +------------+------------+-----------------------------------------+
   | Name       | Type       | Description                             |
   +------------+------------+-----------------------------------------+
   | message    | String |   | The message as an HTML string or DOM    |
   |            | Object     | element                                 |
   | seconds    | Number     | The number of seconds to wait before    |
   |            |            | dismissing the message.                 |
   | callback   | Function   | Optional callback function to be called |
   |            |            | when the message is dismissed. The      |
   |            |            | callback function will not be called    |
   |            |            | until after the existing callstack has  |
   |            |            | completed execution.                    |
   +------------+------------+-----------------------------------------+

   If creation of the message is successful, the method will return a
   reference to the HTMLElement that contains the created message.

4.2.7.1.1.4.  gadgets.MiniMessage.dismissMessage

   Dismisses the specified message.

(surname)               Expires October 31, 2012              [Page 161]

Internet-Draft                Core-Gadget                       May 2012


   <Void> gadgets.MiniMessage.dismissMessage(message)

   The method takes a single input parameter which is the HTMLElement of
   the message to dismiss as returned by one of the three creation
   messages.

4.2.8.  The OAuth Popup Feature

   When an application attempts to access remote resources that are
   protected using either the OAuth 1.0a or 2.0 protocol, the container
   is required to first determine if the application has received
   appropriate authorization in the form of an "Access Token".  If a
   token is not available, the container must ask the application to
   first acquire the appropriate authorization.

   With most scenarios, this is achieved by redirecting the user to the
   third party OAuth Authorization Service and asking them to approve
   access.  While application developers are responsible for determining
   how such redirection occurs, they can use the OAuth Popup Feature to
   simplify the process and to promote consistent, familiar behavior.

   The feature works by generating a hyperlink within the application's
   user interface that, when clicked, opens a window that displays the
   third party OAuth Authoriation Service's interface.  When opened, the
   application is notified via a callback function that the window is
   open.  The user will either approve or deny the request and then
   dismiss the window, returning the user back to the application's user
   interface.  The application can either then automatically proceed
   with processing the request or wait for the user to notify it when it
   continue.

   Use of the OAuth Popup Feature is enabled within an application by
   using feature="oauthpopup" in either a <Require> or <Optional>
   element with the <ModulePrefs>. Once enabled, the
   "gadgets.oauth.Popup" object will become available for use within the
   JavaScript of a view.

   The example below illustrates the basic operation of the OAuth Popup
   Feature:















(surname)               Expires October 31, 2012              [Page 162]

Internet-Draft                Core-Gadget                       May 2012


     <Module>
       <ModulePrefs>
         <Require feature="oauthpopup" />
         <OAuth>
           <Service>...</Service>
         </OAuth>
       </ModulePrefs>
       <Content type="html"><![CDATA[
         <div>
           <a href="#" id="personalize">Personalize this application</a>
         </div>
   
         <div>Please click
           <a href="#" id="approvaldone">I've approved access</a>
           once you've approved access to your data.
         </div>
   
         <script type="text/javascript">
           function $(x) {
             return document.getElementById(x);
           }
   
           function fetchData() {
             var url = "http://localhost:8080/social/rest/people/@me/@self";
             var params = {};
             params[gadgets.io.RequestParameters.CONTENT_TYPE] =
               gadgets.io.ContentType.TEXT;
             params[gadgets.io.RequestParameters.AUTHORIZATION] =
               gadgets.io.AuthorizationType.OAUTH;
             params[gadgets.io.RequestParameters.METHOD] =
               gadgets.io.MethodType.GET;
             params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] =
               "shindig";
   
             gadgets.io.makeRequest(url, function (response) {
               if (response.oauthApprovalUrl) {
                 var onOpen = function() {};
                 var onClose = function() {
                   fetchData();
                 };
                 var popup = new gadgets.oauth.Popup(
                   response.oauthApprovalUrl,
                   null, onOpen, onClose);
                 $('personalize').onclick = popup.createOpenerOnClick();
                 $('approvaldone').onclick = popup.createApprovedOnClick();
               } else if (response.data) {
                 ...
               } else {
                 ...
               }
             }, params);
           }
   

(surname)               Expires October 31, 2012              [Page 163]

Internet-Draft                Core-Gadget                       May 2012

           gadgets.util.registerOnLoadHandler(fetchData);
         </script>
       ]]></Content>
     </Module>

   Once the "gadgets.oauth.Popup" object is created, the calls to
   "popup.createOpenerOnClick" and "popup.createApprovedOnClick"
   generate the appropriate hyperlink targets for acquiring and
   completing the authorization.

4.2.8.1.  JavaScript API

   When the OAuth Popup Feature is enabled for an application, the
   "gadgets.oauth.Popup" object becomes available for use within the
   application's JavaScript code.

4.2.8.1.1.  The gadgets.oauth.Popup Object

   The "gadets.oauth.Popup" object is used to manage a window that is
   displayed and used to acquire OAuth Authorization from a third party.
   Instances of the object are created using the JavaScript new keyword.

   For instance:

   var popup = new gadgets.oauth.Popup(
     destination,
     windowOptions,
     openCallback,
     closeCallback);

   The constructor accepts the following input parameters:

   +-------------------+------------+----------------------------------+
   | Name              | Type       | Description                      |
   +-------------------+------------+----------------------------------+
   | destination       | String     | Target URL to display when the   |
   |                   |            | window opens.                    |
   | windowOptions     | String     | Options for window.open, used to |
   |                   |            | specify look and feel of the     |
   |                   |            | window.                          |
   | openCallback      | Function   | Function to call when the window |
   |                   |            | is opened.                       |
   | closeCallback     | Function   | Function to call when the window |
   |                   |            | is closed.                       |
   +-------------------+------------+----------------------------------+

   The "gadgets.oauth.Popup" object exposes two methods:
   "createOpenerOnClick" and createApprovedOnClick.

4.2.8.1.1.1.  gadgets.oauth.Popup.createOpenerOnClick





(surname)               Expires October 31, 2012              [Page 164]

Internet-Draft                Core-Gadget                       May 2012


   Generates a function that is intended to be assigned to either a
   hyperlink (e.g.  the onclick event of the HTML anchor tag) or similar
   mechanism (e.g.  an HTML button) that when invoked, will display the
   OAuth Authorization window.  The method accepts no input parameters
   and returns a JavaScript Function object.

   <Function> createOpenerOnClick()

4.2.8.1.1.2.  gadgets.oauth.Popup.createApprovedOnClick

   Generates a function that is intended to be assigned to either a
   hyperlink (e.g.  the onclick event of the HTML anchor tag) or similar
   mechanism (e.g.  an HTML button) that when invoked, will notify the
   container that OAuth authorization is complete.

   Typically, when the OAuth Popup window closes, the container will be
   able to automatically detect that authorization is complete and it
   will attempt to continue with the original request that triggered the
   authorization step in the first place.  However, some containers are
   unable to detect when the Popup is closed.  For those cases, the
   "createdApprovedOnClick" method provides a alternative.  In most
   typical scenarios, however, the "Approved" function returned by this
   method will never be invoked.

   The method accepts no input parameters and returns a JavaScript
   Function object.

   <Function> createApprovedOnClick()

4.2.9.  The OpenSearch Feature

   The "opensearch" feature allows applications to declare that
   searchable material is provided using an OpenSearch 1.1 [6]
   description.  Containers can use the search descriptions provided by
   multiple applications to, for example, provide a single, integrated
   container-wide search capability that aggregates results from
   multiple sources.

   The OpenSeach description can either be passed directly as a
   parameter of the feature or by reference using the URL of a
   description document.

   For example:











(surname)               Expires October 31, 2012              [Page 165]

Internet-Draft                Core-Gadget                       May 2012


    <?xml version="1.0" encoding="UTF-8" ?>
    <Module>
      <ModulePrefs title="OpenSearch Example">
        <Optional feature="opensearch">
          <Param name="description">
            <![CDATA[
              <OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/">
                <ShortName>Example Search</ShortName>
                <Description>Realtime Example Search</Description>
                <Url type="application/atom+xml" method="get" template="http://search.example.com/search.atom?q={searchTerms}"/>
                <Image width="16" height="16">http://search.example.com/favicon.png</Image>
                <InputEncoding>UTF-8</InputEncoding>
                <SearchForm>http://search.example.com/</SearchForm>
              </OpenSearchDescription>
            ]]>
          </Param>
        </Optional>
      </ModulePrefs>
      <Content type="url" href="http://example.com/searchGadget.xml" />
    </Module>

   Or, alternatively, using a URL to reference the description document:

    <?xml version="1.0" encoding="UTF-8" ?>
    <Module>
      <ModulePrefs title="OpenSearch Example">
        <Optional feature="opensearch">
          <Param name="url">http://search.example.com/openSearchDescription.xml</Param>
        </Optional>
      </ModulePrefs>
      <Content type="url" href="http://example.com/searchGadget.xml" />
    </Module>

   As illustrated, support for the "opensearch" feature is specified by
   including either an "Optional" or "Required" element within the
   "ModulePrefs" of the Gadget specification.  The feature identifier is
   "opensearch".  Developers SHOULD declare the feature as "Optional" to
   allow for maximum interoperability in all containers.

   The feature has two possible parameters: description and url:

   o  The description parameter contains the full XML of the OpenSearch
      1.1 description [7].  This description contains the template url
      for fetching results, the type of results returned, the title of
      the search contribution, and other information.

   o  The url parameter contains a URL to an XML document containing the
      OpenSearch 1.1 description.

4.2.10.  The OpenSocial API (osapi) Feature




(surname)               Expires October 31, 2012              [Page 166]

Internet-Draft                Core-Gadget                       May 2012


   The OpenSocial API (osapi) Feature provides developers with an
   interface for requesting and manipulating social data made available
   by the OpenSocial Container.

   While it is possible to use the "gadgets.io.makeRequest" method and
   associated methods to interact with information provided by the
   container, the "osapi" feature provides a higher-level abstraction
   that is more specific to OpenSocial's specific data and API model.

   The OpenSocial API Feature is enabled for an application instance by
   specifying feature="osapi" using either the <Require> or <Optional>
   element within the <ModulePrefs>.

   For example:

   <Module>
     <ModulePrefs>
       ...
       <Require feature="osapi" />
       ...
     </ModulePrefs>
     ...
   </Module>

4.2.10.1.  JavaScript API

   When the "osapi" feature is enabled for an application instance, the
   container will generate and provide one Service object instance for
   each Social Data Service provided by the container.  Each Service
   object instance is accessible via a distinct property on the static
   "osapi" object.  The property name is derived from and specific to
   each individual Social Data Service.

   For example, a container can implement the OpenSocial Person Service
   as defined by [social-app] and make that available to developers via
   the "osapi" Feature by using the property name "people" as specified
   in the Person Service definition.

















(surname)               Expires October 31, 2012              [Page 167]

Internet-Draft                Core-Gadget                       May 2012


   <?xml version="1.0" encoding="UTF-8" ?>
   <Module>
     <ModulePrefs>
       ...
       <Require feature="osapi" />
       ...
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         osapi.people.getViewer().execute(
           function(result) {
             // ...
           }
         );
       </script>
     ]]></Content>
   </Module>

   Likewise, the container can implement the OpenSocial Activity Stream
   Service as defined by [social-app] and make that available to
   developers using the property name "activities" as specified in the
   Activity Stream Service definition.

   <?xml version="1.0" encoding="UTF-8" ?>
   <Module>
     <ModulePrefs>
       ...
       <Require feature="osapi" />
       ...
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         osapi.activities.get().execute(
           function(result) {
             // ...
           }
         );
       </script>
     ]]></Content>
   </Module>

   The methods provided by the Service Objects returned by each service
   property are unique to the corresponding service and are defined by
   each individual service's specification.  Every method exposed by the
   Service Object SHOULD take, as input, a single parameter whose value
   is a JavaScript object providing that methods input parameters.  This
   input parameter MAY be optional.  Each method MUST return an
   "osapi.Request" Object instance that encapsulates the request and may
   be used to either execute the request immediately or added to a
   "osapi.BatchRequest" object for deferred and batched execution.




(surname)               Expires October 31, 2012              [Page 168]

Internet-Draft                Core-Gadget                       May 2012


   The example below, for instance, uses the OpenSocial Person Service
   to access a listing of the current Viewer's friends.  First, the
   Service Object for the "people" service is accessed.  Then the
   "get()" method is called with input parameters specifying the data we
   wish to retrieve.  The method returns an "osapi.Request" object that
   is then immediately executed to retrieve the data:

   var people = osapi.people;
   var params = {
     "userId" : "@me",
     "groupId" : "@friends" };
   var get_req = people.get(params);
   get_req.execute(
     function(result) {
       if (!result.error) {
         // ...
       }
     }
   );

   Containers are free to determine the set of Social Data Services they
   support and expose to applications.  Definitions for a handful of
   common Social Data Services are provided in [social-app].  Gadget
   developers cannot assume that all containers will support the same
   set of services and MUST therefore be prepared to gracefully handle
   cases where any given service is not available.

   One method developers can use to safely prepare for such cases is to
   test for the existence of the service and method, as in the following
   example:

   if (osapi.people && osapi.people.getViewer) {
     osapi.people.getViewer().execute(function(result) {
       // ...
     });
   }

4.2.10.1.1.  The osapi.Request Object

   All methods on a Service Object are required to return an instance of
   the "osapi.Request" object.  These objects encapsulate the service
   request being made to the container and wrap it in a consistent
   generic interface exposing a single "execute" method.

4.2.10.1.1.1.  osapi.Request.execute

   The "osapi.Request.execute" method invokes the encapsulated Service
   Object request and passes the result off to a specified callback
   function.

   <Void> <instance>.execute(callback)



(surname)               Expires October 31, 2012              [Page 169]

Internet-Draft                Core-Gadget                       May 2012


   The method takes as input a single Function object that will be
   invoked upon completion of the request with a single input parameter
   representing the request results as a JavaScript object.  The
   specific properties exposed by the result object depend entirely on
   the specific Service Object, the request that was executed and the
   status of the request.

   If the execution of the request results in an error, the callback
   function provided will be invoked with details of the error being
   passed in as described in Section 4.2.10.1.3.

   For example, if an error occurs during the processing of the request,
   the response object passed to the callback function would contain an
   "error" property whose value is an Error Object [core-api]:

   {
     "error": {
       "message": "Invalid Method Parameters",
       "code": -32602
     }
   }

   The execute method has no return value.

4.2.10.1.2.  The osapi.BatchRequest Object

   The "osapi.BatchRequest" object allows multiple "osapi.Request"
   objects to be grouped together and executed as a single unit.

   Instances of the "osapi.BatchRequest" object are created using the
   "osapi.newBatch" method.

   <static> <osapi.BatchRequest> osapi.newBatch()

   The method takes no input parameters.

   Once created, individual "osapi.Request" objects can be added to the
   "osapi.BatchObject" instance as executed at once using the "execute"
   method.

   The following illustrates two batched requests:

   var batch = osapi.newBatch().
      add("viewer", osapi.people.getViewer()).
      add('activities', osapi.activities.get({ userId : '@viewer', groupId : '@self'})).
   batch.execute(function(result) {
     if (!result.error) {
       alert('Hi, ' + result.viewer.displayName + '!');
       alert('You have ' + result.activities.totalResults + ' activities.');
     }
   });

4.2.10.1.2.1.  osapi.BatchRequest.add

(surname)               Expires October 31, 2012              [Page 170]

Internet-Draft                Core-Gadget                       May 2012


   The "osapi.BatchRequest.add" method adds a "osapi.Request" object to
   the batch and associates it with a given key.

   <osapi.BatchRequest> <instance>.add(key, request)

   The first input parameter is a String serving as an identifier for
   the request object provided by the second parameter.  The key value
   "error" MUST NOT be used.  The method returns an "osapi.BatchRequest"
   object containing the just added "osapi.Request" object all all
   previously added requests.

4.2.10.1.2.2.  osapi.BatchRequest.execute

   The "osapi.BatchRequest.execute" method executes all of the requests
   contained within the batch.

   <Void> <instance>.execute(callback)

   The method takes as input a single callback Function object that will
   be invoked when all of the batched requests have been processed.  The
   callback Function will be passed a single JavaScript objects mapping
   each batched request key to a response object specific to the
   individual batched request.

   When an error occurs during the processing of one or more batched
   requests, the container will attempt to continue processing of the
   remaining requests in the batch.  The details of the specific
   error(s) that occur will be mapped to the appropriate batched request
   key within the response object and general error details will be
   included as top level properties of the batch response.

   For example, if a Batch Request containing two individual requests
   mapped to the keys "foo" and "bar" is processed and an error occurs
   when the "foo" request is being processed but the "bar" request
   succeeds, the callback function will be passed an object resembling
   the following structure:

   {
     "error" : {
       "message":"An Error Occurred",
       "code": -32099
     },
     "foo" : {
       "error" : {
         "message":"Invalid Method Parameters",
         "code": -32602
       }
     },
     "bar" : {
       "xyz" : "Some appropriate data"
     }
   }


(surname)               Expires October 31, 2012              [Page 171]

Internet-Draft                Core-Gadget                       May 2012


   Additional details covering error handling is provided in Section
   4.2.10.1.3.

4.2.10.1.3.  Error Handling

   When processing a batch of "osapi.Request" objects using the
   "osapi.BachRequest" object and an error occurs processing any of the
   individual requests, the provided callback function will be invoked
   with a response object passed in containing a single top-level
   "error" property whose value is an Error object generally describing
   that the batch response did not complete with errors.  The object
   will also contain one property key for each request contained in the
   batch whose value will either be the results of the operation if
   successful or an object containing a single "error" property whose
   value is an Error object describing the specific error that occurred.

   For example:

   {
     "error" : {
       "message":"An Error Occurred",
       "code": -32099
     },
     "foo" : {
       "error" : {
         "message":"Invalid Method Parameters",
         "code": -32602
       }
     },
     "bar" : {
       "xyz" : "Some appropriate data"
     }
   }

   When a general error occurs that causes the container to be unable to
   process either an individual or complete batch of requests, such as
   when the container is unable to communicate with the Social Data
   Services, the callback function provided will be invoked and passed a
   response object containing a single "error" property whose value is
   an Error object describing the specific nature of the error.

   For example:

   {
     "error" : {
       "message": "A network communication error occurred",
       "code": -32603
     }
   }

4.2.10.1.4.  The osapi.http Service Object



(surname)               Expires October 31, 2012              [Page 172]

Internet-Draft                Core-Gadget                       May 2012


   The "osapi.http" Object is a special Service Object that encapsulates
   HTTP Requests within "osapi.Request" objects.  These can, in turn, be
   directly invoked using the "execute" method or added to
   "osapi.BatchRequest" objects.

   The "osapi.http" object exposes one method for each of the following
   HTTP methods, each returning an appropriate "osapi.Request":

   +----------+-------------------------+------------------------------+
   | HTTP     | osapi.http Method       | Description                  |
   | Method   |                         |                              |
   +----------+-------------------------+------------------------------+
   | DELETE   | "osapi.http.delete"     | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | DELETE request.              |
   | GET      | "osapi.http.get"        | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | GET request.                 |
   | HEAD     | "osapi.http.head"       | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | HEAD request.                |
   | PATCH    | "osapi.http.patch"      | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | PATCH request.               |
   | POST     | "osapi.http.post"       | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | POST request.                |
   | PUT      | "osapi.http.put"        | Returns an "osapi.Request"   |
   |          |                         | object encapsulating an HTTP |
   |          |                         | PUT request.                 |
   +----------+-------------------------+------------------------------+

   Implementations are free to provide additional methods for other HTTP
   methods.  It is RECOMMENDED that such additional methods follow a
   consistent naming pattern as the lower-case form of the method name.
   For instance, the method provided for the "OPTIONS" HTTP method would
   be "options".

   Each of the methods on the "osapi.http" Object take an input
   parameter in the form of an HTTP Request Parameters Object (Section
   4.2.10.1.4.1) that provides general request options for the request.

4.2.10.1.4.1.  The HTTP Request Parameters Object

   The HTTP Request Parameters Object is a JavaScript object whose
   individual properties define parameters used during the execution of
   an HTTP Request.

   The properties of the HTTP Request Parameters Objects are:





(surname)               Expires October 31, 2012              [Page 173]

Internet-Draft                Core-Gadget                       May 2012


   +----------------------+-------------+------------------------------+
   | Name                 | Type        | Description                  |
   +----------------------+-------------+------------------------------+
   | alias                | String      | When a specification         |
   |                      |             | document uses the            |
   |                      |             | <ExternalService> element to |
   |                      |             | define an alias for a        |
   |                      |             | Container-managed external   |
   |                      |             | service, the optional        |
   |                      |             | "alias" parameter can be     |
   |                      |             | used in place of the "href"  |
   |                      |             | property to identify the     |
   |                      |             | external service to which    |
   |                      |             | the request is to be         |
   |                      |             | directed. If unspecified,    |
   |                      |             | the default value for this   |
   |                      |             | parameter is assumed to be   |
   |                      |             | null.                        |
   | authz                | String      | Specifies the authorization  |
   |                      |             | method to use. Valid values  |
   |                      |             | are: "none", "signed",       |
   |                      |             | "oauth" and "oauth2". For    |
   |                      |             | convenience, aliases for     |
   |                      |             | each of these values have    |
   |                      |             | been provided for use in     |
   |                      |             | JavaScript code. These       |
   |                      |             | aliases are: gadgets.io.Auth |
   |                      |             | orizationType.NONE, gadgets. |
   |                      |             | io.AuthorizationType.SIGNED, |
   |                      |             | gadgets.io.AuthorizationType |
   |                      |             | .OAUTH and gadgets.ioAuthori |
   |                      |             | zationType.OAUTH2.  If not   |
   |                      |             | specified, the default value |
   |                      |             | for this parameter is        |
   |                      |             | assumed to be "none".        |
   | format               | String      | Optionally specifies the     |
   |                      |             | data format the requested    |
   |                      |             | wishes the response to use.  |
   |                      |             | Valid values are either      |
   |                      |             | "json" or "text",            |
   |                      |             | respectively indicating that |
   |                      |             | the data SHOULD be returned  |
   |                      |             | as either "application/json" |
   |                      |             | or "text/plain". If not      |
   |                      |             | specified, the default value |
   |                      |             | is assumed to be "json". The |
   |                      |             | value of this parameter is   |
   |                      |             | used by the container to     |
   |                      |             | process the results of the   |
   |                      |             | HTTP operation. If format is |
   |                      |             | equal to JSON, the container |
   |                      |             | will attempt to parse the    |
   |                      |             | returned content as JSON,    |

(surname)               Expires October 31, 2012              [Page 174]

Internet-Draft                Core-Gadget                       May 2012

   |                      |             | handing the parsed result    |
   |                      |             | back to the provided         |
   |                      |             | callback function. If the    |
   |                      |             | format is "text" or          |
   |                      |             | otherwise cannot be          |
   |                      |             | successfully parsed as JSON, |
   |                      |             | the "raw" unparsed and       |
   |                      |             | unprocessed data provided by |
   |                      |             | the request will be passed   |
   |                      |             | to the callback function.    |
   | headers              | Object      | Specifies the collection of  |
   |                      |             | HTTP Request Headers the     |
   |                      |             | container SHOULD include in  |
   |                      |             | the request. The value is    |
   |                      |             | specified as an associative  |
   |                      |             | map using the header names   |
   |                      |             | as a key and either a        |
   |                      |             | literal String value or an   |
   |                      |             | Array of Strings. For        |
   |                      |             | example, to include "Accept- |
   |                      |             | Language" and two "X-Custom" |
   |                      |             | headers in the request, the  |
   |                      |             | value of the "HEADERS"       |
   |                      |             | property would be set to     |
   |                      |             | "{"Accept-Language":"de-DE", |
   |                      |             | "X-Custom":["abc","xyz"]}".  |
   | href                 | String      | The IRI to which the request |
   |                      |             | is to be sent. If a relative |
   |                      |             | URI is provided, the request |
   |                      |             | will be resolved relative to |
   |                      |             | a Base URI established by    |
   |                      |             | the container.               |
   | oauth_service_name   | String      | When the "authz" parameter   |
   |                      |             | is equal to either "OAUTH"   |
   |                      |             | or "OAUTH2", and the         |
   |                      |             | specification document uses  |
   |                      |             | the <OAuth> or <OAuth2>      |
   |                      |             | elements within the          |
   |                      |             | <ModulePrefs> to define      |
   |                      |             | associated OAuth services,   |
   |                      |             | the "oauth_service_name"     |
   |                      |             | parameter specifies the name |
   |                      |             | of the <Service> element     |
   |                      |             | that provides the OAuth      |
   |                      |             | Service details to use for   |
   |                      |             | the request.  When not       |
   |                      |             | specified, the default value |
   |                      |             | is assumed to be an empty    |
   |                      |             | string (e.g. "").            |
   | oauth_request_token  | String      | When the "authz" parameter   |
   |                      |             | is equal to either "OAUTH"   |
   |                      |             | or "OAUTH2", the             |
   |                      |             | "oauth_request_token"        |
   |                      |             | parameter can be used to     |

(surname)               Expires October 31, 2012              [Page 175]

Internet-Draft                Core-Gadget                       May 2012

   |                      |             | specified a pre-authorized   |
   |                      |             | OAuth Request Token for use  |
   |                      |             | in the request. If the       |
   |                      |             | container does not already   |
   |                      |             | have an OAuth Access Token   |
   |                      |             | suitable for use with the    |
   |                      |             | request, the container       |
   |                      |             | SHOULD use the supplied      |
   |                      |             | Request Token to request and |
   |                      |             | acquire a new Access Token.  |
   |                      |             | If not specified, the        |
   |                      |             | default value is assumed to  |
   |                      |             | be null.                     |
   | oauth_request_token_ | String      | When the                     |
   | secret               |             | "oauth_request_token"        |
   |                      |             | parameter is specified, the  |
   |                      |             | "oauth_request_token_secret" |
   |                      |             | parameter can be used to     |
   |                      |             | supply an associated Request |
   |                      |             | Token Secret. If not         |
   |                      |             | specified, the default value |
   |                      |             | is assumed to be null.       |
   | oauth2_scope         | String      | When the "authz" parameter   |
   |                      |             | is equal to "OAUTH", the     |
   |                      |             | "oauth2_scope" parameter     |
   |                      |             | specifies the value of the   |
   |                      |             | OAuth 2.0 scope parameter    |
   |                      |             | the container SHOULD use     |
   |                      |             | with the request. The scope  |
   |                      |             | parameter is defined in [I-D |
   |                      |             | .ietf-oauth-v2].  If not     |
   |                      |             | specified, the default value |
   |                      |             | is assumed to be null,       |
   |                      |             | indicating that no scope     |
   |                      |             | parameter is to be provided. |
   | oauth_token_name     | String      | When the "authz" parameter   |
   |                      |             | is equal to either "OAUTH"   |
   |                      |             | or "OAUTH2", the application |
   |                      |             | MAY use the                  |
   |                      |             | "oauth_token_name" to        |
   |                      |             | specify an alias for the     |
   |                      |             | OAuth Access Token used for  |
   |                      |             | the request. If the          |
   |                      |             | container does not yet have  |
   |                      |             | an appropriate Access Token  |
   |                      |             | to use with the request, it  |
   |                      |             | will follow the appropriate  |
   |                      |             | steps to acquire one and     |
   |                      |             | cache it using the specified |
   |                      |             | oauth_token_name value. On   |
   |                      |             | subsequent requests, the     |
   |                      |             | specified oauth_token_name   |
   |                      |             | will be used to locate and   |
   |                      |             | use the cached Access Token. |

(surname)               Expires October 31, 2012              [Page 176]

Internet-Draft                Core-Gadget                       May 2012

   |                      |             | If not specified, the        |
   |                      |             | default value is assumed to  |
   |                      |             | be an empty string (e.g.     |
   |                      |             | "").                         |
   | oauth_use_token      | String      | When the "authz" parameter   |
   |                      |             | is equal to either "OAUTH"   |
   |                      |             | or "OAUTH2", the container   |
   |                      |             | is typically required to     |
   |                      |             | acquire an appropriate OAuth |
   |                      |             | Access Token prior to        |
   |                      |             | sending the request to the   |
   |                      |             | URL. The "oauth_use_token"   |
   |                      |             | parameter can be used to     |
   |                      |             | modify this default          |
   |                      |             | behavior. Valid values are:  |
   |                      |             | "never", "if_available" and  |
   |                      |             | "always". If not specified,  |
   |                      |             | the default value is assumed |
   |                      |             | to be "always". When         |
   |                      |             | "oauth_use_token" is equal   |
   |                      |             | to "never", the container    |
   |                      |             | SHOULD NOT attempt to        |
   |                      |             | acquire an Access Token for  |
   |                      |             | the request but SHOULD send  |
   |                      |             | the request to the URL just  |
   |                      |             | as it would any other        |
   |                      |             | request using with OAuth     |
   |                      |             | 1.0a or OAuth 2.0 protocols. |
   |                      |             | When "oauth_use_token" is    |
   |                      |             | equal to "if_available", the |
   |                      |             | container SHOULD include the |
   |                      |             | Access Token in the request  |
   |                      |             | only if an appropriate token |
   |                      |             | is available. If an Access   |
   |                      |             | Token is not available, the  |
   |                      |             | request SHOULD be sent to    |
   |                      |             | the URL without the Access   |
   |                      |             | Token. When                  |
   |                      |             | "oauth_use_token" is equal   |
   |                      |             | to "always", the container   |
   |                      |             | is required to acquire an    |
   |                      |             | Access Token prior to        |
   |                      |             | sending the request and MUST |
   |                      |             | include that token in the    |
   |                      |             | request sent to the URL.     |
   | body                 | String or   | When used with "osapi.http"  |
   |                      | JSON Object | method representing an HTTP  |
   |                      |             | Method for which a request   |
   |                      |             | payload is expected (e.g.    |
   |                      |             | "osapi.http.patch",          |
   |                      |             | "osapi.http.post" or         |
   |                      |             | "osapi.http.put"), the       |
   |                      |             | "body" parameter specifies   |
   |                      |             | the data that is to be       |

(surname)               Expires October 31, 2012              [Page 177]

Internet-Draft                Core-Gadget                       May 2012

   |                      |             | included as the payload of   |
   |                      |             | the request. The value is    |
   |                      |             | specified as either a String |
   |                      |             | or a JSON object. If a JSON  |
   |                      |             | Object is provided, the      |
   |                      |             | Content-Type of the request  |
   |                      |             | payload will be              |
   |                      |             | "application/json" unless a  |
   |                      |             | specific value for the       |
   |                      |             | Content-Type header is       |
   |                      |             | provided within the          |
   |                      |             | "headers" property. If not   |
   |                      |             | specified, the value         |
   |                      |             | defaults to null, indicating |
   |                      |             | that no payload is to be     |
   |                      |             | sent.                        |
   | refresh_interval     | Number      | Explicitly sets the numer of |
   |                      | (non-       | seconds content will be      |
   |                      | negative    | cached by the container as   |
   |                      | integer)    | specified by Section 3.2.    |
   | sign_owner           | Boolean     | When the "authz" parameter   |
   |                      |             | equals either "SIGNED" or    |
   |                      |             | "OAUTH", the "sign_owner"    |
   |                      |             | parameter indicates whether  |
   |                      |             | the container SHOULD include |
   |                      |             | the identity of the Instance |
   |                      |             | Owner (Section 1.3) when     |
   |                      |             | signing the request. The     |
   |                      |             | value is specified as a      |
   |                      |             | Boolean. When not specified, |
   |                      |             | the default value is assumed |
   |                      |             | to be False.                 |
   | sign_viewer          | Boolean     | When the "authz" parameter   |
   |                      |             | equals either "SIGNED" or    |
   |                      |             | "OAUTH", the "sign_viewer"   |
   |                      |             | parameter indicates whether  |
   |                      |             | the container SHOULD include |
   |                      |             | the identity of the current  |
   |                      |             | Viewer when signing the      |
   |                      |             | request. The value is        |
   |                      |             | specified as a Boolean. When |
   |                      |             | not specified, the default   |
   |                      |             | value is assumed to be       |
   |                      |             | False.                       |
   +----------------------+-------------+------------------------------+

4.2.10.1.4.2.  Processing osapi.http Requests

   The container is responsible for processing all "osapi.http" request
   objects in much the same way requests are processed using the
   "gadgets.io.makeRequest" API.




(surname)               Expires October 31, 2012              [Page 178]

Internet-Draft                Core-Gadget                       May 2012


   If the "authz" property on the HTTP Request Parameters Object passed
   in when the request object was created specifies any value other than
   "NONE", the container is required to apply the appropriate
   authentication mechanism to the request in exactly the same fashion
   described for the "gadgets.io.makeRequest" method.

   Upon completion of the HTTP request, the container shall create an
   HTTP Response Object (Section 4.2.10.1.4.3) which with either be
   passed as a parameter to the callback function provided when invoking
   the request object's "execute" method, or added to the batch response
   object is the HTTP request object is being executed as part of a
   "osapi.BatchRequest".

   When preparing the HTTP Response Object, the container will check the
   valid of the "format" property provided in the HTTP Request
   Parameters Object.  If the value is unspecified or equals the literal
   String "json", the container will attempt to parse any content
   returned within the HTTP Response as if it were an "application/json"
   response.  If the the parse succeeds, the container will included the
   parsed JSON structure within the HTTP Response Object.  If the parse
   fails, only the raw content of the HTTP Response message, encoded as
   character data, will be included in the HTTP Response Object.

   For example, suppose that an application wishes to retrieve a JSON
   document located at http://example.org/latest-photos.  For the sake
   of the example, the JSON document has the following structure:

   {
     photos : [ "http://www.somephotosite.com/photos/1.jpg",
                "http://www.somephotosite.com/photos/2.jpg",
                "http://www.somephotosite.com/photos/3.jpg",
              ],
     lastUpdate : "Mon, 13 Apr 2009 23:17:04 GMT"
   }

   This document can be retrieved using the "osapi.http.get" method
   which, by default, will parse the returned JSON and make it available
   directly from the HTTP Response Object:

   osapi.http.get({"href":"http://example.org/latest-photos"})
     .execute(
       function(response) {
         if (!response.error) {
           alert("There are " + response.content.photos.length + " new photos");
         }
       }
     );

   The container MAY choose to provide cached responses in response to
   an "osapi.http" Request as specified by Section 3.2.




(surname)               Expires October 31, 2012              [Page 179]

Internet-Draft                Core-Gadget                       May 2012


   When an error occurs during the processing of an HTTP request, or
   when the HTTP Response uses a status code that indicates an error
   condition (4xx or 5xx), the HTTP Response Object passed to the
   callback function will contain a single "error" property whose value
   is an Error Object [core-api] describing the specific error that
   occurred.

4.2.10.1.4.3.  The HTTP Response Object

   The HTTP Response Object is a JavaScript object whose properties
   provide details about the HTTP Response received when processing an
   "osapi.http" request object.

   TODO: Need to define the properties

4.2.11.  The PubSub Feature

   The inter-application eventing feature, common known as "pub/sub",
   provides for loosely-coupled and asynchronous inter-application
   communication based on the OpenAjax Hub 2.0 [8] specification.

   The "pub/sub" feature provides:

   o  An event hub, provided by the container and fully compliant with
      OpenAjax Hub 2.0, that manages the subscription and publication of
      events,

   o  Methods for publishing and subscribing to events, and

   o  Mechanisms for declaratively specifying metadata within a
      application's XML definition relevant to publishing and
      subscribing to events.

   The process is straightforward:

   o  First, a container that supports the "pub/sub" feature needs to
      initialize the Hub and all default settings.

   o  Second, a container can bootstrap and simplify the connection of
      an application to the hub by registering an onLoad handler using
      the gadgets.util.registerOnLoadHandler API.

   o  Third, once the Hub is initialized by the container, individual
      applications that declare support for the "pubsub-2" feature using
      either the "Optional" or "Required" tag within the Gadget
      specifications "ModulePrefs" can use the provided JavaScript APIs
      to publish events to the hub using "topics", or use the JavaScript
      APIs to subscribe to "topics" published by the Hub.  When an
      application publishes an event to the Hub using a specific topic,
      all application's connected to that Hub and subscribed to the same
      topic will receive a copy of the event.



(surname)               Expires October 31, 2012              [Page 180]

Internet-Draft                Core-Gadget                       May 2012


   A "topic" is a String value that conforms to the OpenAjax Hub 2.0
   specification's Topic Name Rules [OAHub2.0].  All topic names
   prefixed with "org.opensocial."  are reserved for use by the
   OpenSocial specification.  Developers MUST NOT use the
   "org.opensocial."  prefix when defining their own topics.

   Note that topic names are case-sensitive such that "org.example.foo"
   is not equivalent to "org.example.Foo".

4.2.11.1.  Initializing the Hub within the Container

   The following non-normative example illustrates how a container can
   provide support for this feature.

   First, establish default values:

     // Create a pubsub settings object
     gadgets.HubSettings = {};
   
     // Set default HubClient constructor params object
     gadgets.HubSettings.params = {
      HubClient: {
         onSecurityAlert: function( alertSource, alertType ) {
           alert( "Gadget stopped attempted security breach: " + alertType );
           window.location.href = "about:blank"; // Forces container to see Frame Phish alert and probably close this application
         },
         scope: gadgetInstance
       } };
   
     // Set default onComplete function for HubClient.connect
     gadgets.HubSettings.onConnected = function( hub, suc, err ) { };

   Next, register an onLoad handler to create the HubClient and connect
   it to the ManagedHub.  Delaying the HubClient creation and connection
   allows the application to override default values stored in
   gadgets.HubSettings.  For example, IframeHubClient supports params
   properties such as seed, tokenLength and log, which are not set by
   default; and an application might need to override onSecurityAlert
   and/or scope, for which default values are provided.  More
   importantly, the onComplete function for HubClient.connect usually
   sets up the application's subscriptions by calling
   gadgets.Hub.subscribe, or if the connection fails asynchronously, the
   onComplete function handles the error.











(surname)               Expires October 31, 2012              [Page 181]

Internet-Draft                Core-Gadget                       May 2012


     // Register an onLoad handler
     gadgets.util.registerOnLoadHandler( function() {
       try {
         // Create the HubClient.
         gadgets.Hub = new OpenAjax.hub.IframeHubClient(  gadgets.HubSettings.params ) ;
   
         // Connect to the ManagedHub
         gadgets.Hub.connect( gadgets.HubSettings.onConnect );
   
       } catch(e) {
         // ...
       }
     } );

4.2.11.2.  Examples

   The following illustrates a non-normative example of an application
   that subscribes to a topic published by the Hub.

   Note that, by default, all of the necessary defaults parameters on
   the underlying HubClient connected for the application were
   initialized when the application was loaded.  If the developer wishes
   to override the default parameters to the HubClient constructor, it
   can do so by setting values on gadgets.HubSettings as illustrated in
   the example.





























(surname)               Expires October 31, 2012              [Page 182]

Internet-Draft                Core-Gadget                       May 2012


     <Module>
       <ModulePrefs title="Sample PubSub Subscriber" height="250">
         <Require feature="pubsub-2">
           <Param name="topics"><![CDATA[
             <Topic title="Random Number"
               name="org.apache.shindig.random-number"
               description="Subscribes to random number generator."
               type="number"
               subscribe="true"/>
             ]]></Param>
         </Require>
       </ModulePrefs>
       <Content type="html"><![CDATA[
         <script>
     var subId;
   
     // Example of setting a parameter to the HubClient used by pubsub-2 feature.
     gadgets.HubSettings.params.HubClient.onSecurityAlert = function(alertSource, alertType) {
       alert("SECURITY ERROR!");
       window.location.href = "about:blank";
     };
   
     function callback(topic, data, subscriberData) {
       document.getElementById("output").innerHTML =
         "message : " + gadgets.util.escapeString(data + "") + "<br/>" +
         "received at: " + (new Date()).toString();
     }
   
     function subscribe() {
       subId = gadgets.Hub.subscribe("org.apache.shindig.random-number", callback);
     }
   
     function unsubscribe() {
       gadgets.Hub.unsubscribe(subId);
       document.getElementById("output").innerHTML = "";
     }
         </script>
         <div>
           <input type="button" value="Subscribe" onclick="subscribe()"/>
           <input type="button" value="Unsubscribe" onclick="unsubscribe()"/>
         </div>
         <div id="output"></div>
       ]]></Content>
     </Module>

   Similarly, below is a non-normative example of an application that
   publishes events to the Hub:







(surname)               Expires October 31, 2012              [Page 183]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs title="Sample PubSub Publisher" height="250">
       <Require feature="pubsub-2">
         <Param name="topics">
           <![CDATA[
             <Topic title="Random Number"
               name="org.apache.shindig.random-number"
               description="Publishes a random number."
               type="number"
               publish="true" />
         ]]></Param>
       </Require>
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
   function publish() {
     var message = Math.random();
     gadgets.Hub.publish("org.apache.shindig.random-number", message);
     document.getElementById("output").innerHTML = message;
   }
       </script>
       <div>
         <input type="button" value="Publish a random number" onclick="publish()"/>
       </div>
       <div id="output"></div>
     ]]></Content>
   </Module>

4.2.11.3.  JavaScript API

4.2.11.3.1.  The gadgets.Hub Object

   The "gadgets.Hub" object is a fully compliant Hub as defined by the
   OpenAjax Hub 2.0 specification.  When the specification document
   specifies a dependency on the "pubsub-2" feature, an instance of the
   Hub is created automatically by the container and provided to the
   application.

4.2.11.3.1.1.  gadgets.Hub.publish

   The "gadgets.Hub.publish" method is used to publish a message to a
   specific topic managed by the Hub.

   <static> <Void> gadgets.Hub.publish(topic, payload)

   Input Parameters:








(surname)               Expires October 31, 2012              [Page 184]

Internet-Draft                Core-Gadget                       May 2012


   +----------+-------------+------------------------------------------+
   | Name     | Type        | Description                              |
   +----------+-------------+------------------------------------------+
   | topic    | String      | A string identifying the topic,          |
   |          |             | conforming to the OpenAjax Hub Topic     |
   |          |             | Naming Rules. Topic wildcard values      |
   |          |             | (e.g. "*") are NOT permitted.            |
   | payload  | JSON Object | The data that is being published. This   |
   |          | or          | can be be any object serializable as     |
   |          | Primitive   | JSON or a JavaScript primitive such as a |
   |          |             | String, number, boolean or null. Copies  |
   |          |             | of this data will be delivered, by-      |
   |          |             | value, to all subscribers to the named   |
   |          |             | topic.                                   |
   +----------+-------------+------------------------------------------+

   The "publish" method is anonymous.  That is, the method does not
   automatically include any information identifying the source of the
   message.

   For example,

   var message = {
     "id":"http://example.org/foo/bar",
     "title": "My Example"
   };
   gadgets.Hub.publish("org.example.my.object", message);

   See the OpenAjax Hub 2.0 documentation [9] for more information.

4.2.11.3.1.2.  gadgets.Hub.subscribe

   The "gadgets.Hub.subscribe" method is used to register interest in
   receiving messages published to a specific topic.  When a message is
   published, the Hub will invoke all of the callback methods registered
   for the topic.

   The subscribe method will return a unique subscription identifier
   that can be used to subsequently unsubscribe from the topic.

   <static> <String> gadgets.Hub.subscribe(topic, callback [,scope [,onCompleteCallback [,subscriberData]]])

   Input Parameters:











(surname)               Expires October 31, 2012              [Page 185]

Internet-Draft                Core-Gadget                       May 2012


   +----------------------+-----------+--------------------------------+
   | Name                 | Type      | Description                    |
   +----------------------+-----------+--------------------------------+
   | topic                | String    | A string identifying the       |
   |                      |           | topic, conforming to the       |
   |                      |           | OpenAjax Topic Naming Rules.   |
   |                      |           | Wildcards (e.g. "*") MAY be    |
   |                      |           | used in order to subscribe to  |
   |                      |           | multiple topics in a single    |
   |                      |           | subscription request.          |
   | callback             | Function  | A callback function that is    |
   |                      |           | invoked when a message is      |
   |                      |           | published to the topic.        |
   | scope                | object    | When the callback or           |
   |                      |           | onCompleteCallback functions   |
   |                      |           | are invoked, the JavaScript    |
   |                      |           | "this" keyword refers to this  |
   |                      |           | scope object. If no scope is   |
   |                      |           | provided, default is window.   |
   | onCompleteCallback   | Function  | A callback function that is    |
   |                      |           | invoked to tell the client     |
   |                      |           | application whether the        |
   |                      |           | subscribe operation succeeded  |
   |                      |           | or failed.                     |
   | subscriberData       | JSON      | Arbitrary, subscriber provided |
   |                      | Object    | data that is returned back to  |
   |                      |           | the client application in the  |
   |                      |           | subscriberData parameter of    |
   |                      |           | the callback function.         |
   +----------------------+-----------+--------------------------------+

   The method returns an opaque subscription identifier.  This
   identifier is an arbitrary, unique ID string that is used to
   unsubscribe from the topic.

   For example,

     callback = new Function(topic, data, subscriberData) {
       //...
     }
   
     subId = gadgets.Hub.subscribe("org.example.my.object", callback);

   See&#65533; the OpenAjax Hub documentation [10]&#65533; for more
   information

4.2.11.3.1.3.  gadgets.Hub.unsubscribe

   The "gadgets.Hub.unsubscribe" method is used to remove a subscription
   from the hub.  The identifier returned by the subscribe method is
   used to identify the subscription to be removed.  An exception is
   thrown if the referenced subscription does not exist.


(surname)               Expires October 31, 2012              [Page 186]

Internet-Draft                Core-Gadget                       May 2012


   <static> <Void> gadgets.Hub.unsubscribe(subscriptionId)

   Input Parameters:

   +--------------------+---------+------------------------------------+
   | Name               | Type    | Description                        |
   +--------------------+---------+------------------------------------+
   | subscriptionId     | String  | The subscriptionId is the opaque   |
   |                    |         | string that is returned from the   |
   |                    |         | subscribe(...) method.             |
   +--------------------+---------+------------------------------------+

   For example,

   gadgets.Hub.unsubscribe(subId);

   See the OpenAjax Hub documentation [11] for more information.

4.2.11.3.1.4.  Additional Methods

   The 'gadgets.Hub' object is an instance of the IframeHubClient as
   defined by the OpenAjax Hub specification and supports the additional
   methods defined for objects of that type.  Please refer to the
   OpenAjax Hub documentation [12] for more information.

4.2.11.4.  The <Topic> Element

   As illustrated by the previous example, the "pubsub-2" feature
   provides a means of allowing developers to declaratively describe the
   which topics an application utilizes directly within the feature
   declaration within the "ModulePrefs" element.

   For example:

   <Module>
     <ModulePrefs title="Sample PubSub Publisher" height="250">
       <Require feature="pubsub-2">
         <Param name="topics">
           <![CDATA[
             <Topic title="Random Number"
               name="org.apache.shindig.random-number"
               description="Publishes a random number."
               type="number"
               publish="true" />
         ]]></Param>
       </Require>
     </ModulePrefs>
     ...
   </Module>





(surname)               Expires October 31, 2012              [Page 187]

Internet-Draft                Core-Gadget                       May 2012


   When applications use the <Topic> element, containers are able to
   "wire" applications together either automatically or via a user
   interface that allows a user to connect applications that publish
   events to a given topic to applications that subscribe to those
   events.

   No XML namespace is defined for the <Topic> element.

   Topic = element Topic {
     attribute name { text },
     attribute type { text }?
     attribute title { text }?,
     attribute publish { "true" | "false" }?,
     attribute subscribe { "true" | "false" }?,
     attribute description { text }?,
     attribute aboutUrl { text }?,
     undefinedAttribute*
   }

   The <Topic> element has the following attributes:


































(surname)               Expires October 31, 2012              [Page 188]

Internet-Draft                Core-Gadget                       May 2012


   +-------------+----------+----------+-------------------------------+
   | Attribute   | Type     | Usage    | Description                   |
   +-------------+----------+----------+-------------------------------+
   | name        | String   | Required | The dot-delimited topic name, |
   |             |          |          | e.g.                          |
   |             |          |          | "org.example.randomNumber".   |
   |             |          |          | This name follows the rules   |
   |             |          |          | defined in the OpenAjax       |
   |             |          |          | Widget Metadata specification |
   |             |          |          | [13]. Expression Language     |
   |             |          |          | statements MAY be used within |
   |             |          |          | the value so long as the      |
   |             |          |          | resulting substitution        |
   |             |          |          | results in a properly         |
   |             |          |          | formatted topic name.         |
   | type        | String   | Optional | Type name for the event's     |
   |             |          |          | payload data. When not        |
   |             |          |          | specificed, any type will be  |
   |             |          |          | allowed. See Event Data Types |
   |             |          |          | (Section 4.2.11.4.1).         |
   | title       | String   | Optional | A human-readable descriptive  |
   |             |          |          | title for this topic. When    |
   |             |          |          | not specified, the value of   |
   |             |          |          | the "name" attribute will be  |
   |             |          |          | used.                         |
   | publish     | boolean  | Optional | Indicates if the application  |
   |             |          |          | publishes data to this topic. |
   |             |          |          | The default value is "false". |
   | subscribe   | boolean  | Optional | Indicates if the application  |
   |             |          |          | subscribes to data published  |
   |             |          |          | to this topic.  The default   |
   |             |          |          | value is "false".             |
   | description | String   | Optional | The textual description of    |
   |             |          |          | the application's publish or  |
   |             |          |          | subscribe endpoint. This can  |
   |             |          |          | be used as an indication of   |
   |             |          |          | the application's behavior.   |
   |             |          |          | Consider an application that  |
   |             |          |          | subscribes to a topic         |
   |             |          |          | "com.example.address".  The   |
   |             |          |          | description might read, "When |
   |             |          |          | this application receives an  |
   |             |          |          | event on the                  |
   |             |          |          | com.example.address topic, it |
   |             |          |          | displays mass transit options |
   |             |          |          | within 10km of the address    |
   |             |          |          | received as the event         |
   |             |          |          | payload."                     |
   | aboutUrl    | String   | Optional | A URL pointing to a resource  |
   |             |          |          | that provides more extensive  |
   |             |          |          | descriptive information than  |
   |             |          |          | can be provided in the        |
   |             |          |          | description attribute.        |

(surname)               Expires October 31, 2012              [Page 189]

Internet-Draft                Core-Gadget                       May 2012

   +-------------+----------+----------+-------------------------------+

4.2.11.4.1.  Event Data Types

   The OpenAjax Hub specification allows any data serializable as JSON
   to be published to any given topic.  Such data is inherently
   "untyped" and unstructured.

   For instance, it is possible -- albeit unlikely -- that code
   publishing data to a topic can include two entirely dissimilar values
   to the same topic:

   gadgets.Hub.publish("my.topic", {"foo":"bar"});
   gadgets.Hub.publish("my.topic", "my data");

   Subscribers to a topic need to be prepared to deal with such
   differences in payloads by inspecting received data to see what has
   been published.

   Container implementations MAY allow type information to be associated
   with the payloads published to a given Topic.  How such type
   information is specified when the data is published to a topic is
   undefined by this specification.

   A developer can use the "type" attribute on the <Topic> element to
   indicate the specific type of data it publishes to a topic or is
   interested in receiving.  Containers that support typing of payloads
   can use this information to more intelligently route data to
   interested subscribers.  For instance, one application might only be
   interested in receiving payloads of type "org.example.foo" from the
   topic "my.topic" while another might only want type "org.example.bar"
   payloads.

   If data types are supported, they MUST be identified using the
   following dot-delimited syntax and SHOULD conform to the "reverse
   DNS" naming convention (e.g.  "org.example.foo"):

   prefix = token *["." token] "."
   datatype = [prefix] token

   Any type other than those listed in the table below MUST have a
   prefix consisting of at least one token.  The prefix
   "org.opensocial."  is reserved for types defined by the OpenSocial
   specification (e.g.  "org.opensocial.Person").











(surname)               Expires October 31, 2012              [Page 190]

Internet-Draft                Core-Gadget                       May 2012


   +---------------+---------------------------------------------------+
   | Type Name     | Description                                       |
   +---------------+---------------------------------------------------+
   | string        | A JavaScript string                               |
   | number        | A JavaScript number                               |
   | boolean       | A JavaScript boolean                              |
   | array         | A JSON-serializable Array, e.g. [ 1, 1, 2, 3, 5,  |
   |               | 8 ]. The element type/s are not specified when    |
   |               | the generic "array" type is used.                 |
   | object        | A JSON-serializable Object, e.g. { foo: "bar",    |
   |               | baz: "boo" }. The specifics of the object are not |
   |               | specified when the generic "object" type is used. |
   | null          | A JavaScript null                                 |
   | length        | Any CSS length value (e.g. "3px")                 |
   | color         | Any CSS color value (e.g. "#00ff00")              |
   | id            | A string value that is used as a unique           |
   |               | identifier                                        |
   | class         | Zero or more CSS class names, separated by spaces |
   | style         | A string that could be used as value for a CSS    |
   |               | 'style' attribute                                 |
   | url           | An absolute URL value                             |
   | html          | A fragment of HTML markup                         |
   | countrycode   | An ISO 3166 Country Code                          |
   | languagecode  | An ISO 639-2 Language Code                        |
   | email         | A string that represents an e-mail address        |
   | person        | A string that holds a person's name               |
   | postalcode    | A string that represents a postal code            |
   | phone         | A string that represents a phone number           |
   | date          | A string that represents a date. MUST be          |
   |               | expressed using the "Date Time String Format"     |
   |               | defined in the                                    |
   |               | [http://www.ecmascript.org/docs/tc39-2009-043.pdf |
   |               | ECMAScript5 specification] using one of the date- |
   |               | only forms. For example: "2009-12-15"             |
   | time          | A string that represents a time of day. MUST be   |
   |               | expressed using the "Date Time String Format"     |
   |               | defined in the                                    |
   |               | [http://www.ecmascript.org/docs/tc39-2009-043.pdf |
   |               | ECMAScript5 specification] using one of the time- |
   |               | only forms. For example: "18:45:00Z" or           |
   |               | "10:26:24-05:00"                                  |
   | timestamp     | A string that represents a date and time of day.  |
   |               | MUST be expressed using the "Date Time String     |
   |               | Format" defined in the                            |
   |               | [http://www.ecmascript.org/docs/tc39-2009-043.pdf |
   |               | ECMAScript5 specification].  For example:         |
   |               | "2009-12-15:18:45.000Z"                           |
   | duration      | A string that represents a duration. MUST have    |
   |               | format "PYYYY-DDDThh:mm:ss.fff". For example,     |
   |               | "P0400-152T20:45:33.123" means "400 years, 152    |
   |               | days, 20 hours, 45 minutes, 33.123 seconds, while |
   |               | "P0003-000T01:56:22.000" means "3 years, 1 hour,  |
   |               | 56 minutes and 22.000 seconds." (Must use this    |

(surname)               Expires October 31, 2012              [Page 191]

Internet-Draft                Core-Gadget                       May 2012

   |               | one variant defined in the ISO 8601 standard).    |
   | *             | Asterisk, or missing type attribute, means "any   |
   |               | datatype"                                         |
   +---------------+---------------------------------------------------+

4.2.12.  The Security Policy Feature

   Gadget's often require the ability to perform potentially dangerous
   or sensitive operations or work with sensitive information.  Such
   application's SHOULD only be allowed to perform those operations if
   explicitly granted permission to do so by the container or the user.

   The Security Policy feature is used by an application to request
   permissions under which to run.  Specific permissions are requested
   with <Param> elements, with the "name" attribute on the Param element
   identifying the feature and the text content of the element providing
   any additional required feature-specific information.  The Security
   Policy feature is specified within the <ModulePrefs> with the feature
   name "security-policy" using either the <Optional> or <Require>
   element.  A container MAY support the Security Policy feature.

   Containers MAY override any requested permission with its own more
   restrictive security policy.  The container SHOULD NOT grant
   permissions to any application that are less restrictive than those
   explicitly requested by the application.

   An application requesting optional permissions from the container:

    <ModulePrefs >
      <Optional feature="security-policy" >
        <Param name="foo">bar</Param>
      </Optional >
    </ModulePrefs >

   If an application requests a security policy that is not supported,
   the container MUST log an error to the gadgets.log.  A container MAY
   render that application using a supported security policy, or display
   an appropriate error message.  TODO: Clarify this

   Containers are free to define their own permissions for any purpose.
   TODO: should we have a registry of common permissions???

4.2.13.  The Selection Feature

   It is common for an OpenSocial container to display multiple
   applications within a single display area.  Often, when a user
   performs some action in one view, another other displayed application
   needs to respond in some appropriate manner.  For instance, if the
   user selects a person in their contact list in one view, another view
   can be triggered to display the selected person's profile
   information, while another can display a listing of documents owned
   by that person.  In order to enable such functionality, the container
   needs to provide applications with a way of determining the currently
   selected object.

(surname)               Expires October 31, 2012              [Page 192]

Internet-Draft                Core-Gadget                       May 2012


   The Selection feature provides the ability to participate in the
   container's selection eventing.  It is enabled for an application by
   specifying feature="selection" within either a <Require> or
   <Optional> element within the <ModulePrefs>.

   Once the feature is enabled, the application can either get or set
   the current selection for the container.

   The example below illustrates how an application can set the current
   selection for the container:

   <Module>
     <ModulePrefs title="Sample Selection Changer" height="250">
       <Require feature="selection"/>
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         function setSelection(selection) {
           selection = [{type:'com.example.food', dataObject: selection}];
           gadgets.selection.setSelection(selection);
           document.getElementById("output").innerHTML = 'selection: '
            + gadgets.util.escapeString('' + gadgets.json.stringify(selection)) + '<br/>';
         }
       </script>
       <div>
         <input type="radio" name="group1" value="Milk" onclick="setSelection('Milk')"/> Milk<br>
         <input type="radio" name="group1" value="Butter" onclick="setSelection('Butter')"/> Butter<br>
         <input type="radio" name="group1" value="Cheese" onclick="setSelection('Cheese')"/> Cheese<br>
       </div>
       <div id="output"></div>
     ]]></Content>
   </Module>

   At any given time, a container only has one selected object that is
   visible to all applications for which selection is enabled.  Any
   application can access the currently selected object for the
   container by using either the "gadgets.selection.getSelection" method
   or by registering a callback function that the container will invoke
   whenever a new selection object is set.

4.2.13.1.  JavaScript API

   The following JavaScript methods are provided to applications when
   the "selection" feature is enabled.

4.2.13.1.1.  The Selection Object

   Selection Objects are simple JSON-serializable Objects that consist
   of two basic properties:





(surname)               Expires October 31, 2012              [Page 193]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+--------------+-------------------------------------+
   | Name         | Type         | Description                         |
   +--------------+--------------+-------------------------------------+
   | type         | String       | A required data type identifier as  |
   |              |              | defined in Section 4.2.11.4.1 that  |
   |              |              | specifies the kind of object that   |
   |              |              | has been selected.                  |
   | dataObject   | Object or    | Any valid JSON-serializable object  |
   |              | Primitive    | or JavaScript primitive that        |
   |              |              | represents the selected data.       |
   +--------------+--------------+-------------------------------------+

   The current selection for a container will consist of an array of
   zero or more individual Selection Objects, each of which MAY specify
   a different type value.  For example:

   For example:

   var selection = [
     {"type": "org.example.food", "dataObject": "Cheese"},
     {"type": "org.example.drink", "dataObject": "Wine"}
   ]
   gadgets.selection.setSelection(selection);

4.2.13.1.2.  gadgets.selection.setSelection

   The "gadgets.selection.setSelection" method sets the current
   selection for the container, replacing the current selection.

   <Static> <Void> gadgets.selection.setSelection (selection)

   Input Parameters:

   +---------------+-------------------+-------------------------------+
   | Name          | Type              | Description                   |
   +---------------+-------------------+-------------------------------+
   | selection     | Selection         | An array of zero or more      |
   |               | Objects[]         | Selection objects.            |
   +---------------+-------------------+-------------------------------+

   No return value is specified.

   Calling the "gadgets.selection.setSelection" method will trigger the
   container to send notifications to all applications that have
   registered selection listener callback functions.

4.2.13.1.3.  gadgets.selection.getSelection

   The "gadgets.selection.getSelection" method returns the current
   selection for the container.  The method takes no input parameters
   and returns an array of Selection objects.

   <static> <Selection Object[]> gadgets.selection.getSelection()

(surname)               Expires October 31, 2012              [Page 194]

Internet-Draft                Core-Gadget                       May 2012


4.2.13.1.4.  gadgets.selection.addListener

   The "gadgets.selection.addListener" method registers a callback
   function that the container will use to notify the container of
   changes in the current selection.

   <static> <Void> gadgets.selection.addListener(event, callback)

   Input Parameters:

   +------------+------------+-----------------------------------------+
   | Name       | Type       | Description                             |
   +------------+------------+-----------------------------------------+
   | event      | String     | The type of selection event (currently  |
   |            |            | unused). Valid values are "selection",  |
   |            |            | "preselection", "postselection" or      |
   |            |            | null.                                   |
   | callback   | Function   | The callback function that is called    |
   |            |            | for the specified selection event.      |
   +------------+------------+-----------------------------------------+

   Note that, currently, the "event" parameter is unused.

   No return value is specified.

4.2.13.1.5.  removeListener

   The "gadgets.selection.removeListener" method unregisters a selection
   callback function.

   <static> <Void> gadgets.selection.removeListener(event, callback)

   Input Parameters:

   +------------+------------+-----------------------------------------+
   | Name       | Type       | Description                             |
   +------------+------------+-----------------------------------------+
   | event      | String     | The type of selection event (currently  |
   |            |            | unused). Valid values are "selection",  |
   |            |            | "preselection", "postselection" or      |
   |            |            | null.                                   |
   | callback   | Function   | The callback function to be             |
   |            |            | unregistered.                           |
   +------------+------------+-----------------------------------------+

   Note that, currently, the "event" parameter is unused.

   No return value is specified.

4.2.14.  The View Features




(surname)               Expires October 31, 2012              [Page 195]

Internet-Draft                Core-Gadget                       May 2012


   The View Features provide operations for interacting with the
   collection of Views provided by a specification document.  There are
   two distinct View-related features, each of which are enabled for an
   application instance by specifying their respective feature
   identifiers using either the <Require> or <Optional> elements within
   the <ModulePrefs>

4.2.14.1.  The "views" Feature

   The "views" feature provides the basic operations for accessing
   information about and changing the current View being rendered.

   <Module>
     <ModulePrefs>
       <Require feature="views"/>
     </ModulePrefs>
     ...
   </Module>

4.2.14.1.1.  JavaScript API

   Once enabled, the "views" feature provides the following objects a
   methods:

4.2.14.1.1.1.  The gadgets.views.ViewType Constants

   For the convenience of Gadget developers, JavaScript aliases for the
   handful of common View names defined in Section 2.2.12.1 have been
   defined.

          +-------------+------------------------------------+
          | View Name   | Alias                              |
          +-------------+------------------------------------+
          | about       | gadgets.views.ViewType.ABOUT       |
          | canvas      | gadgets.views.ViewType.CANVAS      |
          | embedded    | gadgets.views.ViewType.EMBEDDED    |
          | home        | gadgets.views.ViewType.HOME        |
          | preferences | gadgets.views.ViewType.PREFERENCES |
          | preview     | gadgets.views.ViewType.PREVIEW     |
          | profile     | gadgets.views.ViewType.PROFILE     |
          | support     | gadgets.views.ViewType.SUPPORT     |
          +-------------+------------------------------------+

4.2.14.1.1.2.  View Targets

   View targets are specific areas defined by a container where the
   views of an application can be rendered.  The specific targets
   supported are specific to each individual implementation.  At a
   minimum, containers SHOULD support the following targets:





(surname)               Expires October 31, 2012              [Page 196]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+------------------------------------+---------------+
   | View Target  | Alias                              | Description   |
   +--------------+------------------------------------+---------------+
   | TAB          | gadgets.views.ViewType.TAB         | When          |
   |              |                                    | containers    |
   |              |                                    | support the   |
   |              |                                    | ability to    |
   |              |                                    | display       |
   |              |                                    | content using |
   |              |                                    | a tabbed      |
   |              |                                    | interface     |
   |              |                                    | (similar to   |
   |              |                                    | those used by |
   |              |                                    | modern Web    |
   |              |                                    | browser user  |
   |              |                                    | agents), the  |
   |              |                                    | "TAG" View    |
   |              |                                    | Target is     |
   |              |                                    | used to       |
   |              |                                    | request that  |
   |              |                                    | a particular  |
   |              |                                    | Application   |
   |              |                                    | View be       |
   |              |                                    | displayed     |
   |              |                                    | within it's   |
   |              |                                    | own separate  |
   |              |                                    | tab.          |
   | DIALOG       | gadgets.views.ViewType.DIALOG      | The "DIALOG"  |
   |              |                                    | View Target   |
   |              |                                    | is used to    |
   |              |                                    | request that  |
   |              |                                    | a particular  |
   |              |                                    | Application   |
   |              |                                    | View be       |
   |              |                                    | displayed     |
   |              |                                    | within a      |
   |              |                                    | popup up box  |
   |              |                                    | in a way that |
   |              |                                    | allows the    |
   |              |                                    | Viewer to     |
   |              |                                    | continue      |
   |              |                                    | interacting   |
   |              |                                    | with the rest |
   |              |                                    | of the        |
   |              |                                    | container.    |
   | MODALDIALOG  | gadgets.views.ViewType.MODALDIALOG | The           |
   |              |                                    | "MODALDIALOG" |
   |              |                                    | View Target   |
   |              |                                    | is used to    |
   |              |                                    | request that  |
   |              |                                    | a particular  |
   |              |                                    | Application   |
   |              |                                    | View be       |

(surname)               Expires October 31, 2012              [Page 197]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                    | displayed     |
   |              |                                    | within a      |
   |              |                                    | popup box in  |
   |              |                                    | a way that    |
   |              |                                    | requires the  |
   |              |                                    | Viewer to     |
   |              |                                    | interact with |
   |              |                                    | it prior to   |
   |              |                                    | continuing    |
   |              |                                    | any further   |
   |              |                                    | interaction   |
   |              |                                    | with the rest |
   |              |                                    | of the        |
   |              |                                    | container.    |
   | FLOAT        | gadgets.views.ViewType.FLOAT       | The "FLOAT"   |
   |              |                                    | View Target   |
   |              |                                    | is similar to |
   |              |                                    | the "DIALOG"  |
   |              |                                    | View Target   |
   |              |                                    | with the      |
   |              |                                    | exception     |
   |              |                                    | that, when    |
   |              |                                    | using         |
   |              |                                    | "FLOAT", the  |
   |              |                                    | container     |
   |              |                                    | SHOULD render |
   |              |                                    | the view      |
   |              |                                    | without       |
   |              |                                    | including any |
   |              |                                    | additional    |
   |              |                                    | User          |
   |              |                                    | Interface     |
   |              |                                    | elements      |
   |              |                                    | (also known   |
   |              |                                    | as "chrome"). |
   | SIDEBAR      | gadgets.views.ViewType.SIDEBAR     | Some          |
   |              |                                    | containers    |
   |              |                                    | can reserve a |
   |              |                                    | portion of    |
   |              |                                    | the visible   |
   |              |                                    | user          |
   |              |                                    | interface to  |
   |              |                                    | the right or  |
   |              |                                    | left of the   |
   |              |                                    | primary       |
   |              |                                    | content for   |
   |              |                                    | the display   |
   |              |                                    | of one or     |
   |              |                                    | more          |
   |              |                                    | application   |
   |              |                                    | views. The    |
   |              |                                    | "SIDEBAR"     |
   |              |                                    | View Target   |
   |              |                                    | can be used   |

(surname)               Expires October 31, 2012              [Page 198]

Internet-Draft                Core-Gadget                       May 2012

   |              |                                    | to request    |
   |              |                                    | that an       |
   |              |                                    | application   |
   |              |                                    | view be       |
   |              |                                    | rendered      |
   |              |                                    | within this   |
   |              |                                    | dedicated     |
   |              |                                    | space.        |
   +--------------+------------------------------------+---------------+

4.2.14.1.1.3.  The gadgets.views.View Object

   The "gadgets.views.View" object represents a View supported by an
   application.  Instances of the "gadgets.views.View" object are
   provided by the container

   The methods exposed by the object are:

4.2.14.1.1.3.1.  gadgets.views.View.getName

   The "gadgets.views.View.getName" method returns the name of the View
   object.  The method requires no input parameters.

   <String> <instance>.getName()

4.2.14.1.1.3.2.  gadgets.views.View.isOnlyVisibleGadget

   The "gadgets.views.View.isOnlyVisibleGadget" returns True if the
   application instance is the only application currently visibly
   displayed by the container.  No input parameters are specified.

   <Boolean> <instance>.isOnlyVisibleGadget()

4.2.14.1.1.4.  gadgets.views.getCurrentView

   The "gadgets.views.getCurrentView" returns a "gadgets.views.View"
   object representing the currently rendered View.  The method takes no
   input parameters.

   <static> <gadgets.views.View> gadgets.views.getCurrentView()

4.2.14.1.1.5.  gadgets.views.getParams

   The "gadgets.views.getParams" method returns the parameters provided
   when the request to render the current view was received.

   <static> <Object> gadgets.views.getParams()

   The method takes no input parameters and returns a JavaScript object
   whose properties represent each of the provided view parameters.

4.2.14.1.1.6.  gadgets.views.getSupportedViews



(surname)               Expires October 31, 2012              [Page 199]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.views.getSupportedViews" method returns a JavaScript
   object mapping all of the supported primary "gadgets.views.View"
   objects for an application to the view name.  Note that only primary
   views will be included, for instance, if the specification document
   defines views named "Canvas.About", "Profile.About", "Home.About",
   "Canvas.Help", etc, the returned views will be: "Canvas", "Home" and
   "Profile".

   <static> <Object> gadgets.views.getSupportedViews();

4.2.14.1.1.7.  gadgets.views.requestNavigateTo

   The "gadgets.views.requestNavigateTo" method is used to request that
   the container render a specific view.  If the container supports
   parameter passing, it will pass the optional parameters when
   rendering the new view.

   <static> <Void> gadgets.views.requestNavigateTo(view, opt_params, opt_ownerId)

   TODO: Finish this

4.2.14.2.  The "open-views" Feature

   The "open-views" feature provides additional methods for opening and
   closing views within a container.

   <Module>
     <ModulePrefs>
       <Require feature="open-views"/>
     </ModulePrefs>
     ...
   </Module>

4.2.14.2.1.  JavaScript API

   Enabling the "open-views" feature provides the following additional
   methods on the "gadgets.views" object.

   The "open-views" feature depends directly on the more basic
   functionality provided by the "views" feature; so by including "open-
   views" in a specification document using either the <Require> or
   <Optional> elements, the Objects and methods of the "views" feature
   are also made available.

4.2.14.2.1.1.  gadgets.views.openGadget

   The "gadgets.views.openGadget" method requests that a view be
   rendered by the container.

   <static> <Void> gadgets.views.openGadget(resultCallback, navigateCallback, opt_params)

   The method accepts three parameters as input.


(surname)               Expires October 31, 2012              [Page 200]

Internet-Draft                Core-Gadget                       May 2012


   +------------------+-----------+------------------------------------+
   | Name             | Type      | Description                        |
   +------------------+-----------+------------------------------------+
   | resultCallback   | Function  | Specifies a callback Function that |
   |                  |           | will be invoked by the container   |
   |                  |           | when the requested application has |
   |                  |           | been closed using the              |
   |                  |           | "gadgets.views.close" method. If   |
   |                  |           | the "gadgets.views.setReturnValue" |
   |                  |           | was called within the opened view, |
   |                  |           | then the value specified will be   |
   |                  |           | passed to the callback function as |
   |                  |           | a parameter.                       |
   | navigateCallback | Function  | Specifies a callback Function that |
   |                  |           | will be invoked by the container   |
   |                  |           | when the requested view has been   |
   |                  |           | rendered. The identifier the       |
   |                  |           | container assigns to the rendered  |
   |                  |           | view, along with any additional    |
   |                  |           | appropriate metadata will be       |
   |                  |           | passed to the function as          |
   |                  |           | parameters. The identifier can be  |
   |                  |           | used with the                      |
   |                  |           | "gadgets.views.close" method to    |
   |                  |           | subsequently close the opened      |
   |                  |           | view.                              |
   | opt_params       | Object    | Specifies optional parameters that |
   |                  |           | affect how the view is to be       |
   |                  |           | rendered.                          |
   +------------------+-----------+------------------------------------+

   No return value is specified for the method.

   The following optional items MAY be specified as properties on the
   "opt_params" parameter value:



















(surname)               Expires October 31, 2012              [Page 201]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+-----------------+----------------------------------+
   | Name         | Type            | Description                      |
   +--------------+-----------------+----------------------------------+
   | view         | String          | Identifies the specific view the |
   |              |                 | container is to render. If not   |
   |              |                 | provided, the container will     |
   |              |                 | render the default unnamed view. |
   | viewTarget   | String          | Identifies where and how the     |
   |              |                 | container is to render the view, |
   |              |                 | specified as a View Target       |
   |              |                 | (Section 4.2.14.1.1.2).  For     |
   |              |                 | example, specifying a viewTarget |
   |              |                 | of "MODALDIALOG" will cause the  |
   |              |                 | view to be rendered by the       |
   |              |                 | container in a modal popup       |
   |              |                 | dialog box; whereas specifying a |
   |              |                 | viewTarget of "tab" will cause   |
   |              |                 | the container to render the view |
   |              |                 | within a new container tab.      |
   | viewParams   | Object          | An arbitrary collection of view  |
   |              |                 | parameters to pass along to the  |
   |              |                 | view being rendered.             |
   | coordinates  | Coordinate      | When viewTarget equals "FLOAT",  |
   |              | Object (Section | the coordinates object MAY be    |
   |              | 4.2.14.2.1.7)   | used to provide suggested        |
   |              |                 | positioning information the      |
   |              |                 | container can use when deciding  |
   |              |                 | where, within the container, the |
   |              |                 | view is to be renderered         |
   |              |                 | relative to the opening          |
   |              |                 | application.                     |
   +--------------+-----------------+----------------------------------+

   For example, in the following sample, code running with the default
   view opens the view named "foo" in a modal dialog, passing along an
   arbitrary set of view parameters:


















(surname)               Expires October 31, 2012              [Page 202]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="open-views"/>
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         function bar() {
             gadgets.views.openGadget(
               function(result) {},
               function(id) {
                 // id is the identifier of the dialog box
               },
               {
                 viewTarget: "dialog",
                 view: "foo",
                 viewParams: {
                   "abc": "123",
                   "xyz": "foo"
                 }
               }
             );
         }
       </script>
         <a href="#" onclick="bar()">Open!</a>
     ]]></Content>
     <Content type="html" view="foo"><![CDATA[
       ...
     ]]></Content>
   </Module>

4.2.14.2.1.2.  gadgets.views.openEmbeddedExperience

   The "gadgets.views.openEmbeddedExperience" method requests that an
   embedded experience (Section 4.2.4) by rendered by the container.

   <static> <Void> gadgets.views.openEmbeddedExperience(resultCallback, navigateCallback, dataModel, opt_params)

   The method accepts four parameters as input.
















(surname)               Expires October 31, 2012              [Page 203]

Internet-Draft                Core-Gadget                       May 2012


   +------------------+-----------+------------------------------------+
   | Name             | Type      | Description                        |
   +------------------+-----------+------------------------------------+
   | resultCallback   | Function  | Specifies a callback Function that |
   |                  |           | will be invoked by the container   |
   |                  |           | when the specified view has been   |
   |                  |           | closed using the                   |
   |                  |           | "gadgets.views.close" method. If   |
   |                  |           | the "gadgets.views.setReturnValue" |
   |                  |           | was called within the opened view, |
   |                  |           | then the value specified will be   |
   |                  |           | passed to the callback function as |
   |                  |           | a parameter.                       |
   | navigateCallback | Function  | Specifies a callback Function that |
   |                  |           | will be invoked by the container   |
   |                  |           | when the requested view has been   |
   |                  |           | rendered. The identifier the       |
   |                  |           | container assigns to the rendered  |
   |                  |           | view, along with any additional    |
   |                  |           | appropriate metadata will be       |
   |                  |           | passed to the function as          |
   |                  |           | parameters. The identifier can be  |
   |                  |           | used with the                      |
   |                  |           | "gadgets.views.close" method to    |
   |                  |           | subsequently close the opened      |
   |                  |           | view.                              |
   | dataModel        | TODO:     | Specifies the Embedded Experiences |
   |                  |           | Data model to use when rendering.  |
   |                  |           | The model is passed in as a        |
   |                  |           | JavaScript object conforming to    |
   |                  |           | the JSON embedded experiences      |
   |                  |           | format as defined in Section       |
   |                  |           | 4.2.4.                             |
   | opt_params       | Object    | Specifies optional parameters that |
   |                  |           | affect how the view is to be       |
   |                  |           | rendered.                          |
   +------------------+-----------+------------------------------------+

   No return value is specified for the method.

   The following optional items MAY be specified as properties on the
   "opt_params" parameter value:












(surname)               Expires October 31, 2012              [Page 204]

Internet-Draft                Core-Gadget                       May 2012


   +--------------+-----------------+----------------------------------+
   | Name         | Type            | Description                      |
   +--------------+-----------------+----------------------------------+
   | view         | String          | Identifies the specific view the |
   |              |                 | container is to render. If not   |
   |              |                 | provided, the container will     |
   |              |                 | render the default unnamed view. |
   | viewTarget   | String          | Identifies where and how the     |
   |              |                 | container is to render the view, |
   |              |                 | specified as a View Target       |
   |              |                 | (Section 4.2.14.1.1.2).  For     |
   |              |                 | example, specifying a viewTarget |
   |              |                 | of "modalDialog" will cause the  |
   |              |                 | view to be rendered by the       |
   |              |                 | container in a modal popup       |
   |              |                 | dialog box; whereas specifying a |
   |              |                 | viewTarget of "tab" will cause   |
   |              |                 | the container to render the view |
   |              |                 | within a new container tab.      |
   | viewParams   | Object          | An arbitrary collection of view  |
   |              |                 | parameters to pass along to the  |
   |              |                 | view being rendered.             |
   | coordinates  | Coordinate      | When viewTarget equals "FLOAT",  |
   |              | Object (Section | the coordinates object MAY be    |
   |              | 4.2.14.2.1.7)   | used to provide suggested        |
   |              |                 | positioning information the      |
   |              |                 | container can use when deciding  |
   |              |                 | where, within the container, the |
   |              |                 | view is to be renderered         |
   |              |                 | relative to the opening view.    |
   +--------------+-----------------+----------------------------------+

   For example, in the following sample, code running with the default
   view opens a URL as an embedded experience:




















(surname)               Expires October 31, 2012              [Page 205]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="open-views"/>
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         function bar() {
             gadgets.views.openEmbeddedExperience(
               function(result) {},
               function(id) {
                 // id is the identifier of the dialog box
               },
               {
                 "url" : "http://example.org/foo.html"
               }
             );
         }
       </script>
         <a href="#" onclick="bar()">Open!</a>
     ]]></Content>
   </Module>

   TODO: This only works when EE container has been properly
   initialized...

4.2.14.2.1.3.  gadgets.views.openUrl

   The "gadgets.views.openUrl" method requests that a URL be opened and
   rendered by the container.

   <static> <Void> gadgets.views.openUrl(url, navigateCallback, opt_viewTarget)

   The method accepts three parameters as input:





















(surname)               Expires October 31, 2012              [Page 206]

Internet-Draft                Core-Gadget                       May 2012


   +------------------+----------+-------------------------------------+
   | Name             | Type     | Description                         |
   +------------------+----------+-------------------------------------+
   | url              | String   | The URL of the web page whose       |
   |                  |          | content will be displayed.          |
   | navigateCallback | Function | Specifies a callback Function that  |
   |                  |          | will be invoked by the container    |
   |                  |          | when the requested view has been    |
   |                  |          | rendered. The identifier the        |
   |                  |          | container assigns to the rendered   |
   |                  |          | view, along with any additional     |
   |                  |          | appropriate metadata will be passed |
   |                  |          | to the function as parameters. The  |
   |                  |          | identifier can be used with the     |
   |                  |          | "gadgets.views.close" method to     |
   |                  |          | subsequently close the opened view. |
   | opt_viewTarget   | String   | Optionally identifies where and how |
   |                  |          | the container is to render the      |
   |                  |          | view, specified as a View Target    |
   |                  |          | (Section 4.2.14.1.1.2).  For        |
   |                  |          | example, specifying a viewTarget of |
   |                  |          | "modalDialog" will cause the URL to |
   |                  |          | be rendered by the container within |
   |                  |          | a modal popup dialog box; whereas   |
   |                  |          | specifying a viewTarget of "tab"    |
   |                  |          | will cause the container to render  |
   |                  |          | the URL within a new container tab. |
   +------------------+----------+-------------------------------------+

   For example:

   <Module>
     <ModulePrefs>
       <Require feature="open-views"/>
       <Require feature="embedded-experiences" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         function bar() {
             gadgets.views.openUrl(
               "http://example.org/foo.html",
               function(id) {
                 // id is the identifier of the dialog box
               },
               "modaldialog"
             );
         }
       </script>
         <a href="#" onclick="bar()">Open!</a>
     ]]></Content>
   </Module>

4.2.14.2.1.4.  gadgets.views.close

(surname)               Expires October 31, 2012              [Page 207]

Internet-Draft                Core-Gadget                       May 2012


   The "gadgets.views.close" method requests that a given view be
   closed.

   <static> <Void> gadgets.views.close(opt_site_handler)

   Parameters:

   +--------------------+--------+-------------------------------------+
   | Name               | Type   | Description                         |
   +--------------------+--------+-------------------------------------+
   | opt_site_handler   | Object | Optional parameter which specifies  |
   |                    |        | handler to what site to close. If   |
   |                    |        | null or unspecified, it will close  |
   |                    |        | the view within which the call to   |
   |                    |        | "gadgets.views.close" was made.     |
   +--------------------+--------+-------------------------------------+

4.2.14.2.1.5.  gadgets.views.setReturnValue

   Often, code running within one view will require the ability to
   programmatically open a second view for the purpose of collecting
   input from the user.  In such cases, the
   "gadgets.views.setReturnValue" method can be used within the code of
   the second opened view to specify the data that is to be returned to
   the first.

   <static> <Void> gadgets.views.setReturnValue(returnValue)

   The method takes either a JavaScript primitive value, a JSON-
   serializable Object, or an Array of primitives or JSON-serializable
   Objects as an input parameter.  No return value is specified for the
   method.

   For example, in the following instance, code running within the
   default view opens a view named "foo" within a modal dialog and
   awaits a response.  The value set using the
   "gadgets.views.setReturnValue" method is passed to the calling view
   via a callback function provided to the "gadgets.views.openGadget"
   method:















(surname)               Expires October 31, 2012              [Page 208]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="open-views"/>
     </ModulePrefs>
     <Content type="html"><![CDATA[
       <script>
         function bar() {
             gadgets.views.openGadget(
               function(returnValue) {
                 alert(returnValue);
               },
               function() {},
               {
                 viewTarget: "dialog",
                 view: "foo"
               }
             );
         }
       </script>
         <a href="#" onclick="bar()">Open!</a>
     ]]></Content>
     <Content type="html" view="foo"><![CDATA[
       <script>
         function foo() {
           gadgets.views.setReturnValue({"a":"b"});
           gadgets.views.close();
         }
       </script>
       <a href="#" onclick="foo()">Close</a>
     ]]></Content>
   </Module>

4.2.14.2.1.6.  gadgets.window.getContainerDimensions

   The "gadgets.window.getContainerDimensions" method detects the height
   and width of the container displaying the view and passes those to a
   provided callback function.

   <static> <Void> gadgets.window.getContainerDimensions(resultCallback)

   The method accepts as input a single Function object that will be
   invoked with a single JavaScript object parameter.  The object will
   contain "height" and "width" properties whose numeric values specify
   the vertical and horizontal dimensions, in pixels, of the container.

4.2.14.2.1.7.  The Coordinates Object

   When using the "gadgets.views.openGadget",
   "gadgets.views.openEmbeddedExperience", or "gadgets.views.openUrl"
   methods, developers can use the "opt_params" input parameter to
   provide the container with information about how and where the
   gadget, Embedded Experience or URL content is to be rendered.


(surname)               Expires October 31, 2012              [Page 209]

Internet-Draft                Core-Gadget                       May 2012


   Within the "opt_params" object, when the "viewTarget" property is
   equal to the literal value "FLOAT", an additional optional
   "coordinates" property can be specified to provide the specific
   preferred coordinates at which the floating content is to be
   positioned.  The value of the "coordinates" property is a JavaScript
   object with the following four properties:

   +----------+--------+-----------------------------------------------+
   | Name     | Type   | Description                                   |
   +----------+--------+-----------------------------------------------+
   | top      | Number | Specifies the suggested absolute top          |
   |          |        | position, in pixels, of the rendered content  |
   |          |        | relative to the top position of the opening   |
   |          |        | view. If "top" is specified, the "bottom"     |
   |          |        | property MUST NOT be specified.               |
   | bottom   | Number | Specifies the suggested absolute bottom       |
   |          |        | position, in pixels, of the rendered content  |
   |          |        | relative to the bottom position of the        |
   |          |        | opening view. If "bottom" is specified, the   |
   |          |        | "top" property MUST NOT be specified.         |
   | left     | Number | Specifies the suggested absolute left         |
   |          |        | position, in pixels, of the rendered content  |
   |          |        | relative to the bottom position of the        |
   |          |        | opening view. If "left" is specified, the     |
   |          |        | "right" property MUST NOT be specified.       |
   | right    | Number | Specifies the suggested absolute right        |
   |          |        | position, in pixels, of the rendered content  |
   |          |        | relative to the right position of the opening |
   |          |        | view. If "right" is specified, the "left"     |
   |          |        | property MUST NOT be specified.               |
   +----------+--------+-----------------------------------------------+

   Support for the "coordinates" property is only defined when the
   "viewTarget" property is equal to "FLOAT".

   For example:

   gadgets.views.openGadget(
     function(response) {},
     function(id) {},
     {
       "view": "foo",
       "viewTarget": "FLOAT",
       "coordinates": {
         "top": 10,
         "left": 20
       }
     }
   );

4.2.15.  The Window Features



(surname)               Expires October 31, 2012              [Page 210]

Internet-Draft                Core-Gadget                       May 2012


   Window features are a range of additional capabilities that can be
   enabled for an application for getting information about and
   modifying the display area for a view.

4.2.15.1.  The "settitle" Feature

   The "settitle" feature allows an application to modify the displayed
   title the container uses for the application instance.  Whether or
   not the title is displayed is up to the container.

   The "settitle" feature is enabled by specifying feature="settitle"
   within either the <Require> or <Optional> element within the
   <ModulePrefs>.

   <Module>
     <ModulePrefs>
       <Require feature="settitle" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       gadgets.util.registerOnLoadHandler(
         function() {
           gadgets.window.setTitle("New Title");
         }
       );
     ]]></Content>
   </Module>

   When the "settitle" feature is enabled for an application the
   "gadgets.window.setTitle" method is provided:

   <static> >Void> gadgets.window.setTitle(title)

   The method takes a single String input parameter providing the text
   to display as the title.  No return value is specified.

4.2.15.2.  The "dynamic-height" Feature

   The "dynamic-height" feature allows an application to request that
   the container dynamically change the vertical display area allocated
   to the view based on either the current content of the rendered View
   or an optionally provided numeric value that specifies the preferred
   height in pixels.

   The "dynamic-height" feature is enable by specifying feature
   ="dynamic-height" within either the <Require> or <Optional> element
   within the <ModulePrefs>.








(surname)               Expires October 31, 2012              [Page 211]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="dynamic-height" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       gadgets.util.registerOnLoadHandler(
         function() {
           for (var n = 0; n < 100; n++) {
             document.write("foo " + n + "<br />");
           }
           gadgets.window.adjustWidth();
         }
       );
     ]]></Content>
   </Module>

   When the "dynamic-height" feature is enabled for an application, both
   the "gadgets.window.getViewportDimensions" and
   "gadgets.window.adjustHeight" methods are provided:

   <static> <Void> gadgets.window.adjustHeight(opt_height)

   The method takes as input one optional numeric parameter that
   specifies the preferred height, in pixels, the application would like
   the container to allocate for the view.  The container is free to
   ignore the provided value.  If not specified, the container will
   calculate an appropriate height for the view based on the content
   currently displayed within the rendered view.

4.2.15.3.  The "dynamic-width" Feature

   The "dynamic-width" feature allows an application to request that the
   container dynamically change the horizontal display area allocated to
   the view based on either the current content of the rendered View or
   an optionally provided numeric value that specifies the preferred
   width in pixels.

   The "dynamic-width" feature is enable by specifying feature="dynamic-
   width" within either the <Require> or <Optional> element within the
   <ModulePrefs>














(surname)               Expires October 31, 2012              [Page 212]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="dynamic-width" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       gadgets.util.registerOnLoadHandler(
         function() {
           for (var n = 0; n < 100; n++) {
             document.write("foo ");
           }
           gadgets.window.adjustWidth();
         }
       );
     ]]></Content>
   </Module>

   When the "dynamic-width" feature is enabled for an application, both
   the "gadgets.window.getViewportDimensions" and
   "gadgets.window.adjustWidth" methods are provided:

   <static> <Void> gadgets.window.adjustWidth(opt_width)

   The method takes as input one optional numeric parameter that
   specifies the preferred width, in pixels, the application would like
   the container to allocate for the view.  The container is free to
   ignore the provided value.  If not specified, the container will
   calculate an appropriate width for the view based on the content
   currently displayed within the rendered view.

4.2.15.4.  The "dynamic-size" Feature

   The "dynamic-size" feature allows an application to request that the
   container dynamically change the vertical and horizontal display area
   allocated to the view based on either the current content of the
   rendered View or optionally provided numeric values that specify the
   preferred height and width in pixels.

   The "dynamic-size" feature is enable by specifying feature="dynamic-
   size" within either the <Require> or <Optional> element within the
   <ModulePrefs>














(surname)               Expires October 31, 2012              [Page 213]

Internet-Draft                Core-Gadget                       May 2012


   <Module>
     <ModulePrefs>
       <Require feature="dynamic-size" />
     </ModulePrefs>
     <Content type="html"><![CDATA[
       gadgets.util.registerOnLoadHandler(
         function() {
           for (var n = 0; n < 100; n++) {
             document.write("foo ");
           }
           gadgets.window.adjustSize();
         }
       );
     ]]></Content>
   </Module>

   When the "dynamic-size" feature is enabled for an application, both
   the "gadgets.window.getViewportDimensions" and
   "gadgets.window.adjustSize" methods are provided:

   <static> <Void> gadgets.window.adjustSize(opt_height, opt_width)

   The method takes as input two optional numeric parameters that
   specifies, respectively, the preferred height and width, in pixels,
   the application would like the container to allocate for the view.
   The container is free to ignore the provided values.  If not
   specified, the container will calculate appropriate values based on
   the content currently displayed within the rendered view.

4.2.15.5.  gadgets.window.getViewportDimensions

   The "gadgets.window.getViewportDimensions" method detects and returns
   the height and width of area allocated by the container for the
   renderable content of the View.

   <static> <Object> gadgets.window.getViewportDimensions()

   The method takes no parameters as input and returns a single
   JavaScript object with "height" and "width" properties whose values
   specify the number of pixels allocated by the container for the
   vertical and horizontal display area.

5.  References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2606]  Eastlake, D.E. and A. Panitz, "Reserved Top Level DNS
              Names", BCP 32, RFC 2606, June 1999.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P. and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

(surname)               Expires October 31, 2012              [Page 214]

Internet-Draft                Core-Gadget                       May 2012


   [RFC3986]  Berners-Lee, T., Fielding, R. and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66, RFC
              3986, January 2005.

   [RFC3987]  Duerst, M. and M. Suignard, "Internationalized Resource
              Identifiers (IRIs)", RFC 3987, January 2005.

   [RFC5849]  Hammer-Lahav, E., "The OAuth 1.0 Protocol", RFC 5849,
              April 2010.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988, October 2010.

   [RFC2617]  Franks, J., Hallam-Baker, P.M., Hostetler, J.L., Lawrence,
              S.D., Leach, P.J., Luotonen, A. and L. Stewart, "HTTP
              Authentication: Basic and Digest Access Authentication",
              RFC 2617, June 1999.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [I-D.ietf-oauth-v2]
              Hammer-Lahav, E., Recordon, D. and D. Hardt, "The OAuth
              2.0 Authorization Framework", Internet-Draft draft-ietf-
              oauth-v2-26, May 2012.

   [I-D.ietf-oauth-v2-bearer]
              Jones, M., Hardt, D. and D. Recordon, "The OAuth 2.0
              Authorization Protocol: Bearer Tokens", Internet-Draft
              draft-ietf-oauth-v2-bearer-18, March 2012.

   [I-D.ietf-oauth-v2-http-mac]
              Hammer-Lahav, E., "HTTP Authentication: MAC Access
              Authentication", Internet-Draft draft-ietf-oauth-v2-http-
              mac-01, February 2012.

   [W3C.REC-xml-infoset-20040204]
              Tobin, R. and J. Cowan, "XML Information Set (Second
              Edition)", World Wide Web Consortium Recommendation REC-
              xml-infoset-20040204, February 2004, <http://www.w3.org/TR
              /2004/REC-xml-infoset-20040204>.

   [W3C.REC-xmlbase-20090128]
              Marsh, J. and R. Tobin, "XML Base (Second Edition)", World
              Wide Web Consortium Recommendation REC-xmlbase-20090128,
              January 2009, <http://www.w3.org/TR/2009/REC-
              xmlbase-20090128>.

   [RNC]      Clark, J., "RELAX NG Compact Syntax", OASIS , Nov 2002,
              <http://www.oasis-open.org/committees/relax-ng/
              compact-20021121.html>.




(surname)               Expires October 31, 2012              [Page 215]

Internet-Draft                Core-Gadget                       May 2012


   [JSPEL]    Chung, K., DeLisle, P. and M. Roth, "Java Server Pages
              Expression Language", May 2006, <https://jsp.dev.java.net/
              spec/jsp-2_1-fr-spec-el.pdf>.

   [OAHub2.0]
              "OpenAjax Hub 2.0", , <http://www.openajax.org/member/wiki
              /OpenAjax_Hub_2.0_Specification_Introduction>.

   [OpenSocial-Specification]
              "OpenSocial Templating Specification", August 2011,
              <./OpenSocial-Specification.xml>.

   [OpenSocial-Templating]
              "OpenSocial Templating Specification", August 2011,
              <./OpenSocial-Templating.xml>.

   [core-api]
              "OpenSocial Core API Specification v3.0", April 2012,
              <../Core-API.xml>.

   [social-app]
              "OpenSocial Social Application Specification 3.0", April
              2012, <../Core-API.xml>.

Author's Address

   OpenSocial and Gadgets Specification Group
   
   Email: opensocial-and-gadgets-spec@googlegroups.com
























(surname)               Expires October 31, 2012              [Page 216]
